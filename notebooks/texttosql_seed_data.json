[{"query": "## sql context :\nCREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT); INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South'); CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE); INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');\n\n## Query generation task:\nWhat is the total volume of timber sold by each salesperson, sorted by salesperson?\n\n", "response": "SELECT salesperson_id, name, SUM(volume) as total_volume FROM timber_sales JOIN salesperson ON timber_sales.salesperson_id = salesperson.salesperson_id GROUP BY salesperson_id, name ORDER BY total_volume DESC;"}, {"query": "## sql context :\nCREATE TABLE equipment_maintenance (equipment_type VARCHAR(255), maintenance_frequency INT);\n\n## Query generation task:\nList all the unique equipment types and their corresponding total maintenance frequency from the equipment_maintenance table.\n\n", "response": "SELECT equipment_type, SUM(maintenance_frequency) AS total_maintenance_frequency FROM equipment_maintenance GROUP BY equipment_type;"}, {"query": "## sql context :\nCREATE TABLE marine_species (name VARCHAR(50), common_name VARCHAR(50), location VARCHAR(50));\n\n## Query generation task:\nHow many marine species are found in the Southern Ocean?\n\n", "response": "SELECT COUNT(*) FROM marine_species WHERE location = 'Southern Ocean';"}, {"query": "## sql context :\nCREATE TABLE trade_history (id INT, trader_id INT, stock VARCHAR(255), price DECIMAL(5,2), quantity INT, trade_time TIMESTAMP);\n\n## Query generation task:\nWhat is the total trade value and average price for each trader and stock in the trade_history table?\n\n", "response": "SELECT trader_id, stock, SUM(price * quantity) as total_trade_value, AVG(price) as avg_price FROM trade_history GROUP BY trader_id, stock;"}, {"query": "## sql context :\nCREATE TABLE upgrades (id INT, cost FLOAT, type TEXT); INSERT INTO upgrades (id, cost, type) VALUES (1, 500, 'Insulation'), (2, 1000, 'HVAC'), (3, 1500, 'Lighting');\n\n## Query generation task:\nFind the energy efficiency upgrades with the highest cost and their types.\n\n", "response": "SELECT type, cost FROM (SELECT type, cost, ROW_NUMBER() OVER (ORDER BY cost DESC) as rn FROM upgrades) sub WHERE rn = 1;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists defense; CREATE TABLE if not exists eu_humanitarian_assistance (id INT PRIMARY KEY, year INT, spending INT); INSERT INTO defense.eu_humanitarian_assistance (id, year, spending) VALUES (1, 2019, 1500), (2, 2020, 1800), (3, 2021, 2100);\n\n## Query generation task:\nWhat is the total spending on humanitarian assistance by the European Union in the last 3 years?\n\n", "response": "SELECT SUM(spending) FROM defense.eu_humanitarian_assistance WHERE year BETWEEN 2019 AND 2021;"}, {"query": "## sql context :\nCREATE TABLE SpeciesWaterTemp (SpeciesID int, Date date, WaterTemp float); INSERT INTO SpeciesWaterTemp (SpeciesID, Date, WaterTemp) VALUES (1, '2022-02-01', 12.8), (1, '2022-02-02', 13.1), (2, '2022-02-01', 14.3), (2, '2022-02-02', 14.7);\n\n## Query generation task:\nWhat is the average water temperature for each fish species in February?\n\n", "response": "SELECT SpeciesName, AVG(WaterTemp) as AvgTemp FROM SpeciesWaterTemp INNER JOIN FishSpecies ON SpeciesWaterTemp.SpeciesID = FishSpecies.SpeciesID WHERE MONTH(Date) = 2 GROUP BY SpeciesName;"}, {"query": "## sql context :\nCREATE TABLE Program_Outcomes (id INT, program_id INT, outcome_type VARCHAR, value INT, outcome_date DATE); INSERT INTO Program_Outcomes (id, program_id, outcome_type, value, outcome_date) VALUES (1, 1001, 'participants', 50, '2021-01-01'), (2, 1002, 'hours_donated', 1000, '2021-01-01');\n\n## Query generation task:\nDelete a program's outcome data\n\n", "response": "DELETE FROM Program_Outcomes WHERE program_id = 1002;"}, {"query": "## sql context :\nCREATE TABLE bus_routes (route_name VARCHAR(50), fare FLOAT); INSERT INTO bus_routes (route_name, fare) VALUES ('Green Line', 1.50), ('Red Line', 2.00), ('Blue Line', 1.75);\n\n## Query generation task:\nFind the total fare collected from passengers on 'Green Line' buses\n\n", "response": "SELECT SUM(fare) FROM bus_routes WHERE route_name = 'Green Line';"}, {"query": "## sql context :\nCREATE TABLE Inclusive_Housing (Property_ID INT, Inclusive VARCHAR(10), Property_Size INT); INSERT INTO Inclusive_Housing (Property_ID, Inclusive, Property_Size) VALUES (1, 'Yes', 900), (2, 'No', 1100), (3, 'Yes', 800), (4, 'No', 1200);\n\n## Query generation task:\nWhat is the average property size in inclusive housing areas?\n\n", "response": "SELECT AVG(Property_Size) FROM Inclusive_Housing WHERE Inclusive = 'Yes';"}, {"query": "## sql context :\nCREATE TABLE farmers_india (id INT, name VARCHAR(255), district_id INT, age INT, income INT); INSERT INTO farmers_india (id, name, district_id, age, income) VALUES (1, 'Farmer A', 1, 45, 50000); CREATE TABLE districts_india (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO districts_india (id, name, state) VALUES (1, 'District A', 'Maharashtra');\n\n## Query generation task:\nWhat is the average income of farmers in each district in India?\n\n", "response": "SELECT d.name, AVG(f.income) FROM farmers_india f JOIN districts_india d ON f.district_id = d.id GROUP BY d.name;"}, {"query": "## sql context :\nCREATE TABLE Ocean(id INT, region VARCHAR(20), temperature DECIMAL(5,2)); INSERT INTO Ocean(id, region, temperature) VALUES (1, 'Pacific', 20.5), (2, 'Atlantic', 18.3), (3, 'Indian', 23.2);\n\n## Query generation task:\nWhat is the average sea surface temperature in the Pacific Ocean per year?\n\n", "response": "SELECT AVG(temperature) FROM (SELECT temperature FROM Ocean WHERE region = 'Pacific' GROUP BY temperature, YEAR(STR_TO_DATE(region, '%Y'))) AS PacificAverage;"}, {"query": "## sql context :\nCREATE TABLE carbon_offsets (initiative_id INT, initiative_name VARCHAR(255), country VARCHAR(255), start_date DATE, end_date DATE);\n\n## Query generation task:\nUpdate the end date of carbon offset initiative 'Initiative 1' in Australia to '2025-12-31'.\n\n", "response": "UPDATE carbon_offsets SET end_date = '2025-12-31' WHERE initiative_name = 'Initiative 1' AND country = 'Australia';"}, {"query": "## sql context :\nCREATE TABLE sustainability_metrics (product_id INT, carbon_footprint INT, water_usage INT, waste_generation INT, region VARCHAR(50)); INSERT INTO sustainability_metrics (product_id, carbon_footprint, water_usage, waste_generation, region) VALUES (1, 10, 50, 20, 'Northeast'), (2, 15, 60, 30, 'Southwest'), (3, 8, 40, 15, 'Midwest'); CREATE TABLE products (product_id INT, product_name VARCHAR(50)); INSERT INTO products (product_id, product_name) VALUES (1, 'Lipstick'), (2, 'Eyeshadow'), (3, 'Blush');\n\n## Query generation task:\nWhich regions have the highest and lowest sustainability metrics for products?\n\n", "response": "SELECT region, MAX(sustainability_metrics.carbon_footprint) as max_carbon_footprint, MAX(sustainability_metrics.water_usage) as max_water_usage, MAX(sustainability_metrics.waste_generation) as max_waste_generation FROM sustainability_metrics JOIN products ON sustainability_metrics.product_id = products.product_id GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE vehicle_safety_testing (id INT PRIMARY KEY, vehicle_model VARCHAR(255), test_score FLOAT);\n\n## Query generation task:\nRemove the 'vehicle_safety_testing' table and its records\n\n", "response": "DROP TABLE vehicle_safety_testing;"}, {"query": "## sql context :\nCREATE TABLE mammals (id INT, name VARCHAR(255), conservation_status VARCHAR(255), year INT); CREATE TABLE birds (id INT, name VARCHAR(255), conservation_status VARCHAR(255), year INT); CREATE VIEW combined AS SELECT 'Mammals' AS animal_group, * FROM mammals UNION ALL SELECT 'Birds', * FROM birds;\n\n## Query generation task:\nShow the conservation status of marine mammals and birds by year.\n\n", "response": "SELECT animal_group, conservation_status, year, COUNT(*) FROM combined GROUP BY animal_group, conservation_status, year;"}, {"query": "## sql context :\nCREATE TABLE Armed_Forces (base_id INT, base_name VARCHAR(50), base_location VARCHAR(50), base_type VARCHAR(50)); INSERT INTO Armed_Forces (base_id, base_name, base_location, base_type) VALUES (1, 'Fort Bragg', 'North Carolina', 'Army'); INSERT INTO Armed_Forces (base_id, base_name, base_location, base_type) VALUES (2, 'Camp Pendleton', 'California', 'Marines');\n\n## Query generation task:\nWhat are the names and types of military bases located in 'California'?\n\n", "response": "SELECT base_name, base_type FROM Armed_Forces WHERE base_location = 'California';"}, {"query": "## sql context :\nCREATE TABLE artist (id INT, name VARCHAR(50)); INSERT INTO artist (id, name) VALUES (1, 'Picasso'), (2, 'Warhol'), (3, 'Basquiat'); CREATE TABLE artists_valuation (artist_id INT, valuation INT); INSERT INTO artists_valuation (artist_id, valuation) VALUES (1, 10000000), (1, 12000000), (2, 8000000), (2, 9000000), (3, 11000000);\n\n## Query generation task:\nWhat is the total value of artworks for each artist in the 'artists_valuation' table?\n\n", "response": "SELECT a.name, SUM(av.valuation) AS total_valuation FROM artist a JOIN artists_valuation av ON a.id = av.artist_id GROUP BY a.id, a.name;"}, {"query": "## sql context :\nCREATE TABLE startups (id INT, name VARCHAR(50), domain VARCHAR(50), location VARCHAR(50)); INSERT INTO startups (id, name, domain, location) VALUES (1, 'SensBiotech', 'Biosensors', 'CA'); INSERT INTO startups (id, name, domain, location) VALUES (2, 'BioSignal', 'Bioinformatics', 'NY'); CREATE TABLE funding (id INT, startup_id INT, amount DECIMAL(10, 2), purpose VARCHAR(50)); INSERT INTO funding (id, startup_id, amount, purpose) VALUES (1, 1, 50000.00, 'Biosensor Development'); INSERT INTO funding (id, startup_id, amount, purpose) VALUES (2, 2, 30000.00, 'Data Analysis');\n\n## Query generation task:\nList startups that received funding for biosensor development\n\n", "response": "SELECT s.name FROM startups s JOIN funding f ON s.id = f.startup_id WHERE s.domain = 'Biosensors' AND f.purpose = 'Biosensor Development';"}, {"query": "## sql context :\nCREATE TABLE HumanitarianAssistance (Country VARCHAR(50), Organization VARCHAR(50), Amount INT, Year INT); INSERT INTO HumanitarianAssistance (Country, Organization, Amount, Year) VALUES ('Kenya', 'Doctors Without Borders', 2000000, 2018), ('Nigeria', 'International Rescue Committee', 3000000, 2019), ('South Africa', 'Oxfam', 1500000, 2020), ('Ethiopia', 'Save the Children', 2500000, 2017), ('Sudan', 'Care International', 1800000, 2016);\n\n## Query generation task:\nWhat is the total amount of humanitarian assistance provided by non-governmental organizations (NGOs) to countries in Africa in the last 5 years?\n\n", "response": "SELECT SUM(Amount) AS TotalAssistance, Country FROM HumanitarianAssistance WHERE Organization NOT IN ('Government', 'Military') AND Year BETWEEN 2016 AND 2020 GROUP BY Country;"}, {"query": "## sql context :\nCREATE TABLE ResearchPapers (ID INT, Title VARCHAR(100), PublishedDate DATE, Author VARCHAR(50), Country VARCHAR(50)); INSERT INTO ResearchPapers (ID, Title, PublishedDate, Author, Country) VALUES (1, 'AD Research 1', '2022-01-15', 'A. Smith', 'USA'), (2, 'AD Research 2', '2022-03-20', 'B. Johnson', 'Canada'), (3, 'AD Research 3', '2021-12-12', 'C. Lee', 'South Korea'), (4, 'AD Research 4', '2022-05-08', 'D. Patel', 'India'), (5, 'AD Research 5', '2021-11-01', 'E. Chen', 'China');\n\n## Query generation task:\nWhat is the total number of autonomous driving research papers published by country in the past year?\n\n", "response": "SELECT Country, COUNT(*) as Total_Papers FROM ResearchPapers WHERE PublishedDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND Author LIKE '%autonomous%' GROUP BY Country;"}, {"query": "## sql context :\nCREATE TABLE incident_responses (incident VARCHAR(50), status VARCHAR(15)); INSERT INTO incident_responses (incident, status) VALUES ('Incident 1', 'Resolved'), ('Incident 2', 'In Progress'), ('Incident 3', 'Resolved'), ('Incident 4', 'In Progress'), ('Incident 5', 'Assessed');\n\n## Query generation task:\nWhat are the unique combinations of security incident types and their corresponding statuses in the incident_responses table, excluding any records with 'In Progress' status?\n\n", "response": "SELECT incident, status FROM incident_responses WHERE status != 'In Progress' GROUP BY incident, status;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists genetic;CREATE TABLE if not exists genetic.projects (id INT PRIMARY KEY, name VARCHAR(100), start_date DATE);INSERT INTO genetic.projects (id, name, start_date) VALUES (1, 'ProjectX', '2018-01-01'), (2, 'ProjectY', '2020-05-15'), (3, 'ProjectZ', '2017-08-08'), (4, 'ProjectW', '2021-03-03'), (5, 'ProjectV', '2020-09-20'), (6, 'ProjectU', '2019-12-31');\n\n## Query generation task:\nWhat is the maximum number of genetic research projects in Japan per year?\n\n", "response": "SELECT YEAR(start_date) AS year, MAX(COUNT(*)) AS projects_count FROM genetic.projects GROUP BY year;"}, {"query": "## sql context :\nCREATE TABLE project_timeline (id INT, project VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO project_timeline (id, project, start_date, end_date) VALUES (1, 'Office Building', '2019-12-20', '2021-04-30'), (2, 'Residential Apartments', '2021-03-01', '2022-08-01'), (3, 'School', '2020-06-15', '2021-10-15'), (4, 'Library', '2020-01-01', '2020-06-15'), (5, 'Park', '2021-01-01', '2021-12-31');\n\n## Query generation task:\nHow many construction projects were completed each month in 2020 and 2021?\n\n", "response": "SELECT YEAR(start_date) AS year, MONTH(start_date) AS month, COUNT(*) AS projects FROM project_timeline WHERE end_date IS NOT NULL GROUP BY year, month;"}, {"query": "## sql context :\nCREATE TABLE LaborStatistics (workerID INT, laborDate DATE, hourlyRate DECIMAL(10,2), hoursWorked DECIMAL(10,2));\n\n## Query generation task:\nWhat is the average labor cost per worker per week in the 'LaborStatistics' table?\n\n", "response": "SELECT AVG(hourlyRate * hoursWorked * 5) AS AverageLaborCost FROM LaborStatistics;"}, {"query": "## sql context :\nCREATE TABLE food_justice_orgs (org_id INT, org_name TEXT, country TEXT, num_projects INT); INSERT INTO food_justice_orgs (org_id, org_name, country, num_projects) VALUES (1, 'Org A', 'Kenya', 10), (2, 'Org B', 'Nigeria', 7), (3, 'Org C', 'South Africa', 15);\n\n## Query generation task:\nList all food justice organizations in Africa, along with the number of projects they have implemented.\n\n", "response": "SELECT org_name, num_projects FROM food_justice_orgs WHERE country = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE animals (id INT, name VARCHAR(20), species VARCHAR(20), weight DECIMAL(5, 2)); INSERT INTO animals (id, name, species, weight) VALUES (1, 'Elephant', 'African', 6000), (2, 'Lion', 'African', 400), (3, 'Hippo', 'African', 3000), (4, 'Tiger', 'Asian', 300), (5, 'Crane', 'African', 100), (6, 'Rhinoceros', 'African', 2000), (7, 'Zebra', 'African', 450), (8, 'Giraffe', 'African', 1200), (9, 'Bear', 'Eurasian', 600), (10, 'Crocodile', 'Nile', 700);\n\n## Query generation task:\nRetrieve the names and species of all animals that weigh more than 500 kg\n\n", "response": "SELECT name, species FROM animals WHERE weight > 500;"}, {"query": "## sql context :\nCREATE TABLE virtual_tour_stats (hotel_id INT, hotel_name TEXT, region TEXT, q1_2022_views INT); INSERT INTO virtual_tour_stats (hotel_id, hotel_name, region, q1_2022_views) VALUES (10, 'Hotel X', 'APAC', 500), (11, 'Hotel Y', 'APAC', 650);\n\n## Query generation task:\nIdentify hotels with the highest virtual tour engagement in the APAC region in Q1 2022\n\n", "response": "SELECT hotel_name, q1_2022_views FROM virtual_tour_stats WHERE region = 'APAC' ORDER BY q1_2022_views DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE PolicyAnalysis (id INT, policy VARCHAR(100), department VARCHAR(50)); INSERT INTO PolicyAnalysis (id, policy, department) VALUES (1, 'Data Access Policy', 'Sales'), (2, 'Password Policy', 'Marketing');\n\n## Query generation task:\nWhat are the common cybersecurity policies across all departments, according to our Policy Analysis database?\n\n", "response": "SELECT policy FROM PolicyAnalysis GROUP BY policy HAVING COUNT(DISTINCT department) = (SELECT COUNT(DISTINCT department) FROM PolicyAnalysis);"}, {"query": "## sql context :\nCREATE TABLE companies (id INT, name TEXT, city TEXT, state TEXT, founder_gender TEXT); INSERT INTO companies (id, name, city, state, founder_gender) VALUES (1, 'Acme Inc', 'San Francisco', 'CA', 'female');\n\n## Query generation task:\nHow many companies were founded by women in the San Francisco Bay Area?\n\n", "response": "SELECT COUNT(*) FROM companies WHERE city='San Francisco' AND state='CA' AND founder_gender='female';"}, {"query": "## sql context :\nCREATE TABLE socially_responsible_loans (id INT, value DECIMAL(10, 2), client_gender VARCHAR(10), date DATE);\n\n## Query generation task:\nWhat was the total value of socially responsible loans issued to women in H2 2021?\n\n", "response": "SELECT SUM(value) FROM socially_responsible_loans WHERE client_gender = 'female' AND date BETWEEN '2021-07-01' AND '2021-12-31';"}, {"query": "## sql context :\nCREATE TABLE satellites (id INT, name VARCHAR(255), country_of_origin VARCHAR(255), avg_distance FLOAT);\n\n## Query generation task:\nWhat is the maximum distance of all satellites from the Earth's surface, organized by country of origin?\n\n", "response": "SELECT country_of_origin, MAX(avg_distance) FROM satellites GROUP BY country_of_origin;"}, {"query": "## sql context :\nCREATE TABLE mobile_usage (subscriber_id INT, data_usage FLOAT, city VARCHAR(20), year INT); INSERT INTO mobile_usage (subscriber_id, data_usage, city, year) VALUES (1, 3.5, 'Toronto', 2022), (2, 4.2, 'New York', 2022), (3, 3.8, 'Toronto', 2022);\n\n## Query generation task:\nWhat is the total data usage for mobile customers in the city of Toronto for the year 2022?\n\n", "response": "SELECT SUM(data_usage) FROM mobile_usage WHERE city = 'Toronto' AND year = 2022;"}, {"query": "## sql context :\nCREATE TABLE vessels (id INT, name TEXT, max_cargo_weight INT); INSERT INTO vessels (id, name, max_cargo_weight) VALUES (3, 'VesselC', 50000);\n\n## Query generation task:\nWhat is the maximum cargo weight for VesselC?\n\n", "response": "SELECT max_cargo_weight FROM vessels WHERE name = 'VesselC';"}, {"query": "## sql context :\nCREATE TABLE worker_scores (worker_id INT, score INT); INSERT INTO worker_scores (worker_id, score) VALUES (1, 95), (2, 88), (3, 72);\n\n## Query generation task:\nWhat is the minimum cultural competency score by worker?\n\n", "response": "SELECT worker_id, MIN(score) FROM worker_scores;"}, {"query": "## sql context :\nCREATE TABLE incident_region(id INT, region VARCHAR(50), incidents INT, incident_date DATE);\n\n## Query generation task:\nWhat is the total number of security incidents that have occurred in each region in the past year?\n\n", "response": "SELECT region, SUM(incidents) as total_incidents FROM incident_region WHERE incident_date > DATE(NOW()) - INTERVAL 365 DATE GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE defense_diplomacy (diplomacy_id INT, event_name VARCHAR(50), participant_country VARCHAR(50), event_date DATE, event_description TEXT);\n\n## Query generation task:\nShow all records in the defense_diplomacy table where the participant_country is 'China' or 'India'\n\n", "response": "SELECT * FROM defense_diplomacy WHERE participant_country IN ('China', 'India');"}, {"query": "## sql context :\nCREATE TABLE us_military_personnel (id INT, year INT, personnel INT); INSERT INTO us_military_personnel (id, year, personnel) VALUES (1, 2018, 2100000), (2, 2019, 2150000), (3, 2020, 2180000);\n\n## Query generation task:\nWhat was the total number of military personnel in the United States in 2018, 2019, and 2020?\n\n", "response": "SELECT SUM(personnel) FROM us_military_personnel WHERE year IN (2018, 2019, 2020);"}, {"query": "## sql context :\nCREATE TABLE prison (id INT, name TEXT, security_level TEXT, age INT); INSERT INTO prison (id, name, security_level, age) VALUES (1, 'John Doe', 'low_security', 25); INSERT INTO prison (id, name, security_level, age) VALUES (2, 'Jane Smith', 'medium_security', 35);\n\n## Query generation task:\nWhat is the name and age of the youngest inmate in the prison table?\n\n", "response": "SELECT name, age FROM prison ORDER BY age LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE hotel_ratings (country VARCHAR(50), stars FLOAT); INSERT INTO hotel_ratings (country, stars) VALUES ('Japan', 4.2), ('South Korea', 4.5);\n\n## Query generation task:\nWhat is the average hotel star rating for hotels in Japan and South Korea?\n\n", "response": "SELECT AVG(stars) FROM hotel_ratings WHERE country IN ('Japan', 'South Korea');"}, {"query": "## sql context :\nCREATE TABLE Articles (id INT, language TEXT, publish_date DATE, word_count INT); INSERT INTO Articles (id, language, publish_date, word_count) VALUES (1, 'Language 1', '2023-01-01', 500);\n\n## Query generation task:\nWhat is the total word count for articles in each language per week?\n\n", "response": "SELECT language, DATE_TRUNC('week', publish_date) as week, SUM(word_count) as total_word_count FROM Articles GROUP BY language, week ORDER BY week;"}, {"query": "## sql context :\nCREATE TABLE vaccinations (patient_id INT, county VARCHAR(20), vaccine VARCHAR(20)); INSERT INTO vaccinations (patient_id, county, vaccine) VALUES (1, 'Los Angeles', 'Flu'), (2, 'San Francisco', 'Flu'), (3, 'San Diego', 'Flu'); CREATE TABLE patients (patient_id INT, age INT); INSERT INTO patients (patient_id, age) VALUES (1, 45), (2, 30), (3, 50);\n\n## Query generation task:\nWhat is the average age of patients who received a flu shot in California, grouped by county?\n\n", "response": "SELECT v.county, AVG(p.age) as avg_age FROM vaccinations v INNER JOIN patients p ON v.patient_id = p.patient_id WHERE vaccine = 'Flu' AND county = 'California' GROUP BY v.county;"}, {"query": "## sql context :\nCREATE TABLE geneva_motor_show (year INT, make VARCHAR(50), model VARCHAR(50), horsepower INT); INSERT INTO geneva_motor_show (year, make, model, horsepower) VALUES (2021, 'Koenigsegg', 'Jesko', 1600), (2021, 'Bugatti', 'Chiron Super Sport', 1578), (2021, 'Rimac', 'Nevera', 1914), (2021, 'Pagani', 'Huayra BC', 800);\n\n## Query generation task:\nWhat was the highest horsepower vehicle at the 2021 Geneva Motor Show?\n\n", "response": "SELECT make, model, MAX(horsepower) FROM geneva_motor_show WHERE year = 2021;"}, {"query": "## sql context :\nCREATE TABLE economic_diversification (id INT, initiative_name TEXT, budget INT, category TEXT, start_year INT); INSERT INTO economic_diversification (id, initiative_name, budget, category, start_year) VALUES (1, 'Cultural Festival', 30000, 'Tourism', 2019), (2, 'Eco-Lodge Development', 50000, 'Tourism', 2020), (3, 'Agri-Tourism Program', 40000, 'Tourism', 2021);\n\n## Query generation task:\nWhat is the number of economic diversification initiatives in tourism and their total budget for the last 3 years?\n\n", "response": "SELECT category, start_year, COUNT(*), SUM(budget) FROM economic_diversification WHERE start_year >= 2019 GROUP BY category, start_year;"}, {"query": "## sql context :\nCREATE TABLE VehicleModels (Model VARCHAR(255), Manufacturer VARCHAR(255), SafetyRating FLOAT); INSERT INTO VehicleModels (Model, Manufacturer, SafetyRating) VALUES ('Model S', 'Tesla', 5.1), ('Model 3', 'Tesla', 4.9), ('Prius', 'Toyota', 4.6), ('Civic', 'Honda', 4.4);\n\n## Query generation task:\nWhich electric vehicle models have a safety rating above 4.5?\n\n", "response": "SELECT Model FROM VehicleModels WHERE SafetyRating > 4.5;"}, {"query": "## sql context :\nCREATE TABLE wellbeing_programs (athlete_id INT, sport VARCHAR(50), program_date DATE); INSERT INTO wellbeing_programs (athlete_id, sport, program_date) VALUES (1, 'Soccer', '2022-01-01'), (2, 'Basketball', '2022-01-02'), (3, 'Football', '2022-01-03'), (4, 'Soccer', '2022-01-04'), (5, 'Baseball', '2022-01-05');\n\n## Query generation task:\nHow many athletes have participated in wellbeing programs in each sport in the last year, and which sport had the most participants?\n\n", "response": "SELECT sport, COUNT(DISTINCT athlete_id) AS participants FROM wellbeing_programs WHERE program_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY sport ORDER BY participants DESC;"}, {"query": "## sql context :\nCREATE TABLE space_missions (id INT, name VARCHAR(255), leader VARCHAR(255), year INT); INSERT INTO space_missions (id, name, leader, year) VALUES (1, 'Mars Rover', 'Dr. Jessica Watkins', 2022); INSERT INTO space_missions (id, name, leader, year) VALUES (2, 'ISS Expedition', 'Anousheh Ansari', 2023);\n\n## Query generation task:\nWhat is the total number of space missions led by women?\n\n", "response": "SELECT COUNT(*) FROM space_missions WHERE leader IN (SELECT name FROM astronauts WHERE gender = 'Female');"}, {"query": "## sql context :\nCREATE TABLE boston_emergency_response (id INT, incident_type TEXT, response_time INT); INSERT INTO boston_emergency_response (id, incident_type, response_time) VALUES  (1, 'Fire', 120), (2, 'Medical', 150), (3, 'Police', 180);\n\n## Query generation task:\nWhat is the average response time for fires in Boston?\n\n", "response": "SELECT AVG(response_time) FROM boston_emergency_response WHERE incident_type = 'Fire';"}, {"query": "## sql context :\nCREATE TABLE products(product_id INT, is_recycled BOOLEAN);\n\n## Query generation task:\nWhat is the percentage of products that are made from recycled materials?\n\n", "response": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM products)) as percentage FROM products WHERE is_recycled = TRUE;"}, {"query": "## sql context :\nCREATE TABLE CoOwners (CoOwnerID int, PropertyID int, City varchar(20)); CREATE TABLE Properties (PropertyID int, Accessibility varchar(5)); INSERT INTO CoOwners (CoOwnerID, PropertyID, City) VALUES (1, 1, 'New York City'); INSERT INTO Properties (PropertyID, Accessibility) VALUES (1, 'No'); INSERT INTO CoOwners (CoOwnerID, PropertyID, City) VALUES (2, 2, 'New York City'); INSERT INTO Properties (PropertyID, Accessibility) VALUES (2, 'Yes');\n\n## Query generation task:\nList property co-owners in New York City who have not implemented accessibility features.\n\n", "response": "SELECT CoOwners.CoOwnerID, Properties.City FROM CoOwners INNER JOIN Properties ON CoOwners.PropertyID = Properties.PropertyID WHERE Properties.City = 'New York City' AND Properties.Accessibility = 'No';"}, {"query": "## sql context :\nCREATE TABLE BrandRevenue (brand VARCHAR(255), revenue DECIMAL(10,2), year INT, circular_model BOOLEAN);\n\n## Query generation task:\nWhat is the total revenue generated by brands that have a circular business model, in the year 2020?\n\n", "response": "SELECT SUM(revenue) FROM BrandRevenue WHERE circular_model = TRUE AND year = 2020;"}, {"query": "## sql context :\nCREATE TABLE auto_show (id INT, vehicle_name VARCHAR(50), safety_rating INT);\n\n## Query generation task:\nWhich autonomous vehicles have the highest safety ratings in the 'auto_show' table?\n\n", "response": "SELECT vehicle_name, safety_rating FROM (SELECT vehicle_name, safety_rating, RANK() OVER (ORDER BY safety_rating DESC) as safety_rank FROM auto_show WHERE vehicle_name LIKE '%Autonomous%') AS auton_ranks WHERE safety_rank = 1;"}, {"query": "## sql context :\nCREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(255), Region varchar(255)); CREATE TABLE Inspections (InspectionID int, RestaurantID int, InspectionScore int, InspectionDate date);\n\n## Query generation task:\nWhat is the average food safety inspection score for restaurants located in 'Westwood'?\n\n", "response": "SELECT AVG(I.InspectionScore) as AvgInspectionScore FROM Restaurants R INNER JOIN Inspections I ON R.RestaurantID = I.RestaurantID WHERE R.Region = 'Westwood';"}, {"query": "## sql context :\nCREATE TABLE Hospitals (HospitalID INT, HospitalName VARCHAR(255), State VARCHAR(255)); INSERT INTO Hospitals (HospitalID, HospitalName, State) VALUES (1, 'Alaska General Hospital', 'Alaska'), (2, 'Bama Healthcare', 'Alabama'), (3, 'California Care', 'California'), (4, 'Delaware Hospital', 'Delaware'), (5, 'Florida Medical Center', 'Florida');\n\n## Query generation task:\nHow many hospitals are there in each state in the United States?\n\n", "response": "SELECT State, COUNT(*) FROM Hospitals GROUP BY State;"}, {"query": "## sql context :\nCREATE TABLE AnimalEducation (id INT, animal_id INT, program_id INT); INSERT INTO AnimalEducation (id, animal_id, program_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2);\n\n## Query generation task:\nWhat are the names and habitats of all animals that are part of an education program in the 'Americas' region?\n\n", "response": "SELECT a.name, h.name FROM Animals a INNER JOIN AnimalEducation ae ON a.id = ae.animal_id INNER JOIN EducationPrograms e ON ae.program_id = e.id INNER JOIN Coordinators c ON e.coordinator_id = c.id INNER JOIN Habitat h ON a.habitat_id = h.id WHERE c.region = 'Americas';"}, {"query": "## sql context :\nCREATE TABLE DefenseProjects (id INT, project_name VARCHAR(50), start_date DATE, risk_level INT); INSERT INTO DefenseProjects (id, project_name, start_date, risk_level) VALUES (1, 'Project G', '2019-01-01', 3), (2, 'Project H', '2018-06-15', 5), (3, 'Project I', '2019-12-31', NULL);\n\n## Query generation task:\nList defense projects that started in 2019 and their associated risks, if any.\n\n", "response": "SELECT project_name, risk_level FROM DefenseProjects WHERE start_date >= '2019-01-01' AND start_date <= '2019-12-31' AND risk_level IS NOT NULL;"}, {"query": "## sql context :\nCREATE TABLE textile_waste (country VARCHAR(50), year INT, amount INT); INSERT INTO textile_waste (country, year, amount) VALUES ('Bangladesh', 2021, 50000), ('Vietnam', 2021, 40000), ('India', 2021, 30000);\n\n## Query generation task:\nWhat is the total waste generation in the textile category for each country in 2021?'\n\n", "response": "SELECT country, SUM(amount) as total_textile_waste FROM textile_waste WHERE year = 2021 GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE maintenance_requests (request_id INT, date DATE, type VARCHAR(255)); INSERT INTO maintenance_requests (request_id, date, type) VALUES (1, '2020-01-01', 'equipment'); INSERT INTO maintenance_requests (request_id, date, type) VALUES (2, '2020-01-15', 'facility');\n\n## Query generation task:\nHow many military equipment maintenance requests were there in January 2020?\n\n", "response": "SELECT COUNT(*) FROM maintenance_requests WHERE date BETWEEN '2020-01-01' AND '2020-01-31' AND type = 'equipment';"}, {"query": "## sql context :\nCREATE TABLE Suppliers (supplier_id INT, supplier_name VARCHAR(20), contact_name VARCHAR(20), contact_phone VARCHAR(15), last_supply DATE);\n\n## Query generation task:\nList all the suppliers and their contact information who have not supplied any raw materials in the last 6 months.\n\n", "response": "SELECT Suppliers.* FROM Suppliers LEFT JOIN (SELECT supplier_id FROM Raw_Materials WHERE supply_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY supplier_id) AS RM ON Suppliers.supplier_id = RM.supplier_id WHERE RM.supplier_id IS NULL;"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID int, DonorName varchar(100), Region varchar(50), Country varchar(50), DonationDate date, AmountDonated decimal(10,2)); INSERT INTO Donors (DonorID, DonorName, Region, Country, DonationDate, AmountDonated) VALUES (1, 'John Doe', 'North America', 'USA', '2022-01-01', 500.00), (2, 'Jane Smith', 'North America', 'Canada', '2021-01-01', 300.00), (3, 'Ali Khan', 'Asia', 'Pakistan', '2022-03-01', 250.00);\n\n## Query generation task:\nWhat is the total donation amount by region?\n\n", "response": "SELECT Region, SUM(AmountDonated) as TotalDonated FROM Donors GROUP BY Region;"}, {"query": "## sql context :\nCREATE TABLE satellites (id INT, name TEXT, country TEXT, launch_date DATE); INSERT INTO satellites (id, name, country, launch_date) VALUES (1, 'Sentinel-1A', 'France', '2012-04-03'); INSERT INTO satellites (id, name, country, launch_date) VALUES (2, 'Sentinel-1B', 'France', '2014-04-22'); INSERT INTO satellites (id, name, country, launch_date) VALUES (3, 'USA-202', 'USA', '2011-03-24'); INSERT INTO satellites (id, name, country, launch_date) VALUES (4, 'INSAT-3A', 'India', '2003-04-10');\n\n## Query generation task:\nDisplay the names of all satellites launched before 2010\n\n", "response": "SELECT name FROM satellites WHERE launch_date < '2010-01-01';"}, {"query": "## sql context :\nCREATE TABLE user_activity (user_id INT, activity_date DATE); INSERT INTO user_activity (user_id, activity_date) VALUES (1, '2023-01-01'), (2, '2023-01-05'), (3, '2023-01-07'), (4, '2023-01-10'), (5, '2023-01-12');\n\n## Query generation task:\nCount the number of unique users who engaged with virtual tours in 'January'?\n\n", "response": "SELECT COUNT(DISTINCT user_id) FROM user_activity WHERE EXTRACT(MONTH FROM activity_date) = 1;"}, {"query": "## sql context :\nCREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(20)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'France'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 30, 'Female', 'France'); CREATE TABLE VRUsers (PlayerID INT, VRDevice VARCHAR(20)); INSERT INTO VRUsers (PlayerID, VRDevice) VALUES (1, 'Oculus');\n\n## Query generation task:\nWhat is the average age of players who use VR in France?\n\n", "response": "SELECT AVG(Age) FROM Players JOIN VRUsers ON Players.PlayerID = VRUsers.PlayerID WHERE Country = 'France';"}, {"query": "## sql context :\nCREATE TABLE conservation_programs (id INT, program_name VARCHAR(255), location VARCHAR(255)); CREATE TABLE animal_populations (id INT, program_id INT, animal_type VARCHAR(255), population INT); INSERT INTO conservation_programs (id, program_name, location) VALUES (1, 'Yellowstone National Park', 'USA'), (2, 'Banff National Park', 'Canada'), (3, 'Everglades National Park', 'USA'); INSERT INTO animal_populations (id, program_id, animal_type, population) VALUES (1, 1, 'Bison', 5000), (2, 1, 'Elk', 7000), (3, 2, 'Moose', 3000), (4, 3, 'Alligator', 2000);\n\n## Query generation task:\nCalculate the total population of animals in North American conservation programs\n\n", "response": "SELECT SUM(animal_populations.population) FROM conservation_programs INNER JOIN animal_populations ON conservation_programs.id = animal_populations.program_id WHERE conservation_programs.location = 'USA' OR conservation_programs.location = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE biomes (biome_id INT PRIMARY KEY, name VARCHAR(50), area_km2 FLOAT); INSERT INTO biomes (biome_id, name, area_km2) VALUES (1, 'Tropical Rainforest', 15000000.0), (2, 'Temperate Rainforest', 250000.0), (3, 'Boreal Forest', 12000000.0); CREATE TABLE trees (tree_id INT PRIMARY KEY, species VARCHAR(50), biome_id INT, dbh FLOAT, FOREIGN KEY (biome_id) REFERENCES biomes(biome_id)); INSERT INTO trees (tree_id, species, biome_id, dbh) VALUES (1, 'Douglas Fir', 2, 60.0), (2, 'Western Hemlock', 2, 45.0), (3, 'Red Alder', 2, 30.0);\n\n## Query generation task:\nHow many tree species in the temperate rainforest have a DBH greater than 50 cm?\n\n", "response": "SELECT COUNT(DISTINCT species) FROM trees JOIN biomes ON trees.biome_id = biomes.biome_id WHERE trees.dbh > 50.0 AND biomes.name = 'Temperate Rainforest';"}, {"query": "## sql context :\nCREATE TABLE cotton_source (brand VARCHAR(255), country VARCHAR(255), quantity INT); INSERT INTO cotton_source (brand, country, quantity) VALUES ('BrandA', 'USA', 1500), ('BrandB', 'USA', 2000), ('BrandC', 'China', 1000);\n\n## Query generation task:\nWhat is the total quantity of cotton sourced from the United States by brands that have committed to fair labor practices?\n\n", "response": "SELECT SUM(quantity) FROM cotton_source WHERE country = 'USA' AND brand IN (SELECT brand FROM fair_labor WHERE commitment = 'yes');"}, {"query": "## sql context :\nCREATE TABLE movies (title VARCHAR(255), genre VARCHAR(255), studio VARCHAR(255), rating FLOAT); INSERT INTO movies (title, genre, studio, rating) VALUES ('Movie19', 'Action', 'Italy Studio1', 8.5), ('Movie20', 'Drama', 'Italy Studio2', 9.0);\n\n## Query generation task:\nFind the title and genre of the top 3 movies with the highest ratings from studios based in Italy, ordered by ratings in descending order.\n\n", "response": "SELECT title, genre FROM (SELECT title, genre, studio, rating, ROW_NUMBER() OVER (PARTITION BY studio ORDER BY rating DESC) as rank FROM movies WHERE studio LIKE '%Italy%') subquery WHERE rank <= 3 ORDER BY rating DESC;"}, {"query": "## sql context :\nCREATE TABLE marine_species (id INT, name VARCHAR(255), population_size INT, growth_rate DECIMAL(4,2)); INSERT INTO marine_species (id, name, population_size, growth_rate) VALUES (1, 'Clownfish', 10000, 0.05), (2, 'Sea Turtle', 5000, 0.10), (3, 'Dolphin', 20000, 0.02);\n\n## Query generation task:\nList the top 3 marine species with the highest population growth rate.\n\n", "response": "SELECT name, growth_rate FROM (SELECT name, growth_rate, ROW_NUMBER() OVER (ORDER BY growth_rate DESC) rn FROM marine_species) t WHERE rn <= 3;"}, {"query": "## sql context :\nCREATE TABLE wind_turbines (id INT, installation_year INT, energy_production FLOAT, country VARCHAR(50)); INSERT INTO wind_turbines (id, installation_year, energy_production, country) VALUES (1, 2005, 2.8, 'China'), (2, 2008, 3.5, 'India'), (3, 2012, 4.2, 'Germany'), (4, 2015, 4.5, 'China'), (5, 2016, 4.7, 'China'), (6, 2017, 5.0, 'China');\n\n## Query generation task:\nWhat is the minimum energy production of wind turbines installed in China after 2016?\n\n", "response": "SELECT MIN(energy_production) FROM wind_turbines WHERE installation_year > 2016 AND country = 'China';"}, {"query": "## sql context :\nCREATE TABLE Legislation (ID INT, Description TEXT, Status VARCHAR(255));\n\n## Query generation task:\nInsert a new record into the \"Legislation\" table with the ID of 4, a description of \"Climate Change Act\", and a status of \"Draft\"\n\n", "response": "INSERT INTO Legislation (ID, Description, Status) VALUES (4, 'Climate Change Act', 'Draft');"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, DonationAmount DECIMAL(10,2), Age INT);\n\n## Query generation task:\nWhat is the total donation amount from donors aged 40 and above?\n\n", "response": "SELECT SUM(DonationAmount) FROM Donors WHERE Age >= 40;"}, {"query": "## sql context :\nCREATE TABLE recalls(id INT, product VARCHAR(30), reason VARCHAR(30), state VARCHAR(20), date DATE); INSERT INTO recalls(id, product, reason, state, date) VALUES (1, 'Organic Chicken Breast', 'contamination', 'California', '2021-01-01'); INSERT INTO recalls(id, product, reason, state, date) VALUES (2, 'Organic Chicken Wings', 'mislabeling', 'Texas', '2021-02-01');\n\n## Query generation task:\nHow many times has there been a recall of organic chicken products in the US in the last 2 years?\n\n", "response": "SELECT COUNT(*) FROM recalls WHERE product LIKE 'Organic Chicken%' AND date BETWEEN '2020-01-01' AND '2022-12-31';"}, {"query": "## sql context :\nCREATE TABLE MilitaryCyberOps (Id INT, Region VARCHAR(50), Personnel INT, Year INT); INSERT INTO MilitaryCyberOps (Id, Region, Personnel, Year) VALUES (1, 'Asia', 200, 2021); INSERT INTO MilitaryCyberOps (Id, Region, Personnel, Year) VALUES (2, 'Europe', 300, 2021);\n\n## Query generation task:\nWhat is the total number of military personnel involved in cybersecurity operations in Asia?\n\n", "response": "SELECT SUM(Personnel) FROM MilitaryCyberOps WHERE Region = 'Asia';"}, {"query": "## sql context :\nCREATE TABLE resource_extraction (resource_type VARCHAR(50), extraction_date DATE, quantity INT); INSERT INTO resource_extraction (resource_type, extraction_date, quantity) VALUES ('gold', '2022-01-01', 100), ('silver', '2022-01-05', 200);\n\n## Query generation task:\nDisplay total resources extracted and the respective extraction dates for 'gold' and 'silver' resources from the 'resource_extraction' table.\n\n", "response": "SELECT resource_type, SUM(quantity) as total_quantity, extraction_date FROM resource_extraction WHERE resource_type IN ('gold', 'silver') GROUP BY resource_type, extraction_date;"}, {"query": "## sql context :\nCREATE TABLE Buildings (id INT, name VARCHAR(100), height FLOAT, num_stories INT, city VARCHAR(50)); INSERT INTO Buildings (id, name, height, num_stories, city) VALUES (1, 'Empire State Building', 381, 102, 'New York');\n\n## Query generation task:\nWhat is the name, height, and number of stories for all buildings in the city of New York with more than 50 floors?\n\n", "response": "SELECT name, height, num_stories FROM Buildings WHERE city = 'New York' AND num_stories > 50;"}, {"query": "## sql context :\nCREATE TABLE factories (id INT, sector TEXT, employee_count INT); INSERT INTO factories (id, sector, employee_count) VALUES (1, 'renewable energy', 60), (2, 'renewable energy', 40), (3, 'oil', 70), (4, 'coal', 80), (5, 'renewable energy', 30);\n\n## Query generation task:\nCount the number of factories in the \"renewable energy\" sector that have more than 50 employees.\n\n", "response": "SELECT COUNT(*) FROM factories WHERE sector = 'renewable energy' HAVING employee_count > 50;"}, {"query": "## sql context :\nCREATE TABLE sports_events (event_id INT, year INT, tickets_sold INT); INSERT INTO sports_events (event_id, year, tickets_sold) VALUES (1, 2017, 60000), (2, 2018, 80000), (3, 2017, 55000), (4, 2019, 52000);\n\n## Query generation task:\nHow many sports_events took place in '2019' with a ticket sales count greater than 50000?\n\n", "response": "SELECT COUNT(*) FROM sports_events WHERE year = 2019 AND tickets_sold > 50000;"}, {"query": "## sql context :\nCREATE TABLE companies (company_id INT, company_name VARCHAR(255), founding_year INT, founder_gender VARCHAR(10));CREATE TABLE funding_rounds (funding_round_id INT, company_id INT, funding_amount INT);\n\n## Query generation task:\nShow the total funding amount for companies with female founders\n\n", "response": "SELECT SUM(fr.funding_amount) FROM companies c INNER JOIN funding_rounds fr ON c.company_id = fr.company_id WHERE c.founder_gender = 'Female';"}, {"query": "## sql context :\nCREATE TABLE SafetyOrgs (name VARCHAR(20), country VARCHAR(10)); INSERT INTO SafetyOrgs (name, country) VALUES ('Euro NCAP', 'UK'); INSERT INTO SafetyOrgs (name, country) VALUES ('ADAC', 'Germany'); INSERT INTO SafetyOrgs (name, country) VALUES ('UTAC', 'France');\n\n## Query generation task:\nWhat are the vehicle safety testing organizations that operate in the UK and France?\n\n", "response": "SELECT name FROM SafetyOrgs WHERE country IN ('UK', 'France');"}, {"query": "## sql context :\nCREATE TABLE humanitarian_assistance (mission_id INT, country_id INT, year INT, FOREIGN KEY (country_id) REFERENCES country(id));\n\n## Query generation task:\nDelete all humanitarian assistance missions conducted by Kenya in 2018.\n\n", "response": "DELETE FROM humanitarian_assistance WHERE country_id = (SELECT id FROM country WHERE name = 'Kenya') AND year = 2018;"}, {"query": "## sql context :\nCREATE TABLE properties (id INT, city VARCHAR(20), listing_price INT, wheelchair_accessible BOOLEAN); INSERT INTO properties (id, city, listing_price, wheelchair_accessible) VALUES (1, 'New York', 900000, true); INSERT INTO properties (id, city, listing_price, wheelchair_accessible) VALUES (2, 'New York', 700000, false);\n\n## Query generation task:\nCount the number of wheelchair-accessible properties in New York with a listing price above $800,000.\n\n", "response": "SELECT COUNT(*) FROM properties WHERE city = 'New York' AND listing_price > 800000 AND wheelchair_accessible = true;"}, {"query": "## sql context :\nCREATE TABLE MealTypes (meal_id INT, meal_name VARCHAR(255), meal_type VARCHAR(255), serving_size INT, store_type VARCHAR(255)); INSERT INTO MealTypes (meal_id, meal_name, meal_type, serving_size, store_type) VALUES (1, 'Chicken Salad', 'Gluten-free', 250, 'Convenience Store'), (2, 'Beef Stew', 'Vegetarian', 300, 'Convenience Store'), (3, 'Pork Chops', 'Standard', 400, 'Convenience Store');\n\n## Query generation task:\nWhat is the minimum serving size of gluten-free meals available in convenience stores?\n\n", "response": "SELECT MIN(serving_size) FROM MealTypes WHERE meal_type = 'Gluten-free' AND store_type = 'Convenience Store';"}, {"query": "## sql context :\nCREATE TABLE SustainablePractices (PracticeID INT, PracticeName VARCHAR(50), Description VARCHAR(255), Department VARCHAR(50), Cost DECIMAL(10,2)); INSERT INTO SustainablePractices (PracticeID, PracticeName, Description, Department, Cost) VALUES (5, 'Green Roof', 'Installing a green roof to reduce energy consumption and improve air quality.', 'Structural Engineering', 12000.00), (6, 'Rainwater Harvesting', 'Collecting and storing rainwater for irrigation and non-potable uses.', 'Structural Engineering', 8000.00);\n\n## Query generation task:\nWhich sustainable practices were used in the 'Structural Engineering' department that cost over $10,000?\n\n", "response": "SELECT SustainablePractices.PracticeName FROM SustainablePractices WHERE SustainablePractices.Department = 'Structural Engineering' AND SustainablePractices.Cost > 10000.00;"}, {"query": "## sql context :\nCREATE TABLE PolicyImpact (ID INT, Policy TEXT, Impact TEXT, StartDate DATE, EndDate DATE);\n\n## Query generation task:\nAdd a new policy impact record to the \"PolicyImpact\" table\n\n", "response": "INSERT INTO PolicyImpact (ID, Policy, Impact, StartDate, EndDate) VALUES (3001, 'Body Cameras for Police Officers', 'Reduction in use-of-force incidents by 25%', '2021-01-01', '2022-12-31');"}, {"query": "## sql context :\nCREATE SCHEMA trans schemas.trans; CREATE TABLE red_line (route_id INT, fare FLOAT, date DATE); INSERT INTO red_line (route_id, fare, date) VALUES (102, 3.00, '2021-02-01'), (102, 3.00, '2021-02-02'), (102, 3.00, '2021-02-03'), (102, 3.00, '2021-02-04'), (102, 3.00, '2021-02-05'), (102, 3.00, '2021-02-06'), (102, 3.00, '2021-02-07');\n\n## Query generation task:\nWhat was the average fare collected on weekdays in February 2021 for the 'Red Line'?\n\n", "response": "SELECT AVG(fare) FROM red_line WHERE route_id = 102 AND EXTRACT(DAY FROM date) BETWEEN 2 AND 6 AND EXTRACT(MONTH FROM date) = 2;"}, {"query": "## sql context :\nCREATE TABLE movies (id INT, title VARCHAR(100), genre VARCHAR(50), release_year INT, production_budget INT); INSERT INTO movies (id, title, genre, release_year, production_budget) VALUES (1, 'MovieA', 'Action', 2005, 15000000); INSERT INTO movies (id, title, genre, release_year, production_budget) VALUES (2, 'MovieB', 'Action', 2002, 20000000); INSERT INTO movies (id, title, genre, release_year, production_budget) VALUES (3, 'MovieC', 'Drama', 2008, 12000000);\n\n## Query generation task:\nGet the average production budget for Action and Drama movies released between 2000 and 2010.\n\n", "response": "SELECT AVG(production_budget) FROM movies WHERE genre IN ('Action', 'Drama') AND release_year BETWEEN 2000 AND 2010;"}, {"query": "## sql context :\nCREATE TABLE Production (tank VARCHAR(20), capacity INT, location VARCHAR(20)); INSERT INTO Production (tank, capacity, location) VALUES ('Tank3', 100000, 'Eastern'), ('Tank4', 150000, 'Western');\n\n## Query generation task:\nWhat is the maximum production capacity of any tank in the Eastern region?\n\n", "response": "SELECT MAX(capacity) FROM Production WHERE location = 'Eastern';"}, {"query": "## sql context :\nCREATE TABLE fields_production (field_id INT, production_rate FLOAT); INSERT INTO fields_production (field_id, production_rate) VALUES (1, 1000.0), (2, 2000.0), (3, NULL);\n\n## Query generation task:\nList all the fields, including the ones without production, with their corresponding production rate\n\n", "response": "SELECT f.field_id, f.field_name, fp.production_rate FROM fields f LEFT JOIN fields_production fp ON f.field_id = fp.field_id;"}, {"query": "## sql context :\nCREATE TABLE menu_items (id INT, restaurant_id INT, name VARCHAR(50), available INT, available_time TIME); INSERT INTO menu_items (id, restaurant_id, name, available, available_time) VALUES (1, 3, 'Kale Salad', 10, '12:00:00'), (2, 3, 'Beet Burger', 15, '12:00:00'), (3, 3, 'Carrot Fries', 20, '12:00:00'), (4, 3, 'Quinoa Bowl', 30, '12:00:00');\n\n## Query generation task:\nIdentify the menu items that were 86'ed (ran out) before 5pm on a specific day for the 'Gourmet Greens' restaurant.\n\n", "response": "SELECT name FROM menu_items WHERE restaurant_id = 3 AND available_time < '17:00:00' GROUP BY name HAVING SUM(available) = 0;"}, {"query": "## sql context :\nCREATE TABLE production (country VARCHAR(255), REE VARCHAR(255), amount INT, year INT); INSERT INTO production (country, REE, amount, year) VALUES ('Australia', 'Neodymium', 100, 2020); INSERT INTO production (country, REE, amount, year) VALUES ('Australia', 'Praseodymium', 150, 2020);\n\n## Query generation task:\nWhich REEs were produced in Australia in 2020?\n\n", "response": "SELECT DISTINCT REE FROM production WHERE country = 'Australia' AND year = 2020;"}, {"query": "## sql context :\nCREATE TABLE CulturalCompetencyTraining (TrainingID INT PRIMARY KEY, MHW_ID INT, TrainingName TEXT, TrainingDate DATE); INSERT INTO CulturalCompetencyTraining (TrainingID, MHW_ID, TrainingName, TrainingDate) VALUES (1, 123, 'Cultural Competency 101', '2021-06-15');\n\n## Query generation task:\nShow cultural competency training records for community health workers\n\n", "response": "SELECT CulturalCompetencyTraining.TrainingID, CulturalCompetencyTraining.MHW_ID, CulturalCompetencyTraining.TrainingName, CulturalCompetencyTraining.TrainingDate, CommunityHealthWorker.Name FROM CulturalCompetencyTraining INNER JOIN CommunityHealthWorker ON CulturalCompetencyTraining.MHW_ID = CommunityHealthWorker.WorkerID;"}, {"query": "## sql context :\nCREATE TABLE contract_states (company_name TEXT, contract_id INT, state TEXT); INSERT INTO contract_states (company_name, contract_id, state) VALUES ('Lockheed Martin', 1, 'California'), ('Boeing', 2, 'Washington'), ('Raytheon', 3, 'Massachusetts'), ('Northrop Grumman', 4, 'California'), ('General Dynamics', 5, 'Florida');\n\n## Query generation task:\nCalculate the percentage of defense contracts awarded to companies in California\n\n", "response": "SELECT state, (COUNT(*)::FLOAT / (SELECT COUNT(*) FROM contract_states)) * 100 AS percentage FROM contract_states GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE vehicle_speed (id INT, type VARCHAR(20), city VARCHAR(20), speed INT); INSERT INTO vehicle_speed (id, type, city, speed) VALUES (1, 'electric', 'New York', 50), (2, 'electric', 'London', 60), (3, 'gasoline', 'New York', 40);\n\n## Query generation task:\nFind the average speed of electric vehicles in New York and London?\n\n", "response": "SELECT AVG(speed) FROM vehicle_speed WHERE type = 'electric' AND city IN ('New York', 'London');"}, {"query": "## sql context :\nCREATE TABLE Artists (id INT, name TEXT); CREATE TABLE Artworks (id INT, artist_id INT, name TEXT);\n\n## Query generation task:\nWhat are the top 10 artists with the highest number of artworks?\n\n", "response": "SELECT a.name, COUNT(*) as artworks_count FROM Artists a JOIN Artworks aw ON a.id = aw.artist_id GROUP BY a.name ORDER BY artworks_count DESC LIMIT 10;"}, {"query": "## sql context :\nCREATE TABLE industrial_customers (customer_id INT, location VARCHAR(255), water_consumption FLOAT); INSERT INTO industrial_customers (customer_id, location, water_consumption) VALUES (1, 'Dallas', 2000), (2, 'Houston', 2500), (3, 'Tulsa', 1800), (4, 'Oklahoma_City', 2200);\n\n## Query generation task:\nWhat is the total water consumption by industrial customers in Texas and Oklahoma?\n\n", "response": "SELECT SUM(water_consumption) FROM industrial_customers WHERE location IN ('Texas', 'Oklahoma');"}, {"query": "## sql context :\nCREATE TABLE Programs (Program VARCHAR(20), Budget INT, Type VARCHAR(20)); INSERT INTO Programs (Program, Budget, Type) VALUES ('Wheelchair Ramp', 30000, 'Mobility'); INSERT INTO Programs (Program, Budget, Type) VALUES ('Prosthetic Services', 40000, 'Mobility');\n\n## Query generation task:\nList the programs and their budgets for mobility accommodations.\n\n", "response": "SELECT Program, Budget FROM Programs WHERE Type = 'Mobility';"}, {"query": "## sql context :\nCREATE TABLE SpaceMissions (mission_name VARCHAR(30), astronaut_nationality VARCHAR(20)); INSERT INTO SpaceMissions (mission_name, astronaut_nationality) VALUES ('Mission1', 'US'); INSERT INTO SpaceMissions (mission_name, astronaut_nationality) VALUES ('Mission1', 'Canada');\n\n## Query generation task:\nList the space missions that have had astronauts from both the US and Canada.\n\n", "response": "SELECT mission_name FROM SpaceMissions WHERE astronaut_nationality IN ('US', 'Canada') GROUP BY mission_name HAVING COUNT(DISTINCT astronaut_nationality) = 2;"}, {"query": "## sql context :\nCREATE TABLE marine_protected_areas (name VARCHAR(255), location VARCHAR(255), avg_depth FLOAT); INSERT INTO marine_protected_areas (name, location, avg_depth) VALUES ('MPA 1', 'Pacific Ocean', 123.4), ('MPA 2', 'Atlantic Ocean', 567.8);\n\n## Query generation task:\nWhat is the average depth of all marine protected areas in the world?\n\n", "response": "SELECT AVG(avg_depth) FROM marine_protected_areas;"}, {"query": "## sql context :\nCREATE TABLE production (well_id INT, type VARCHAR(10), region VARCHAR(50), quantity INT); INSERT INTO production (well_id, type, region, quantity) VALUES (1, 'Oil', 'Northern', 1000), (2, 'Gas', 'Southern', 2000), (3, 'Oil', 'Southern', 3000);\n\n## Query generation task:\nCalculate the total production in the Southern region by oil and gas type\n\n", "response": "SELECT type, SUM(quantity) as total_production FROM production WHERE region = 'Southern' GROUP BY type;"}, {"query": "## sql context :\nCREATE TABLE electric_vehicles (country VARCHAR(50), num_vehicles INT); INSERT INTO electric_vehicles (country, num_vehicles) VALUES ('China', 1140000), ('Japan', 850000);\n\n## Query generation task:\nHow many electric vehicles are there in China and Japan?\n\n", "response": "SELECT SUM(num_vehicles) FROM electric_vehicles WHERE country IN ('China', 'Japan');"}, {"query": "## sql context :\nCREATE TABLE green_buildings_us (id INT, state VARCHAR(20), construction_year INT, type VARCHAR(20)); INSERT INTO green_buildings_us (id, state, construction_year, type) VALUES (1, 'California', 2014, 'residential'), (2, 'California', 2012, 'commercial'), (3, 'Oregon', 2016, 'residential'), (4, 'Washington', 2013, 'residential');\n\n## Query generation task:\nWhat is the maximum number of green buildings in each state in the US, constructed before 2015?\n\n", "response": "SELECT state, MAX(cnt) FROM (SELECT state, COUNT(*) AS cnt FROM green_buildings_us WHERE construction_year < 2015 GROUP BY state) AS subquery;"}, {"query": "## sql context :\nCREATE TABLE SmartCities (CityID INT, CityName VARCHAR(255), InitiativeName VARCHAR(255), StartDate DATE); INSERT INTO SmartCities (CityID, CityName, InitiativeName, StartDate) VALUES (1, 'City G', 'Smart Transportation', '2020-01-01');\n\n## Query generation task:\nList all smart city initiatives in 'City G' that were implemented after 2018.\n\n", "response": "SELECT CityName, InitiativeName, StartDate FROM SmartCities WHERE CityName = 'City G' AND StartDate > '2018-12-31';"}, {"query": "## sql context :\nCREATE TABLE Dishes (id INT, cuisine VARCHAR(255), cooking_time INT); INSERT INTO Dishes (id, cuisine, cooking_time) VALUES (1, 'Indian', 45), (2, 'Indian', 30), (3, 'Indian', 60), (4, 'Mexican', 20);\n\n## Query generation task:\nWhat is the maximum and minimum cooking time for dishes in the 'Indian' cuisine category?\n\n", "response": "SELECT cuisine, MIN(cooking_time) as min_cooking_time, MAX(cooking_time) as max_cooking_time FROM Dishes WHERE cuisine = 'Indian' GROUP BY cuisine;"}, {"query": "## sql context :\nCREATE TABLE african_region_table (id INT, operation_name VARCHAR(100), country VARCHAR(50), budget INT); INSERT INTO african_region_table (id, operation_name, country, budget) VALUES (1, 'Operation Artemis', 'France', 12500000);\n\n## Query generation task:\nWhat is the total budget for all peacekeeping operations in 'african_region_table'?\n\n", "response": "SELECT SUM(budget) FROM african_region_table;"}, {"query": "## sql context :\nCREATE TABLE if not exists new_schedules (schedule_id serial, city varchar(20), departure_time time); INSERT INTO new_schedules (city, departure_time) VALUES ('paris', '07:05:00'), ('paris', '07:20:00'), ('paris', '07:35:00'), ('paris', '07:50:00');\n\n## Query generation task:\nInsert new public transportation schedules for 'paris'\n\n", "response": "INSERT INTO schedules (city, departure_time) SELECT * FROM new_schedules WHERE city = 'paris';"}, {"query": "## sql context :\nCREATE TABLE co_ownership (co_id INT, property_id INT, num_owners INT);\n\n## Query generation task:\nFind the number of co-owned properties in the 'co_ownership' table, grouped by the number of co-owners.\n\n", "response": "SELECT num_owners, COUNT(*) as num_properties FROM co_ownership GROUP BY num_owners;"}, {"query": "## sql context :\nCREATE TABLE satellites (id INT, country VARCHAR(255), launch_date DATE);\n\n## Query generation task:\nHow many satellites have been launched by each country in the space domain?\n\n", "response": "SELECT country, COUNT(*) AS launched_satellites FROM satellites GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE quick_service.menu_items (menu_item_id INT, category TEXT, price DECIMAL); INSERT INTO quick_service.menu_items (menu_item_id, category, price) VALUES (1, 'Vegan Burger', 7.50), (2, 'Fruit Bowl', 4.50);\n\n## Query generation task:\nFind the total revenue for the 'quick_service' schema's vegan menu items.\n\n", "response": "SELECT SUM(price) FROM quick_service.menu_items WHERE category = 'Vegan Burger' OR category = 'Fruit Bowl';"}, {"query": "## sql context :\nCREATE TABLE donors (id INT, name TEXT, donation_date DATE, amount_donated DECIMAL(10,2));\n\n## Query generation task:\nDelete all records of donors who have not donated more than $50 in the last 6 months.\n\n", "response": "DELETE FROM donors WHERE id NOT IN (SELECT id FROM donors WHERE amount_donated > 50 AND donation_date > DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH));"}, {"query": "## sql context :\nCREATE TABLE cybersecurity_incidents (id INT, year INT, type VARCHAR(255), country VARCHAR(255), description TEXT); INSERT INTO cybersecurity_incidents (id, year, type, country, description) VALUES (1, 2018, 'Data Breach', 'US', 'Unauthorized access to sensitive personal information');\n\n## Query generation task:\nUpdate the description of a specific cybersecurity incident in the \"cybersecurity_incidents\" table\n\n", "response": "UPDATE cybersecurity_incidents SET description = 'Unauthorized access to highly sensitive personal information' WHERE id = 1;"}, {"query": "## sql context :\nCREATE TABLE ai_adoption (region VARCHAR(20), adoption_percentage DECIMAL(5,2), adoption_date DATE); INSERT INTO ai_adoption (region, adoption_percentage, adoption_date) VALUES ('North America', 45, '2022-01-01'), ('Europe', 40, '2022-01-01'), ('Asia', 50, '2022-01-01');\n\n## Query generation task:\nWhat is the percentage of AI adoption in the hospitality industry across different regions in 2022?\n\n", "response": "SELECT region, adoption_percentage FROM ai_adoption WHERE adoption_date = '2022-01-01';"}, {"query": "## sql context :\nCREATE TABLE waste_generation_city_v2 (sector VARCHAR(20), city VARCHAR(20), waste_quantity INT); INSERT INTO waste_generation_city_v2 (sector, city, waste_quantity) VALUES ('residential', 'New York City', 2500), ('commercial', 'New York City', 3000), ('residential', 'Los Angeles', 2200), ('commercial', 'Los Angeles', 2700), ('residential', 'Miami', 1500), ('commercial', 'Miami', 1900);\n\n## Query generation task:\nWhat is the total waste generated in the residential sector in New York City?\n\n", "response": "SELECT waste_quantity FROM waste_generation_city_v2 WHERE sector = 'residential' AND city = 'New York City';"}, {"query": "## sql context :\nCREATE TABLE labor_statistics (id INT, job_category VARCHAR(20), hourly_wage DECIMAL(5,2));\n\n## Query generation task:\nUpdate records in labor_statistics table and set hourly_wage = hourly_wage * 1.05 where job_category is 'Electricity'\n\n", "response": "UPDATE labor_statistics SET hourly_wage = hourly_wage * 1.05 WHERE job_category = 'Electricity';"}, {"query": "## sql context :\nCREATE TABLE marine_life_data (id INT, species TEXT, population INT, location TEXT); INSERT INTO marine_life_data (id, species, population, location) VALUES (1, 'Dolphin', 50, 'Mediterranean'); INSERT INTO marine_life_data (id, species, population, location) VALUES (2, 'Turtle', 25, 'Mediterranean');\n\n## Query generation task:\nDelete all records of marine life research data from the Mediterranean sea.\n\n", "response": "DELETE FROM marine_life_data WHERE location = 'Mediterranean';"}, {"query": "## sql context :\nCREATE TABLE Humanitarian_Assistance (Country VARCHAR(100), Quarter INT, Year INT);\n\n## Query generation task:\nFind countries that received humanitarian assistance in Q3 of 2022.\n\n", "response": "SELECT DISTINCT Country FROM Humanitarian_Assistance WHERE Quarter = 3 AND Year = 2022;"}, {"query": "## sql context :\nCREATE TABLE projects (project_id INT, name TEXT, capacity INT, implementation_date DATE); INSERT INTO projects (project_id, name, capacity, implementation_date) VALUES (1, 'Solar Farm', 5000, '2021-01-01'), (2, 'Wind Turbine', 3000, '2020-01-01'), (3, 'Geothermal Plant', 4000, '2021-01-01'), (4, 'Hydro Plant', 6000, '2019-01-01');\n\n## Query generation task:\nWhat is the total installed capacity of renewable energy projects implemented in the last year?\n\n", "response": "SELECT SUM(capacity) FROM projects WHERE implementation_date >= DATEADD(year, -1, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE CulturalEvents (id INT, name VARCHAR(50), city VARCHAR(50), attendance INT); INSERT INTO CulturalEvents (id, name, city, attendance) VALUES (1, 'Theater Play', 'New York', 500), (2, 'Art Exhibit', 'New York', 300), (3, 'Music Concert', 'Los Angeles', 700);\n\n## Query generation task:\nWhat is the average attendance for cultural events in a given city?\n\n", "response": "SELECT AVG(attendance) FROM CulturalEvents WHERE city = 'New York';"}, {"query": "## sql context :\nCREATE TABLE ArtistsDemographics (ArtistID INT, Age INT, Gender VARCHAR(10), Nationality VARCHAR(50)); INSERT INTO ArtistsDemographics (ArtistID, Age, Gender, Nationality) VALUES (1, 45, 'Male', 'American'), (2, 34, 'Female', 'Canadian'), (3, 50, 'Male', 'British'), (4, 35, 'Female', 'Mexican'), (5, 40, 'Non-binary', 'Australian');\n\n## Query generation task:\nRank artists in the 'ArtistsDemographics' table by age, in descending order, and return the top 2.\n\n", "response": "SELECT ArtistID, Age, Gender, Nationality FROM (SELECT ArtistID, Age, Gender, Nationality, ROW_NUMBER() OVER (ORDER BY Age DESC) AS Rank FROM ArtistsDemographics) AS Subquery WHERE Rank <= 2;"}, {"query": "## sql context :\nCREATE TABLE EquipmentSales (id INT PRIMARY KEY, country VARCHAR(50), equipment_type VARCHAR(50), sale_price DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the total value of military equipment sales in Canada?\n\n", "response": "SELECT SUM(sale_price) FROM EquipmentSales WHERE country = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE IntelligenceSatellites (Name VARCHAR(50), Country VARCHAR(50), Operational BOOLEAN); INSERT INTO IntelligenceSatellites (Name, Country, Operational) VALUES ('USA-123', 'USA', true), ('USA-456', 'USA', false), ('China-789', 'China', true), ('China-321', 'China', true), ('Russia-987', 'Russia', false);\n\n## Query generation task:\nHow many intelligence satellites are currently operational?\n\n", "response": "SELECT COUNT(*) FROM IntelligenceSatellites WHERE Operational = true;"}, {"query": "## sql context :\nCREATE TABLE volunteers (volunteer_id INT, volunteer_name TEXT, hours_contributed INT, org_id INT); CREATE TABLE organizations (org_id INT, org_name TEXT);\n\n## Query generation task:\nList all organizations and their corresponding volunteer information from the 'volunteers' table, along with the number of hours contributed by each volunteer.\n\n", "response": "SELECT organizations.org_name, volunteers.volunteer_name, SUM(volunteers.hours_contributed) as total_hours FROM volunteers INNER JOIN organizations ON volunteers.org_id = organizations.org_id GROUP BY organizations.org_name, volunteers.volunteer_name;"}, {"query": "## sql context :\nCREATE TABLE wells (well_id INT, region VARCHAR(20), production_rate FLOAT); INSERT INTO wells (well_id, region, production_rate) VALUES (1, 'Gulf of Mexico', 2500), (2, 'Gulf of Mexico', 3000), (3, 'Houston', 2000);\n\n## Query generation task:\nWhat is the maximum production rate (bbl/day) for wells in the 'Gulf of Mexico'?\n\n", "response": "SELECT MAX(production_rate) FROM wells WHERE region = 'Gulf of Mexico';"}, {"query": "## sql context :\nCREATE TABLE ocean_floor_mapping (id INT, location TEXT, depth FLOAT); CREATE TABLE marine_life_research_stations (id INT, station_name TEXT, location TEXT, depth FLOAT);\n\n## Query generation task:\nWhat is the maximum depth in the ocean floor mapping data for each location, and how many research stations are present in each location?\n\n", "response": "SELECT ocean_floor_mapping.location, MAX(ocean_floor_mapping.depth), COUNT(marine_life_research_stations.id) FROM ocean_floor_mapping INNER JOIN marine_life_research_stations ON ocean_floor_mapping.location = marine_life_research_stations.location GROUP BY ocean_floor_mapping.location;"}, {"query": "## sql context :\nCREATE TABLE tree_types (id INT, name VARCHAR(255)); INSERT INTO tree_types (id, name) VALUES (1, 'Deciduous'), (2, 'Evergreen'); CREATE TABLE trees (id INT, biomass INT, tree_type_id INT); INSERT INTO trees (id, biomass, tree_type_id) VALUES (1, 1000, 1), (2, 800, 2); CREATE TABLE wildlife_habitats (id INT, name VARCHAR(255)); INSERT INTO wildlife_habitats (id, name) VALUES (1, 'Forest'), (2, 'Grassland'); CREATE TABLE tree_habitat_associations (tree_id INT, habitat_id INT); INSERT INTO tree_habitat_associations (tree_id, habitat_id) VALUES (1, 1), (2, 1);\n\n## Query generation task:\nWhat is the total biomass of deciduous trees per wildlife habitat?\n\n", "response": "SELECT h.name habitat, SUM(t.biomass) total_biomass FROM trees t JOIN tree_habitat_associations tha ON t.id = tha.tree_id JOIN wildlife_habitats h ON tha.habitat_id = h.id JOIN tree_types tt ON t.tree_type_id = tt.id WHERE tt.name = 'Deciduous' GROUP BY h.name;"}, {"query": "## sql context :\nCREATE TABLE fair_trade_suppliers (id INT PRIMARY KEY, name VARCHAR(50), material VARCHAR(50), quantity INT); INSERT INTO fair_trade_suppliers (id, name, material, quantity) VALUES (1, 'Fair Trade Farms', 'Organic Cotton', 2000), (2, 'Green Earth', 'Hemp', 1500), (3, 'Sustainable Source', 'Bamboo', 1000), (4, 'Eco Harvest', 'Recycled Polyester', 2500), (5, 'Ethical Textiles', 'Tencel', 1200), (6, 'Fair Trade Farms', 'Wool', 1000), (7, 'Green Earth', 'Silk', 1500);\n\n## Query generation task:\nWhich sustainable materials are most frequently used by the top 2 fair trade certified suppliers?\n\n", "response": "SELECT material, SUM(quantity) as total_quantity FROM fair_trade_suppliers WHERE name IN ('Fair Trade Farms', 'Green Earth') GROUP BY material ORDER BY total_quantity DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE ProduceSupplier (SupplierID INT, SustainabilityRating INT, UnitsPerWeek INT); INSERT INTO ProduceSupplier VALUES (1, 85, 550), (2, 70, 400), (3, 90, 600);\n\n## Query generation task:\nWhat is the minimum sustainability rating for produce suppliers in the database who supply more than 600 units of fruits and vegetables per week?\n\n", "response": "SELECT MIN(SustainabilityRating) FROM ProduceSupplier WHERE UnitsPerWeek > 600;"}, {"query": "## sql context :\nCREATE TABLE ports(id INT, name VARCHAR(50), type VARCHAR(50), region VARCHAR(50)); CREATE TABLE cargo_handling(port_id INT, cargo_type VARCHAR(50), tonnage INT, handling_date DATE); INSERT INTO ports VALUES (1, 'Port of Los Angeles', 'Seaport', 'Pacific'); INSERT INTO cargo_handling VALUES (1, 'Bulk', 50000, '2022-03-15');\n\n## Query generation task:\nWhat is the maximum tonnage of cargo handled by any port in the last month?\n\n", "response": "SELECT MAX(cargo_handling.tonnage) FROM cargo_handling INNER JOIN ports ON cargo_handling.port_id = ports.id WHERE ports.region = 'Pacific' AND cargo_handling.handling_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}, {"query": "## sql context :\nCREATE TABLE Restaurants (restaurant_id INT, name VARCHAR(255), seating_capacity INT, revenue DECIMAL(10,2)); INSERT INTO Restaurants (restaurant_id, name, seating_capacity, revenue) VALUES (1, 'Restaurant A', 150, 5000.00), (2, 'Restaurant B', 50, 6000.00), (3, 'Restaurant C', 200, 4000.00);\n\n## Query generation task:\nWhat is the total revenue for restaurants with a seating capacity of over 100?\n\n", "response": "SELECT SUM(revenue) FROM Restaurants WHERE seating_capacity > 100;"}, {"query": "## sql context :\nCREATE TABLE vaccinations(id INT, patient_id INT, gender TEXT, date DATE);\n\n## Query generation task:\nWhat is the number of vaccinations administered by gender?\n\n", "response": "SELECT gender, COUNT(*) FROM vaccinations GROUP BY gender;"}, {"query": "## sql context :\nCREATE TABLE menu_items(menu_item VARCHAR(255), location VARCHAR(255)); INSERT INTO menu_items(menu_item, location) VALUES ('Burger', 'Location1'), ('Pizza', 'Location2'), ('Pasta', 'Location1'), ('Salad', 'Location2'), ('Burger', 'Location3');\n\n## Query generation task:\nWhich menu items are served at both Location1 and Location2, but not at Location3?\n\n", "response": "SELECT menu_item FROM menu_items WHERE location = 'Location1' INTERSECT SELECT menu_item FROM menu_items WHERE location = 'Location2' EXCEPT SELECT menu_item FROM menu_items WHERE location = 'Location3';"}, {"query": "## sql context :\nCREATE TABLE if not exists policyholders (policyholder_id INT PRIMARY KEY, name VARCHAR(255), age INT, gender VARCHAR(10), policy_type VARCHAR(50), premium DECIMAL(10,2));\n\n## Query generation task:\nAlter the 'policyholders' table to add a constraint that the 'age' column should be between 1 and 120\n\n", "response": "ALTER TABLE policyholders ADD CONSTRAINT age_range CHECK (age >= 1 AND age <= 120);"}, {"query": "## sql context :\nCREATE TABLE product (product_id INT, product_name TEXT, is_cruelty_free BOOLEAN); CREATE TABLE purchase (purchase_id INT, product_id INT, purchase_date DATE, region TEXT); INSERT INTO product VALUES (1, 'Lipstick', true), (2, 'Moisturizer', false); INSERT INTO purchase VALUES (1, 1, '2022-01-10', 'US'), (2, 2, '2022-01-15', 'CA');\n\n## Query generation task:\nWhich cruelty-free certified products were purchased in the last month from the US region?\n\n", "response": "SELECT p.product_name FROM purchase p JOIN product pr ON p.product_id = pr.product_id WHERE pr.is_cruelty_free = true AND p.purchase_date >= '2022-02-01' AND p.region = 'US';"}, {"query": "## sql context :\nCREATE TABLE startups(id INT, name TEXT, industry TEXT, founding_date DATE, founder_veteran BOOLEAN); INSERT INTO startups(id, name, industry, founding_date, founder_veteran) VALUES (1, 'EnergyVeteran', 'Energy', '2022-05-15', TRUE);\n\n## Query generation task:\nWhat is the maximum founding date for startups founded by veterans in the energy sector?\n\n", "response": "SELECT MAX(founding_date) FROM startups WHERE industry = 'Energy' AND founder_veteran = TRUE;"}, {"query": "## sql context :\nCREATE TABLE sales (id INT, item_id INT, sales_channel VARCHAR(255), quantity INT, price DECIMAL(10, 2)); INSERT INTO sales (id, item_id, sales_channel, quantity, price) VALUES (1, 101, 'online', 50, 15.00), (2, 102, 'retail', 75, 20.00), (3, 103, 'online', 80, 18.00), (4, 104, 'retail', 60, 22.00), (5, 105, 'online', 90, 16.00);\n\n## Query generation task:\nWhat is the average price of items sold through each sales channel?\n\n", "response": "SELECT sales_channel, AVG(price) FROM sales GROUP BY sales_channel;"}, {"query": "## sql context :\nCREATE TABLE research_grants (id INT, department VARCHAR(255), amount FLOAT); INSERT INTO research_grants (id, department, amount) VALUES (1, 'Computer Science', 100000), (2, 'Computer Science', 200000), (3, 'Statistics', 150000), (4, 'Philosophy', 250000), (5, 'English', 50000);\n\n## Query generation task:\nWhat is the average amount of research grants awarded per department in the 'research_grants' table, excluding departments with less than 3 grants?\n\n", "response": "SELECT AVG(grant_avg) FROM (SELECT department, AVG(amount) AS grant_avg FROM research_grants GROUP BY department HAVING COUNT(*) >= 3) AS subquery;"}, {"query": "## sql context :\nCREATE TABLE company (id INT, name TEXT, founding_date DATE, industry TEXT, headquarters TEXT, founder_count INT);\n\n## Query generation task:\nWhat is the total number of companies founded by solo founders in the biotech industry?\n\n", "response": "SELECT COUNT(*) FROM company WHERE founder_count = 1 AND industry = 'biotech';"}, {"query": "## sql context :\nCREATE TABLE healthcare_workers (id INT, name VARCHAR(50), age INT, region VARCHAR(50)); INSERT INTO healthcare_workers (id, name, age, region) VALUES (1, 'John Doe', 35, 'Northeast');\n\n## Query generation task:\nWhat is the average age of healthcare workers by region?\n\n", "response": "SELECT region, AVG(age) as avg_age FROM healthcare_workers GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE ingredient_sources (ingredient VARCHAR(100), source_location VARCHAR(100)); INSERT INTO ingredient_sources (ingredient, source_location) VALUES ('Retinol', 'Australia'), ('Hyaluronic Acid', 'USA'), ('Vitamin C', 'Brazil');\n\n## Query generation task:\nUpdate the ingredient source location for 'Retinol' from 'Australia' to 'Canada' in the 'ingredient_sources' table\n\n", "response": "UPDATE ingredient_sources SET source_location = 'Canada' WHERE ingredient = 'Retinol';"}, {"query": "## sql context :\nCREATE TABLE dispensaries (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(255), location VARCHAR(255)); CREATE TABLE wholesale_orders (id INT PRIMARY KEY, dispensary_id INT, strain_id INT, quantity INT, order_date DATE);\n\n## Query generation task:\nIdentify the dispensaries in the state of Colorado with the highest average wholesale order quantity for the last 6 months, and their corresponding average wholesale order quantity.\n\n", "response": "SELECT dispensaries.name, AVG(wholesale_orders.quantity) as avg_quantity FROM dispensaries INNER JOIN wholesale_orders ON dispensaries.id = wholesale_orders.dispensary_id WHERE dispensaries.state = 'Colorado' AND wholesale_orders.order_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND CURRENT_DATE GROUP BY dispensaries.id ORDER BY avg_quantity DESC LIMIT 10;"}, {"query": "## sql context :\nCREATE TABLE Project_Timelines (id INT, project_name VARCHAR(255), timeline INT, is_sustainable BOOLEAN); INSERT INTO Project_Timelines (id, project_name, timeline, is_sustainable) VALUES (1, 'Green Building', 180, TRUE), (2, 'Solar Panel Installation', 120, TRUE), (3, 'Traditional Construction', 240, FALSE);\n\n## Query generation task:\nList all sustainable building projects with a timeline greater than 120 days.\n\n", "response": "SELECT project_name FROM Project_Timelines WHERE is_sustainable = TRUE AND timeline > 120;"}, {"query": "## sql context :\nCREATE TABLE ocean_temperature (location VARCHAR(255), date DATE, temperature FLOAT); INSERT INTO ocean_temperature (location, date, temperature) VALUES ('Pacific Ocean', '2021-01-01', 20.5), ('Pacific Ocean', '2021-02-01', 21.2), ('Pacific Ocean', '2021-03-01', 22.1);\n\n## Query generation task:\nWhat is the average sea surface temperature in the 'Pacific Ocean' for each month?\n\n", "response": "SELECT EXTRACT(MONTH FROM date) AS month, AVG(temperature) AS avg_temperature FROM ocean_temperature WHERE location = 'Pacific Ocean' GROUP BY month;"}, {"query": "## sql context :\nCREATE TABLE donations (donation_id INT, donation_amount DECIMAL, donation_date DATE); CREATE TABLE campaigns (campaign_id INT, campaign_name TEXT, start_date DATE, end_date DATE);\n\n## Query generation task:\nList all donations and the corresponding campaign from 'donations' and 'campaigns' tables\n\n", "response": "SELECT donations.donation_id, donations.donation_amount, donations.donation_date, campaigns.campaign_name FROM donations INNER JOIN campaigns ON donations.donation_date BETWEEN campaigns.start_date AND campaigns.end_date;"}, {"query": "## sql context :\nCREATE TABLE Safety_Testing (year INT, make VARCHAR(50), model VARCHAR(50), rating FLOAT); INSERT INTO Safety_Testing (year, make, model, rating) VALUES (2022, 'Fiat', '500', 4.3); INSERT INTO Safety_Testing (year, make, model, rating) VALUES (2022, 'Alfa Romeo', 'Giulia', 4.5);\n\n## Query generation task:\nWhat is the minimum safety rating of Italian cars?\n\n", "response": "SELECT MIN(rating) FROM Safety_Testing WHERE make = 'Italian';"}, {"query": "## sql context :\nCREATE TABLE ClimateResearch (id INT PRIMARY KEY, researcher_id INT, location VARCHAR(100), start_date DATE, end_date DATE); INSERT INTO ClimateResearch (id, researcher_id, location, start_date, end_date) VALUES (1, 2, 'Antarctic', '2022-01-01', '2022-02-28');\n\n## Query generation task:\nWho are the researchers that have conducted climate research in the Antarctic region?\n\n", "response": "SELECT r.name FROM Researchers r JOIN ClimateResearch cr ON r.id = cr.researcher_id WHERE cr.location = 'Antarctic';"}, {"query": "## sql context :\nCREATE TABLE humanitarian_aid (country VARCHAR(50), year INT, aid_amount INT);\n\n## Query generation task:\nInsert a new record into the 'humanitarian_aid' table for 'Country Z' and 'Year 2017' with an aid_amount of 5000000\n\n", "response": "INSERT INTO humanitarian_aid (country, year, aid_amount) VALUES ('Country Z', 2017, 5000000);"}, {"query": "## sql context :\nCREATE TABLE patients (id INT, name TEXT, age INT, condition TEXT, therapy_sessions INT);\n\n## Query generation task:\nHow many patients have a primary diagnosis of depression and have attended at least one therapy session?\n\n", "response": "SELECT COUNT(*) FROM patients WHERE condition = 'depression' AND therapy_sessions > 0;"}, {"query": "## sql context :\nCREATE TABLE Vehicles(type TEXT, last_service DATE);\n\n## Query generation task:\nWhich buses have not been serviced in the past month?\n\n", "response": "SELECT type FROM Vehicles WHERE last_service < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}, {"query": "## sql context :\nCREATE TABLE workouts (id INT, member_id INT, workout_type VARCHAR(50), duration INT, date DATE); INSERT INTO workouts (id, member_id, workout_type, duration, date) VALUES (1, 1, 'Cycling', 60, '2022-03-10'), (2, 3, 'Yoga', 45, '2022-03-15'), (3, 2, 'Running', 30, '2022-02-20'), (4, 4, 'Hiking', 120, '2022-04-01');\n\n## Query generation task:\nFind the total number of workouts and unique members who have participated in outdoor workouts in the last year.\n\n", "response": "SELECT COUNT(*) AS total_workouts, COUNT(DISTINCT member_id) AS unique_members FROM workouts w WHERE w.workout_type LIKE '%Outdoor%' AND w.date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}, {"query": "## sql context :\nCREATE TABLE spacecraft (id INT, name VARCHAR(50), manufacturer VARCHAR(50), mass FLOAT); INSERT INTO spacecraft (id, name, manufacturer, mass) VALUES (3, 'Starship', 'SpaceX', 1250000.0); INSERT INTO spacecraft (id, name, manufacturer, mass) VALUES (4, 'Crew Dragon', 'SpaceX', 12000.0);\n\n## Query generation task:\nWhat is the total mass (in kg) of all spacecraft manufactured by SpaceX?\n\n", "response": "SELECT SUM(mass) FROM spacecraft WHERE manufacturer = 'SpaceX';"}, {"query": "## sql context :\nCREATE TABLE HeritageSites (SiteID INT PRIMARY KEY, Name VARCHAR(100), Category VARCHAR(50), Status VARCHAR(20), Region VARCHAR(50)); INSERT INTO HeritageSites (SiteID, Name, Category, Status, Region) VALUES (1, 'Victoria Falls', 'Natural', 'Vulnerable', 'Africa'), (2, 'Grand Canyon', 'Natural', 'Not Endangered', 'North America');\n\n## Query generation task:\nWhich natural heritage sites are located in Africa and are considered endangered?\n\n", "response": "SELECT Name FROM HeritageSites WHERE Category = 'Natural' AND Status = 'Vulnerable' AND Region = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE ocean_acidification (location TEXT, acidity FLOAT); INSERT INTO ocean_acidification (location, acidity) VALUES ('Caribbean Sea', 8.2), ('Pacific Ocean', 8.1), ('Atlantic Ocean', 8.0);\n\n## Query generation task:\nWhat is the average acidity level in the ocean?\n\n", "response": "SELECT AVG(acidity) FROM ocean_acidification;"}, {"query": "## sql context :\nCREATE TABLE electric_vehicles (id INT, country TEXT, year INT, number_thousands FLOAT); INSERT INTO electric_vehicles (id, country, year, number_thousands) VALUES (1, 'China', 2020, 1500.1), (2, 'China', 2021, 1800.2);\n\n## Query generation task:\nWhat is the total number of electric vehicles (in thousands) in China as of 2021?\n\n", "response": "SELECT SUM(number_thousands) FROM electric_vehicles WHERE country = 'China' AND year = 2021;"}, {"query": "## sql context :\nCREATE TABLE Cases (CaseID int, Outcome varchar(10), BillingID int); INSERT INTO Cases VALUES (1, 'Won', 1), (2, 'Won', 2), (3, 'Lost', 3), (4, 'Lost', 4); CREATE TABLE Billing (BillingID int, Amount decimal(10,2)); INSERT INTO Billing VALUES (1, 500.00), (2, 750.00), (3, 300.00), (4, 600.00);\n\n## Query generation task:\nWhat is the total billing amount by case outcome?\n\n", "response": "SELECT C.Outcome, SUM(B.Amount) as TotalBilling FROM Cases C JOIN Billing B ON C.BillingID = B.BillingID GROUP BY C.Outcome;"}, {"query": "## sql context :\nCREATE TABLE social_good_education (id INT, project_education VARCHAR(10)); INSERT INTO social_good_education (id, project_education) VALUES (1, 'yes'), (2, 'no'), (3, 'yes'), (4, 'yes'), (5, 'no'), (6, 'yes');\n\n## Query generation task:\nWhat is the percentage of technology for social good projects that address education?\n\n", "response": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM social_good_education) AS percentage FROM social_good_education WHERE project_education = 'yes';"}, {"query": "## sql context :\nCREATE TABLE financial_capability (id INT, individual_id INT, financially_capable BOOLEAN, country VARCHAR(50));\n\n## Query generation task:\nHow many financially capable individuals are there in Asia?\n\n", "response": "SELECT COUNT(*) FROM financial_capability WHERE financially_capable = TRUE AND country LIKE 'Asia%';"}, {"query": "## sql context :\nCREATE TABLE menu (category VARCHAR(255), sales FLOAT); INSERT INTO menu (category, sales) VALUES ('Appetizers', 5000.00), ('Entrees', 12000.00), ('Desserts', 6000.00);\n\n## Query generation task:\nWhat is the total sales revenue for each menu category?\n\n", "response": "SELECT category, SUM(sales) FROM menu GROUP BY category;"}, {"query": "## sql context :\nCREATE TABLE community_health_centers (center_id INT, center_name TEXT, state TEXT); INSERT INTO community_health_centers (center_id, center_name, state) VALUES (1, 'Hawaii Health & Human Services', 'HI'), (2, 'New York City Health & Hospitals', 'NY');\n\n## Query generation task:\nHow many community health centers are there in each state?\n\n", "response": "SELECT state, COUNT(*) FROM community_health_centers GROUP BY state;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists biosensor;CREATE TABLE if not exists biosensor.patents (id INT PRIMARY KEY, name VARCHAR(100), location VARCHAR(50), total_citations INT);INSERT INTO biosensor.patents (id, name, location, total_citations) VALUES (1, 'PatentX', 'UK', 150), (2, 'PatentY', 'USA', 200), (3, 'PatentZ', 'Canada', 120), (4, 'PatentW', 'UK', 170), (5, 'PatentV', 'France', 180), (6, 'PatentU', 'UK', 200);\n\n## Query generation task:\nWhat are the top 3 biosensor technology patents by total citations in the UK?\n\n", "response": "SELECT name, total_citations FROM biosensor.patents WHERE location = 'UK' GROUP BY name ORDER BY total_citations DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE crimes (category VARCHAR(255), count INT); INSERT INTO crimes (category, count) VALUES ('Theft', 50), ('Assault', 30), ('Vandalism', 20);\n\n## Query generation task:\nHow many crimes were committed in each type of category?\n\n", "response": "SELECT category, SUM(count) OVER (PARTITION BY category) FROM crimes;"}, {"query": "## sql context :\nCREATE TABLE recall_reports (report_id INT, report TEXT); INSERT INTO recall_reports (report_id, report) VALUES (1, 'The product has been recalled due to contamination.'), (2, 'No recalls have been issued for this product.'), (3, 'The company has issued a recall for this product.');\n\n## Query generation task:\nHow many times has 'recalled' appeared in the 'recall_reports' table?\n\n", "response": "SELECT COUNT(*) as recall_count FROM recall_reports WHERE report LIKE '%recalled%';"}, {"query": "## sql context :\nCREATE TABLE Digital_Divide (contributor VARCHAR(50), year INT, impact INT); INSERT INTO Digital_Divide (contributor, year, impact) VALUES ('Income Inequality', 2020, 8), ('Education Disparity', 2020, 7), ('Rural Internet Access', 2020, 6);\n\n## Query generation task:\nWho are the top 2 contributors to the digital divide in 2020?\n\n", "response": "SELECT contributor FROM Digital_Divide WHERE year = 2020 ORDER BY impact DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE military_tech (id INT, name VARCHAR(255), country VARCHAR(255), status VARCHAR(255));\n\n## Query generation task:\nInsert a new record for a military technology developed by Russia.\n\n", "response": "INSERT INTO military_tech (id, name, country, status) VALUES (4, 'T-14 Armata', 'Russia', 'active');"}, {"query": "## sql context :\nCREATE TABLE fish_stock (date DATE, ocean TEXT, fish_population INTEGER); INSERT INTO fish_stock (date, ocean, fish_population) VALUES ('2018-01-01', 'Atlantic', 500000); INSERT INTO fish_stock (date, ocean, fish_population) VALUES ('2018-02-01', 'Atlantic', 495000); CREATE TABLE acidification_data (date DATE, ocean TEXT, acidification_level FLOAT); INSERT INTO acidification_data (date, ocean, acidification_level) VALUES ('2018-01-01', 'Atlantic', 8.2); INSERT INTO acidification_data (date, ocean, acidification_level) VALUES ('2018-02-01', 'Atlantic', 8.15);\n\n## Query generation task:\nWhat is the correlation between fish stock and ocean acidification levels in the Atlantic Ocean, considering the fish_stock and acidification_data tables?\n\n", "response": "SELECT correlation(fish_stock.fish_population, acidification_data.acidification_level) FROM fish_stock INNER JOIN acidification_data ON fish_stock.date = acidification_data.date AND fish_stock.ocean = acidification_data.ocean WHERE fish_stock.ocean = 'Atlantic';"}, {"query": "## sql context :\nCREATE TABLE aircraft_manufacturer (id INTEGER, name TEXT); INSERT INTO aircraft_manufacturer (id, name) VALUES (1, 'Boeing'), (2, 'Airbus'), (3, 'Embraer'); CREATE TABLE aircraft (id INTEGER, manufacturer_id INTEGER, model TEXT); INSERT INTO aircraft (id, manufacturer_id, model) VALUES (1, 1, '747'), (2, 1, '777'), (3, 2, 'A320'), (4, 2, 'A350'), (5, 3, 'ERJ-145');\n\n## Query generation task:\nHow many aircraft does each manufacturer have in the database?\n\n", "response": "SELECT manufacturer_id, COUNT(*) FROM aircraft GROUP BY manufacturer_id;"}, {"query": "## sql context :\nCREATE TABLE Sales(id INT, garment_id INT, sale_price FLOAT, sale_date DATE, is_sustainable BOOLEAN); INSERT INTO Sales(id, garment_id, sale_price, sale_date, is_sustainable) VALUES (1, 1, 100, '2022-01-01', true); INSERT INTO Sales(id, garment_id, sale_price, sale_date, is_sustainable) VALUES (2, 2, 75, '2022-02-15', false);\n\n## Query generation task:\nFind the total revenue from sustainable garments in the last year.\n\n", "response": "SELECT SUM(sale_price) FROM Sales WHERE is_sustainable = true AND sale_date >= DATEADD(year, -1, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), Age INT, Gender VARCHAR(10), DonationAmount DECIMAL(10,2)); INSERT INTO Donors (DonorID, DonorName, Age, Gender, DonationAmount) VALUES (5, 'Surae', 45, 'Female', 600.00), (6, 'Jamal', 50, 'Male', 800.00), (7, 'Priya', 32, 'Female', 700.00), (8, 'Thanh', 48, 'Male', 900.00), (9, 'Amira', 38, 'Female', 550.00);\n\n## Query generation task:\nWhat is the total donation amount for each gender?\n\n", "response": "SELECT Gender, SUM(DonationAmount) FROM Donors GROUP BY Gender;"}, {"query": "## sql context :\nCREATE TABLE indian_ocean_fishingvessels (id INT, is_commercial BOOLEAN, is_compliant BOOLEAN);\n\n## Query generation task:\nWhat is the total number of fishing vessels in the Indian Ocean that are not compliant with maritime law?\n\n", "response": "SELECT SUM(CASE WHEN is_commercial = TRUE AND is_compliant = FALSE THEN 1 ELSE 0 END) FROM indian_ocean_fishingvessels;"}, {"query": "## sql context :\nCREATE TABLE production_sites(id INT, site_name TEXT, safety_score INT); INSERT INTO production_sites (id, site_name, safety_score) VALUES (1, 'Site A', 90), (2, 'Site B', 85);\n\n## Query generation task:\nUpdate the safety score for production site A to 95.\n\n", "response": "UPDATE production_sites SET safety_score = 95 WHERE site_name = 'Site A';"}, {"query": "## sql context :\nCREATE TABLE ArtifactAnalysis (ID INT, Archeologist VARCHAR(50), Artifact VARCHAR(50), AnalysisDate DATE, ArtifactAge INT);\n\n## Query generation task:\nWhat is the average artifact age in the 'ArtifactAnalysis' table?\n\n", "response": "SELECT AVG(ArtifactAge) FROM ArtifactAnalysis;"}, {"query": "## sql context :\nCREATE TABLE treatments (id INT, condition_id INT, medication BOOLEAN, region VARCHAR(50)); INSERT INTO treatments (id, condition_id, medication, region) VALUES (1, 1, TRUE, 'Asia'), (2, 1, FALSE, 'Europe'), (3, 2, TRUE, 'Asia'), (4, 2, TRUE, 'Europe');\n\n## Query generation task:\nFind the number of unique mental health conditions that have been treated with medication in each region.\n\n", "response": "SELECT region, COUNT(DISTINCT condition_id) FROM treatments WHERE medication = TRUE GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE AutoShows (Year INT, Country VARCHAR(255), Attendees INT); INSERT INTO AutoShows (Year, Country, Attendees) VALUES (2018, 'US', 50000), (2019, 'US', 60000), (2020, 'US', 70000);\n\n## Query generation task:\nList all auto show information for the United States, including the year and the number of attendees.\n\n", "response": "SELECT Year, Attendees FROM AutoShows WHERE Country = 'US';"}, {"query": "## sql context :\nCREATE TABLE projects_pakistan (project_id INT, province TEXT, project_type TEXT, year INT, cost FLOAT); INSERT INTO projects_pakistan (project_id, province, project_type, year, cost) VALUES (1, 'Punjab', 'Roads', 2018, 500000), (2, 'Punjab', 'Bridges', 2019, 700000), (3, 'Punjab', 'Irrigation', 2020, 600000);\n\n## Query generation task:\nWhat is the average cost of rural infrastructure projects in the province of Punjab, Pakistan, by project type and year?\n\n", "response": "SELECT project_type, year, AVG(cost) as avg_cost FROM projects_pakistan WHERE province = 'Punjab' GROUP BY project_type, year;"}, {"query": "## sql context :\nCREATE TABLE MusicEvents (id INT, year INT, event_type VARCHAR(20)); INSERT INTO MusicEvents (id, year, event_type) VALUES (1, 2017, 'Music'), (2, 2018, 'Music'), (3, 2019, 'Music'), (4, 2020, 'Music');\n\n## Query generation task:\nHow many music events were organized in total?\n\n", "response": "SELECT COUNT(*) FROM MusicEvents;"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), Country varchar(50)); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (1, 'John Doe', 'United States'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (2, 'Jane Smith', 'Bangladesh'); INSERT INTO Donors (DonorID, DonorName, Country) VALUES (3, 'Alice Johnson', 'India');CREATE TABLE CountryIncome (Country varchar(50), IncomeLevel varchar(20)); INSERT INTO CountryIncome (Country, IncomeLevel) VALUES ('United States', 'High-income'); INSERT INTO CountryIncome (Country, IncomeLevel) VALUES ('Bangladesh', 'Low-income'); INSERT INTO CountryIncome (Country, IncomeLevel) VALUES ('India', 'Lower-middle-income');\n\n## Query generation task:\nHow many donors are there from low-income countries?\n\n", "response": "SELECT COUNT(*) FROM Donors INNER JOIN CountryIncome ON Donors.Country = CountryIncome.Country WHERE CountryIncome.IncomeLevel = 'Low-income';"}, {"query": "## sql context :\nCREATE TABLE GameSales (GameID INT, GameType VARCHAR(10), Revenue INT, SaleDate DATE); INSERT INTO GameSales (GameID, GameType, Revenue, SaleDate) VALUES (1, 'Mobile', 1000, '2022-01-01'), (2, 'PC', 2000, '2022-01-02');\n\n## Query generation task:\nWhat is the total revenue generated by mobile games in the last year?\n\n", "response": "SELECT SUM(Revenue) FROM GameSales WHERE GameType = 'Mobile' AND SaleDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)"}, {"query": "## sql context :\nCREATE TABLE marine_conservation (initiative_name TEXT, ocean TEXT, leader TEXT); INSERT INTO marine_conservation (initiative_name, ocean, leader) VALUES ('Initiative C', 'Atlantic Ocean', 'Greenpeace'); INSERT INTO marine_conservation (initiative_name, ocean, leader) VALUES ('Initiative D', 'Atlantic Ocean', 'World Wildlife Fund');\n\n## Query generation task:\nWhat is the total number of marine conservation initiatives in the Atlantic Ocean, and how many of these initiatives were led by non-governmental organizations?\n\n", "response": "SELECT COUNT(*) AS total_initiatives, SUM(leader = 'Greenpeace' OR leader = 'World Wildlife Fund') AS ngo_led_initiatives FROM marine_conservation WHERE ocean = 'Atlantic Ocean';"}, {"query": "## sql context :\nCREATE TABLE Company (id INT, name VARCHAR(50), HQ VARCHAR(50), diversity_score FLOAT); CREATE TABLE Investment (id INT, company_id INT, investor VARCHAR(50), investment_amount FLOAT, investment_date DATE); INSERT INTO Company (id, name, HQ, diversity_score) VALUES (4, 'Delta Inc', 'USA', 65.8); INSERT INTO Investment (id, company_id, investor, investment_amount, investment_date) VALUES (4, 4, 'Kleiner Perkins', 10000000, '2019-08-20');\n\n## Query generation task:\nWhat is the total investment amount for each company in 2019?\n\n", "response": "SELECT Company.name, SUM(Investment.investment_amount) as total_investment FROM Company JOIN Investment ON Company.id = Investment.company_id WHERE YEAR(Investment.investment_date) = 2019 GROUP BY Company.name;"}, {"query": "## sql context :\nCREATE TABLE health_equity_metrics (metric_id INT, worker_id INT, name VARCHAR(50)); INSERT INTO health_equity_metrics (metric_id, worker_id, name) VALUES (1, 1, 'Accessibility'), (2, 1, 'Quality of Care'), (3, 2, 'Accessibility'), (4, 2, 'Quality of Care'), (5, 2, 'Language Proficiency');\n\n## Query generation task:\nFind the number of unique health equity metrics for each community health worker in TX.\n\n", "response": "SELECT worker_id, COUNT(DISTINCT metric_id) FROM health_equity_metrics WHERE state = 'TX' GROUP BY worker_id;"}, {"query": "## sql context :\nCREATE TABLE players (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE games (id INT, player_id INT, kills INT, deaths INT); INSERT INTO players VALUES (1, 'Hiroshi Tanaka', 'Japan'); INSERT INTO players VALUES (2, 'Sophia Lee', 'USA'); INSERT INTO games VALUES (1, 1, 12, 6); INSERT INTO games VALUES (2, 1, 18, 4); INSERT INTO games VALUES (3, 2, 7, 3); INSERT INTO games VALUES (4, 2, 10, 5);\n\n## Query generation task:\nWhat is the average K/D ratio for players from Japan?\n\n", "response": "SELECT player_id, AVG(kills/deaths) as K_D_ratio FROM players INNER JOIN games ON players.id = games.player_id WHERE country = 'Japan' GROUP BY player_id;"}, {"query": "## sql context :\nCREATE TABLE articles (id INT, title TEXT, category TEXT, publish_date DATE, location TEXT, word_count INT); INSERT INTO articles (id, title, category, publish_date, location, word_count) VALUES (1, 'Social Justice Issue 1', 'social_justice', '2021-01-01', 'USA', 800), (2, 'Social Justice Issue 2', 'social_justice', '2022-06-05', 'USA', 1200);\n\n## Query generation task:\nWhat is the average word count of articles related to social justice issues in the United States, published in 2021 and 2022, partitioned by quarter?\n\n", "response": "SELECT AVG(word_count) OVER (PARTITION BY EXTRACT(YEAR_QUARTER FROM publish_date)) AS avg_word_count FROM articles WHERE category = 'social_justice' AND location = 'USA' AND YEAR(publish_date) BETWEEN 2021 AND 2022;"}, {"query": "## sql context :\nCREATE TABLE RecyclingCenters (id INT, area VARCHAR(20), capacity INT); INSERT INTO RecyclingCenters (id, area, capacity) VALUES (1, 'Urban', 6000);\n\n## Query generation task:\nHow many recycling centers are in the 'Urban' area with a capacity greater than 5000 tons?\n\n", "response": "SELECT COUNT(*) FROM RecyclingCenters WHERE area = 'Urban' AND capacity > 5000;"}, {"query": "## sql context :\nCREATE TABLE asteroids (id INT, name VARCHAR(255), belt VARCHAR(255)); CREATE VIEW main_belt_asteroids AS SELECT * FROM asteroids WHERE belt = 'Main Belt';\n\n## Query generation task:\nHow many asteroids have been discovered in the Main Belt?\n\n", "response": "SELECT COUNT(*) FROM main_belt_asteroids;"}, {"query": "## sql context :\nCREATE TABLE Areas (id INT, type VARCHAR(50)); INSERT INTO Areas (id, type) VALUES (1, 'Urban'), (2, 'Rural'); CREATE TABLE Transportation_Trips (area_id INT, year INT, trips INT); INSERT INTO Transportation_Trips (area_id, year, trips) VALUES (1, 2020, 1000000), (2, 2020, 500000), (1, 2021, 1200000), (2, 2021, 600000);\n\n## Query generation task:\nHow many public transportation trips were taken in urban areas compared to rural areas in 2020?\n\n", "response": "SELECT A.type, SUM(TT.trips) as Total_Trips FROM Transportation_Trips TT JOIN Areas A ON TT.area_id = A.id WHERE TT.year = 2020 GROUP BY A.type;"}, {"query": "## sql context :\nCREATE TABLE labor_practices (id INT, supplier VARCHAR(255), practice VARCHAR(255), num_workers INT); INSERT INTO labor_practices (id, supplier, practice, num_workers) VALUES (1, 'Supplier A', 'Fair Trade', 50), (2, 'Supplier B', 'Living Wage', 75), (3, 'Supplier C', 'Fair Trade', 100), (4, 'Supplier D', 'Living Wage', 125), (5, 'Supplier E', 'Fair Trade', 150);\n\n## Query generation task:\nWhat is the number of workers involved in sustainable labor practices by supplier?\n\n", "response": "SELECT supplier, SUM(num_workers) FROM labor_practices GROUP BY supplier;"}, {"query": "## sql context :\nCREATE TABLE excavations (id INT, location VARCHAR(255));\n\n## Query generation task:\nCreate a table named 'artifacts' with columns: id, artifact_type, material, analysis_date.\n\n", "response": "CREATE TABLE artifacts (id INT, artifact_type VARCHAR(255), material VARCHAR(255), analysis_date DATE);"}, {"query": "## sql context :\nCREATE TABLE deep_sea_expeditions (country TEXT, year INT, ocean TEXT); INSERT INTO deep_sea_expeditions (country, year, ocean) VALUES ('USA', 2010, 'Atlantic'), ('Brazil', 2011, 'Atlantic'), ('South Africa', 2012, 'Atlantic'), ('India', 2013, 'Atlantic'), ('France', 2014, 'Atlantic'), ('UK', 2015, 'Atlantic'), ('Germany', 2016, 'Atlantic'), ('Norway', 2017, 'Atlantic'), ('Spain', 2018, 'Atlantic'), ('Italy', 2019, 'Atlantic'), ('USA', 2010, 'Indian'), ('China', 2011, 'Indian'), ('Japan', 2012, 'Indian'), ('Indonesia', 2013, 'Indian'), ('Australia', 2014, 'Indian'), ('Canada', 2015, 'Indian'), ('Russia', 2016, 'Indian'), ('Malaysia', 2017, 'Indian'), ('Thailand', 2018, 'Indian'), ('Philippines', 2019, 'Indian');\n\n## Query generation task:\nHow many deep-sea expeditions have been conducted by each country in the Atlantic and Indian oceans?\n\n", "response": "SELECT country, COUNT(*) FROM deep_sea_expeditions WHERE ocean IN ('Atlantic', 'Indian') GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE BridgeRainfall (    BridgeID INT,    Year INT,    Rainfall DECIMAL(10, 2),    MaintenanceCost DECIMAL(10, 2));\n\n## Query generation task:\nCalculate the average annual rainfall and total annual maintenance costs for bridges in the 'Northwest' region, for the past 5 years.\n\n", "response": "SELECT AVG(Rainfall) as AvgAnnualRainfall, SUM(MaintenanceCost) as TotalAnnualMaintenanceCost  FROM BridgeRainfall  WHERE Region = 'Northwest' AND Year >= YEAR(CURRENT_DATE) - 5 GROUP BY Year;"}, {"query": "## sql context :\nCREATE TABLE fish_species (species_id INT, species VARCHAR(50), conservation_status VARCHAR(50));\n\n## Query generation task:\nInsert a new record for a new species 'Kob' into the fish_species table\n\n", "response": "INSERT INTO fish_species (species_id, species, conservation_status) VALUES (10, 'Kob', 'Least Concern');"}, {"query": "## sql context :\nCREATE TABLE CommunityHealthWorkersCanada (WorkerID INT, Age INT, Gender VARCHAR(1), Province VARCHAR(2)); INSERT INTO CommunityHealthWorkersCanada (WorkerID, Age, Gender, Province) VALUES (1, 35, 'F', 'ON'), (2, 40, 'M', 'QC'), (3, 45, 'F', 'BC'), (4, 50, 'M', 'AB');\n\n## Query generation task:\nDelete the record of the community health worker with the lowest Age in 'AB' province.\n\n", "response": "DELETE FROM CommunityHealthWorkersCanada WHERE WorkerID = (SELECT WorkerID FROM (SELECT WorkerID, ROW_NUMBER() OVER (PARTITION BY Province ORDER BY Age ASC) rn FROM CommunityHealthWorkersCanada) t WHERE t.rn = 1 AND t.Province = 'AB');"}, {"query": "## sql context :\nCREATE TABLE Policy_Feedback (Feedback_ID INT PRIMARY KEY, Council_ID INT, Policy_Area VARCHAR(30), Feedback VARCHAR(100)); INSERT INTO Policy_Feedback (Feedback_ID, Council_ID, Policy_Area, Feedback) VALUES (1, 1, 'Housing', 'More affordable housing needed'), (2, 2, 'Transportation', 'Improve public transportation'), (3, 3, 'Education', 'Increase funding for schools');\n\n## Query generation task:\nWho provided feedback on the Housing policy?\n\n", "response": "SELECT Council_ID FROM Policy_Feedback WHERE Policy_Area = 'Housing';"}, {"query": "## sql context :\nCREATE TABLE community_education_programs (id INT, program_name VARCHAR(255), location VARCHAR(255)); CREATE TABLE animal_populations (id INT, program_id INT, animal_type VARCHAR(255), population INT); INSERT INTO community_education_programs (id, program_name, location) VALUES (1, 'African Wildlife Initiative', 'Africa'), (2, 'Lion Guardians', 'Kenya'), (3, 'Gorilla Doctors', 'Rwanda'); INSERT INTO animal_populations (id, program_id, animal_type, population) VALUES (1, 1, 'Lion', 300), (2, 1, 'Elephant', 500), (3, 2, 'Lion', 200), (4, 3, 'Gorilla', 100);\n\n## Query generation task:\nList all animal populations in African community education programs\n\n", "response": "SELECT community_education_programs.program_name, animal_populations.animal_type, animal_populations.population FROM community_education_programs INNER JOIN animal_populations ON community_education_programs.id = animal_populations.program_id WHERE community_education_programs.location = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE game_scores (user_id INT, game_name VARCHAR(10), score INT); INSERT INTO game_scores (user_id, game_name, score) VALUES (7, 'B', 200), (7, 'C', 150), (7, 'A', 300), (7, 'D', 250), (7, 'D', 350);\n\n## Query generation task:\nCalculate the median score of user 7 for all games played\n\n", "response": "SELECT AVG(score) FROM (SELECT score FROM game_scores WHERE user_id = 7 ORDER BY score LIMIT 2 OFFSET 2) AS median_scores;"}, {"query": "## sql context :\nCREATE TABLE machines (machine_id INT, type TEXT, schedule TEXT); CREATE TABLE factories (factory_id INT, practices TEXT);\n\n## Query generation task:\nList the machine IDs, types, and maintenance schedules for all machines in factories with unethical labor practices.\n\n", "response": "SELECT machines.machine_id, machines.type, machines.schedule FROM machines INNER JOIN factories ON machines.factory_id = factories.factory_id WHERE factories.practices = 'unethical';"}, {"query": "## sql context :\nCREATE TABLE sessions (id INT, user_id INT, duration INT, region VARCHAR(10)); INSERT INTO sessions (id, user_id, duration, region) VALUES (1, 1, 45, 'West'), (2, 2, 75, 'East'), (3, 3, 62, 'Midwest'), (4, 1, 70, 'West'), (5, 2, 80, 'East');\n\n## Query generation task:\nCount the number of sessions longer than 60 minutes for users in the Western US?\n\n", "response": "SELECT COUNT(*) FROM sessions WHERE duration > 60 AND region = 'West';"}, {"query": "## sql context :\nCREATE TABLE products (id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); INSERT INTO products (id, name, category, price) VALUES (1, 'Nourishing Face Cream', 'Organic', 25.99), (2, 'Revitalizing Serum', 'Natural', 34.99), (3, 'Soothing Eye Cream', 'Organic', 19.99);\n\n## Query generation task:\nDelete the product with ID 2\n\n", "response": "DELETE FROM products WHERE id = 2;"}, {"query": "## sql context :\nCREATE TABLE FairTradeCertification (factory VARCHAR(50), certification VARCHAR(50)); INSERT INTO FairTradeCertification VALUES ('Factory1', 'Fair Trade'), ('Factory2', 'Not Certified'), ('Factory3', 'Fair Trade'), ('Factory4', 'Not Certified');\n\n## Query generation task:\nHow many fair trade certified factories are there in Vietnam?\n\n", "response": "SELECT COUNT(*) FROM FairTradeCertification WHERE certification = 'Fair Trade';"}, {"query": "## sql context :\nCREATE TABLE incidents_by_month (incident_date DATE, incident_region TEXT, incident_count INTEGER); INSERT INTO incidents_by_month (incident_date, incident_region, incident_count) VALUES ('2021-01-01', 'Africa', 3), ('2021-02-01', 'Africa', 2), ('2021-03-01', 'Africa', 1);\n\n## Query generation task:\nWhat is the average number of AI safety incidents reported per month in Africa?\n\n", "response": "SELECT AVG(incident_count) FROM incidents_by_month WHERE incident_region = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE projects (project_id INT, project_name VARCHAR(50), budget DECIMAL(10, 2), area VARCHAR(50)); INSERT INTO projects (project_id, project_name, budget, area) VALUES (1, 'ProjectT', 9000000.00, 'Urban'), (2, 'ProjectU', 7000000.00, 'Urban'), (3, 'ProjectV', 5000000.00, 'Urban');\n\n## Query generation task:\nWhat is the total number of public transportation projects in the \"projects\" table for projects with a budget less than $10 million?\n\n", "response": "SELECT COUNT(*) FROM projects WHERE budget < 10000000.00;"}, {"query": "## sql context :\nCREATE TABLE DonationsByCause (DonationID int, DonorID int, Amount float, Cause varchar(255)); INSERT INTO DonationsByCause VALUES (1,1,500000,'Education'); INSERT INTO DonationsByCause VALUES (2,2,300000,'Health'); INSERT INTO DonationsByCause VALUES (3,1,700000,'Environment');\n\n## Query generation task:\nWhat are the top 3 causes by average donation amount?\n\n", "response": "SELECT Cause, AVG(Amount) as AverageDonation FROM DonationsByCause GROUP BY Cause ORDER BY AverageDonation DESC;"}, {"query": "## sql context :\nCREATE TABLE property (id INT, sqft INT, owner_id INT); CREATE TABLE person (id INT, name VARCHAR(50));\n\n## Query generation task:\nWhat is the total square footage of properties owned by each person?\n\n", "response": "SELECT person.name, SUM(property.sqft) FROM person INNER JOIN property ON person.id = property.owner_id GROUP BY person.name;"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Position VARCHAR(20), Age INT); INSERT INTO Employees (EmployeeID, Department, Position, Age) VALUES (1, 'Mining', 'Engineer', 35), (2, 'Mining', 'Engineer', 40), (3, 'HR', 'Engineer', 32); CREATE TABLE Department (Department VARCHAR(20), DepartmentHead VARCHAR(20)); INSERT INTO Department (Department, DepartmentHead) VALUES ('Mining', 'John'), ('HR', 'Jane'), ('IT', 'Peter');\n\n## Query generation task:\nWhat is the maximum number of employees in a department?\n\n", "response": "SELECT MAX(CountPerDept) FROM (SELECT Department, COUNT(*) AS CountPerDept FROM Employees GROUP BY Department) AS Subquery;"}, {"query": "## sql context :\nCREATE TABLE players (player_id INT, age INT, platform VARCHAR(20), region VARCHAR(50)); INSERT INTO players (player_id, age, platform, region) VALUES (1, 25, 'PC', 'North America'), (2, 30, 'PSVR', 'Europe'), (3, 22, 'Oculus', 'Asia'), (4, 28, 'PC', 'Asia'), (5, 34, 'PSVR', 'South America'), (6, 32, 'Oculus', 'Africa'); CREATE TABLE vr_tech (player_id INT, vr_platform VARCHAR(20)); INSERT INTO vr_tech (player_id, vr_platform) VALUES (1, 'Oculus'), (3, 'PSVR'), (5, 'PSVR'), (6, 'Oculus');\n\n## Query generation task:\nHow many players from Africa and South America have adopted VR technology?\n\n", "response": "SELECT 'Africa' AS continent, COUNT(DISTINCT p.player_id) AS num_players FROM players p JOIN vr_tech v ON p.player_id = v.player_id WHERE p.region = 'Africa' UNION ALL SELECT 'South America' AS continent, COUNT(DISTINCT p.player_id) AS num_players FROM players p JOIN vr_tech v ON p.player_id = v.player_id WHERE p.region = 'South America';"}, {"query": "## sql context :\nCREATE TABLE AutonomousDriving (Id INT, Vehicle VARCHAR(50), Test VARCHAR(50), Result VARCHAR(50)); INSERT INTO AutonomousDriving (Id, Vehicle, Test, Result) VALUES (1, 'Tesla Model S', 'High-Speed Autopilot', 'Passed'), (2, 'Waymo', 'High-Speed Autopilot', 'Passed');\n\n## Query generation task:\nShow autonomous driving test results for vehicles that passed the 'High-Speed Autopilot' test in the AutonomousDriving table.\n\n", "response": "SELECT Vehicle FROM AutonomousDriving WHERE Test = 'High-Speed Autopilot' AND Result = 'Passed';"}, {"query": "## sql context :\nCREATE TABLE students_enrollment (id INT, student_id INT, country VARCHAR(255), enrollment_date DATE); INSERT INTO students_enrollment (id, student_id, country, enrollment_date) VALUES (1, 1, 'USA', '2021-08-01'), (2, 2, 'Canada', '2021-07-15'), (3, 3, 'USA', '2020-10-01');\n\n## Query generation task:\nHow many students have enrolled in lifelong learning programs in each country?\n\n", "response": "SELECT country, COUNT(DISTINCT student_id) FROM students_enrollment WHERE enrollment_date >= DATEADD(year, -1, GETDATE()) GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE Artworks (ArtworkID INT, Title TEXT); INSERT INTO Artworks (ArtworkID, Title) VALUES (1, 'Guernica'), (2, 'The Starry Night'); CREATE TABLE Exhibitions (ExhibitionID INT, Title TEXT); INSERT INTO Exhibitions (ExhibitionID, Title) VALUES (1, 'Documenta'), (2, 'Venice Biennale');\n\n## Query generation task:\nWhat are the total number of works in the 'Artworks' and 'Exhibitions' tables?\n\n", "response": "SELECT COUNT(*) FROM Artworks UNION ALL SELECT COUNT(*) FROM Exhibitions;"}, {"query": "## sql context :\nCREATE TABLE battery_storage (id INT, country VARCHAR(255), year INT, energy_stored INT); INSERT INTO battery_storage (id, country, year, energy_stored) VALUES (1, 'Japan', 2020, 7000), (2, 'South Korea', 2020, 8000);\n\n## Query generation task:\nWhat is the total energy stored in batteries in Japan and South Korea as of 2020?\n\n", "response": "SELECT SUM(energy_stored) FROM battery_storage WHERE country IN ('Japan', 'South Korea') AND year = 2020;"}, {"query": "## sql context :\nCREATE TABLE ArtPieces (ArtPieceID INT, Name TEXT, YearAdded INT); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (1, 'Starry Night', 1889); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (2, 'The Persistence of Memory', 1931); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (3, 'Guernica', 1937); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (4, 'The Starry Night Over the Rhone', 1888); INSERT INTO ArtPieces (ArtPieceID, Name, YearAdded) VALUES (5, 'Girl with a Pearl Earring', 1665);\n\n## Query generation task:\nWhich art pieces were added to the museum collection after the year 2000?\n\n", "response": "SELECT Name FROM ArtPieces WHERE YearAdded > 2000;"}, {"query": "## sql context :\nCREATE TABLE whale_sharks (id INT, species TEXT, region TEXT, count INT);\n\n## Query generation task:\nCount the number of whale sharks (Rhincodon typus) in the Indo-Pacific region\n\n", "response": "SELECT SUM(count) FROM whale_sharks WHERE species = 'Rhincodon typus' AND region = 'Indo-Pacific';"}, {"query": "## sql context :\nCREATE TABLE YtterbiumProduction (country VARCHAR(20), year INT, quantity INT); INSERT INTO YtterbiumProduction (country, year, quantity) VALUES ('Russia', 2016, 60), ('Russia', 2017, 65);\n\n## Query generation task:\nWhat is the total production quantity of ytterbium in Russia for the year 2016?\n\n", "response": "SELECT SUM(quantity) FROM YtterbiumProduction WHERE country = 'Russia' AND year = 2016;"}, {"query": "## sql context :\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donation_amount DECIMAL(10,2), donation_date DATE); INSERT INTO donors (donor_id, donor_name, donation_amount, donation_date) VALUES (1, 'John Doe', 500, '2021-01-01');\n\n## Query generation task:\nWhat is the total amount donated by individual donors from 'USA' in 2021?\n\n", "response": "SELECT SUM(donation_amount) FROM donors WHERE donor_name NOT IN (SELECT donor_name FROM donors WHERE donation_date < '2021-01-01' OR donation_date > '2021-12-31') AND donation_date BETWEEN '2021-01-01' AND '2021-12-31' AND donor_country = 'USA';"}, {"query": "## sql context :\nCREATE TABLE Workout (user_id INT, workout_duration INT, country VARCHAR(50)); INSERT INTO Workout (user_id, workout_duration, country) VALUES (1, 30, 'Australia'), (2, 40, 'USA'), (3, 50, 'Australia'), (4, 60, 'Australia');\n\n## Query generation task:\nWhat is the total workout duration for users from Australia?\n\n", "response": "SELECT SUM(workout_duration) FROM Workout WHERE country = 'Australia';"}, {"query": "## sql context :\nCREATE TABLE cities (id INT PRIMARY KEY, name VARCHAR(50), country VARCHAR(50), population INT, continent VARCHAR(50)); INSERT INTO cities (id, name, country, population, continent) VALUES (1, 'Cairo', 'Egypt', 9100000, 'Africa'); INSERT INTO cities (id, name, country, population, continent) VALUES (2, 'Lagos', 'Nigeria', 21000000, 'Africa');\n\n## Query generation task:\nWhich cities have a population greater than 5,000,000 in 'Africa'?\n\n", "response": "SELECT cities.name, cities.population FROM cities WHERE cities.continent = 'Africa' AND cities.population > 5000000;"}, {"query": "## sql context :\nCREATE TABLE Hotels (hotel_id INT, name TEXT, city TEXT, rating FLOAT); INSERT INTO Hotels (hotel_id, name, city, rating) VALUES (1, 'Hotel Ritz', 'Paris', 4.8), (2, 'Hotel George V', 'Paris', 4.9);\n\n## Query generation task:\nWhat is the average rating of hotels in 'Paris' on 'Booking.com'?\n\n", "response": "SELECT AVG(rating) FROM Hotels WHERE city = 'Paris';"}, {"query": "## sql context :\nCREATE TABLE Restaurants (RestaurantID int, RestaurantName varchar(255), Cuisine varchar(255)); CREATE TABLE MenuItems (MenuID int, MenuName varchar(255), RestaurantID int, Sales int);\n\n## Query generation task:\nShow the revenue breakdown by cuisine type and the number of restaurants offering each cuisine type.\n\n", "response": "SELECT R.Cuisine, SUM(M.Sales) as TotalRevenue, COUNT(DISTINCT R.RestaurantID) as RestaurantCount FROM Restaurants R INNER JOIN MenuItems M ON R.RestaurantID = M.RestaurantID GROUP BY R.Cuisine;"}, {"query": "## sql context :\nCREATE TABLE Funding (funding_source VARCHAR(20), region VARCHAR(20), total_funding DECIMAL(10,2)); INSERT INTO Funding (funding_source, region, total_funding) VALUES ('California Arts Council', 'California', 120000, 'Arts Foundation', 'California', 75000);\n\n## Query generation task:\nWhat is the total funding amount for arts and culture programs in 'California' by 'California Arts Council' in 2022?\n\n", "response": "SELECT SUM(total_funding) FROM Funding WHERE funding_source = 'California Arts Council' AND region = 'California' AND YEAR(event_date) = 2022"}, {"query": "## sql context :\nCREATE TABLE EducationPrograms (ProgramID INT, ProgramName VARCHAR(50)); CREATE TABLE LawPrograms (ProgramID INT, ProgramName VARCHAR(50)); INSERT INTO EducationPrograms VALUES (1, 'Tutoring Program'), (2, 'Mentoring Program'), (3, 'Accessible Learning Resources'), (4, 'Diversity Workshops'); INSERT INTO LawPrograms VALUES (2, 'Mentoring Program'), (3, 'Accessible Learning Resources'), (5, 'Legal Clinics');\n\n## Query generation task:\nDisplay the distinct support programs offered in the Education faculty, excluding those also available in the Law faculty.\n\n", "response": "SELECT ProgramName FROM EducationPrograms WHERE ProgramName NOT IN (SELECT ProgramName FROM LawPrograms);"}, {"query": "## sql context :\nCREATE TABLE AutonomousVehicles (taxi_id INT, model VARCHAR(20), production_year INT, PRIMARY KEY (taxi_id));\n\n## Query generation task:\nInsert new records into the 'AutonomousVehicles' table for 3 self-driving taxis\n\n", "response": "INSERT INTO AutonomousVehicles (taxi_id, model, production_year) VALUES (100, 'RoboTaxi X1', 2020), (101, 'AutoCab Z5', 2021), (102, 'E-Hailer S7', 2022);"}, {"query": "## sql context :\nCREATE TABLE Languages (id INT, language TEXT, status TEXT); INSERT INTO Languages (id, language, status) VALUES (1, 'Cherokee Language', 'At Risk'); CREATE TABLE CulturalPractices (id INT, language_id INT, practice TEXT); INSERT INTO CulturalPractices (id, language_id, practice) VALUES (1, 1, 'Powwow');\n\n## Query generation task:\nWhat are the at-risk languages in North America and their associated cultural practices?\n\n", "response": "SELECT L.language, CP.practice FROM Languages L INNER JOIN CulturalPractices CP ON L.id = CP.language_id WHERE L.status = 'At Risk';"}, {"query": "## sql context :\nCREATE TABLE family_cases (case_id INT, billing_amount DECIMAL(10,2)); INSERT INTO family_cases (case_id, billing_amount) VALUES (1, 1000.00), (2, 2500.50), (3, 500.00);\n\n## Query generation task:\nWhat is the total billing amount for family cases?\n\n", "response": "SELECT SUM(billing_amount) FROM family_cases WHERE case_type = 'family';"}, {"query": "## sql context :\nCREATE TABLE readers (id INT, name VARCHAR(50), preferred_category VARCHAR(20)); CREATE TABLE readership (reader_id INT, article_id INT, gender VARCHAR(10), country VARCHAR(50)); INSERT INTO readers (id, name, preferred_category) VALUES (1, 'John Doe', 'Sports'); INSERT INTO readership (reader_id, article_id, gender, country) VALUES (1, 1, 'Male', 'UK');\n\n## Query generation task:\nFind the top 5 most preferred news categories among male readers in the UK.\n\n", "response": "SELECT r.preferred_category, COUNT(*) FROM readers r JOIN readership re ON r.id = re.reader_id WHERE re.gender = 'Male' AND re.country = 'UK' GROUP BY r.preferred_category ORDER BY COUNT(*) DESC LIMIT 5"}, {"query": "## sql context :\nCREATE TABLE green_vehicles (make VARCHAR(50), model VARCHAR(50), year INT, horsepower DECIMAL(5,1));\n\n## Query generation task:\nWhat is the total horsepower of electric vehicles in the 'green_vehicles' table?\n\n", "response": "SELECT SUM(horsepower) FROM green_vehicles WHERE make = 'Tesla' OR make = 'Rivian';"}, {"query": "## sql context :\nCREATE TABLE space_debris (id INT, name VARCHAR(50), diameter FLOAT); INSERT INTO space_debris VALUES (1, 'Debris-1', 5.3);\n\n## Query generation task:\nDelete space debris with a diameter smaller than 10 cm.\n\n", "response": "DELETE FROM space_debris WHERE diameter < 10;"}, {"query": "## sql context :\nCREATE TABLE mobile_customers_global (customer_id INT, country VARCHAR(50)); CREATE TABLE broadband_customers_global (customer_id INT, country VARCHAR(50)); INSERT INTO mobile_customers_global (customer_id, country) VALUES (16, 'US'), (17, 'CA'), (18, 'MX'), (19, 'CA'), (20, 'US'); INSERT INTO broadband_customers_global (customer_id, country) VALUES (21, 'US'), (22, 'CA'), (23, 'MX'), (24, 'CA'), (25, 'US');\n\n## Query generation task:\nWhat is the total number of mobile customers and broadband customers in each country?\n\n", "response": "SELECT country, COUNT(DISTINCT mobile_customers_global.customer_id) + COUNT(DISTINCT broadband_customers_global.customer_id) FROM mobile_customers_global FULL OUTER JOIN broadband_customers_global ON mobile_customers_global.country = broadband_customers_global.country GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE makeup_products (product_id INTEGER, product_subcategory VARCHAR(20)); INSERT INTO makeup_products (product_id, product_subcategory) VALUES (1, 'Lipstick'), (2, 'Eyeshadow'), (3, 'Mascara'), (4, 'Foundation'), (5, 'Blush');\n\n## Query generation task:\nList the number of products in each subcategory of makeup.\n\n", "response": "SELECT product_subcategory, COUNT(*) FROM makeup_products GROUP BY product_subcategory;"}, {"query": "## sql context :\nCREATE TABLE Artists (id INT, name TEXT); CREATE TABLE Artworks (id INT, artist_id INT, name TEXT, creation_date DATE);\n\n## Query generation task:\nIdentify the 5 earliest artworks (creation date) for each artist.\n\n", "response": "SELECT artist_id, name, creation_date FROM (SELECT artist_id, name, creation_date, ROW_NUMBER() OVER (PARTITION BY artist_id ORDER BY creation_date ASC) as rn FROM Artworks) t WHERE rn <= 5;"}, {"query": "## sql context :\nCREATE TABLE incidents (id INT, date DATE, category VARCHAR(20), source_ip VARCHAR(15), target_ip VARCHAR(15)); CREATE TABLE threat_actors (id INT, date DATE, type VARCHAR(20), location VARCHAR(30)); INSERT INTO incidents (id, date, category, source_ip, target_ip) VALUES (1, '2021-01-01', 'malware', '192.168.1.100', '8.8.8.8'); INSERT INTO threat_actors (id, date, type, location) VALUES (1, '2021-01-01', 'APT', 'Canada');\n\n## Query generation task:\nWhich threat actors have been active in North America in the last 30 days, and what is the number of incidents they have been involved in?\n\n", "response": "SELECT threat_actors.type, COUNT(*) as incident_count FROM threat_actors JOIN incidents ON threat_actors.date = incidents.date WHERE threat_actors.location = 'North America' AND incidents.date >= (CURRENT_DATE - INTERVAL '30' DAY) GROUP BY threat_actors.type;"}, {"query": "## sql context :\nCREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), FocusArea TEXT, StartDate DATE, EndDate DATE);\n\n## Query generation task:\nWhat is the total budget allocated for disaster relief programs in the last two years?\n\n", "response": "SELECT SUM(Budget) FROM Programs WHERE FocusArea = 'Disaster Relief' AND StartDate <= GETDATE() AND EndDate >= DATEADD(year, -2, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE state_usage (state VARCHAR(10), total_data_usage INT); INSERT INTO state_usage (state, total_data_usage) VALUES ('NV', 15000), ('UT', 12000), ('CO', 10000), ('WY', 8000), ('ID', 7000);\n\n## Query generation task:\nFind the total data usage for the bottom 2 states with the lowest data usage in the \"mountainous\" region.\n\n", "response": "SELECT state, SUM(total_data_usage) FROM (SELECT state, total_data_usage FROM state_usage WHERE state IN (SELECT state FROM state_usage WHERE total_data_usage = (SELECT MIN(total_data_usage) FROM state_usage) ORDER BY RAND() LIMIT 2) ORDER BY total_data_usage DESC) subquery GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE TicketSales (ConcertID INT, Title VARCHAR(255), Genre VARCHAR(255), Venue VARCHAR(255), Country VARCHAR(255), Year INT, TicketSales INT); INSERT INTO TicketSales VALUES (1, 'Woodstock', 'Rock', 'Bethel Woods Center for the Arts', 'USA', 1969, 500000); INSERT INTO TicketSales VALUES (2, 'Live Aid', 'Rock', 'Multiple', 'UK', 1985, 170000); INSERT INTO TicketSales VALUES (3, 'Reading Festival', 'Rock', 'Richfield Avenue', 'UK', 2019, 100000);\n\n## Query generation task:\nWhich rock concert had the highest ticket sales in Asia in 2019?\n\n", "response": "SELECT Title, MAX(TicketSales) FROM TicketSales WHERE Genre = 'Rock' AND Country = 'Asia' AND Year = 2019;"}, {"query": "## sql context :\nCREATE TABLE economic_diversification (project_id INT, country TEXT, project TEXT, investment INT, year INT); INSERT INTO economic_diversification (project_id, country, project, investment, year) VALUES (1, 'Nigeria', 'Renewable energy', 1000000, 2018), (2, 'Nigeria', 'Education', 1200000, 2019), (3, 'Nigeria', 'Healthcare', 1400000, 2020);\n\n## Query generation task:\nWhat was the total economic diversification investment in Nigeria in 2019?\n\n", "response": "SELECT SUM(investment) FROM economic_diversification WHERE country = 'Nigeria' AND year = 2019;"}, {"query": "## sql context :\nCREATE TABLE patients (patient_id INT, age INT, condition VARCHAR(50), country VARCHAR(50)); INSERT INTO patients (patient_id, age, condition, country) VALUES (1, 35, 'Depression', 'Canada'); CREATE TABLE recovery_program (program_id INT, patient_id INT, completion_date DATE); INSERT INTO recovery_program (program_id, patient_id, completion_date) VALUES (1, 1, '2020-03-01');\n\n## Query generation task:\nWhat is the average age of patients who have completed the recovery program for depression in Canada?\n\n", "response": "SELECT AVG(patients.age) FROM patients JOIN recovery_program ON patients.patient_id = recovery_program.patient_id WHERE patients.condition = 'Depression' AND patients.country = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE Hospitals (ID INT, Name TEXT, Location TEXT, Type TEXT); INSERT INTO Hospitals VALUES (1, 'Rural General Hospital', 'Smalltown', 'Hospital'); INSERT INTO Hospitals VALUES (2, 'Rural Health Clinic', 'Village', 'Clinic'); INSERT INTO Hospitals VALUES (3, 'Mobile Medical Unit', 'Rural Area', 'Clinic');\n\n## Query generation task:\nList the unique types of healthcare facilities in the rural healthcare system, excluding mobile clinics.\n\n", "response": "SELECT DISTINCT Type FROM Hospitals WHERE Type != 'Mobile Clinic';"}, {"query": "## sql context :\nCREATE TABLE attorneys (id INT, name VARCHAR(50), department VARCHAR(50), billing_rate DECIMAL(5,2)); INSERT INTO attorneys (id, name, department, billing_rate) VALUES (1, 'John Doe', 'corporate', 400.00), (2, 'Jane Smith', 'corporate', 450.00), (3, 'Bob Johnson', 'litigation', 300.00);\n\n## Query generation task:\nWhat is the maximum billing rate for attorneys in the 'corporate' department?\n\n", "response": "SELECT MAX(billing_rate) FROM attorneys WHERE department = 'corporate';"}, {"query": "## sql context :\nCREATE TABLE Dams (id INT, state VARCHAR(2), dam_type VARCHAR(10), reservoir_capacity FLOAT, water_flow_rate FLOAT); INSERT INTO Dams (id, state, dam_type, reservoir_capacity, water_flow_rate) VALUES (1, 'CA', 'Concrete', 1000000, 5000), (2, 'CA', 'Earth', 500000, 3000), (3, 'CA', 'Rockfill', 800000, 4000);\n\n## Query generation task:\nWhat is the maximum water flow rate for dams in California, categorized by dam type and reservoir capacity?\n\n", "response": "SELECT dam_type, reservoir_capacity, MAX(water_flow_rate) FROM Dams WHERE state = 'CA' GROUP BY dam_type, reservoir_capacity;"}, {"query": "## sql context :\nCREATE TABLE Satellite_Launches (Launch_ID INT, Country VARCHAR(50), Satellite_Name VARCHAR(50), Launch_Year INT, PRIMARY KEY (Launch_ID)); INSERT INTO Satellite_Launches (Launch_ID, Country, Satellite_Name, Launch_Year) VALUES (1, 'Japan', 'H-II Transfer Vehicle-7', 2015), (2, 'Japan', 'EGS', 2020), (3, 'Japan', 'KhalifaSat', 2018);\n\n## Query generation task:\nHow many satellites were launched by Japan?\n\n", "response": "SELECT COUNT(*) FROM Satellite_Launches WHERE Country = 'Japan';"}, {"query": "## sql context :\nCREATE TABLE claims (claim_id INT, policy_id INT, claim_amount DECIMAL(10,2), city VARCHAR(50), policy_type VARCHAR(50)); CREATE TABLE policies (policy_id INT, policy_holder_id INT, policy_type VARCHAR(50), issue_date DATE);\n\n## Query generation task:\nDetermine the top 3 cities with the highest average claim amount for health insurance policies.\n\n", "response": "SELECT c.city, AVG(claim_amount) FROM claims c JOIN policies p ON c.policy_id = p.policy_id WHERE policy_type = 'health' GROUP BY c.city ORDER BY AVG(claim_amount) DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE ocean_salinity (id INT, location TEXT, salinity REAL);\n\n## Query generation task:\nGet the minimum surface salinity in the Arctic Ocean\n\n", "response": "SELECT MIN(salinity) FROM ocean_salinity WHERE location = 'Arctic Ocean';"}, {"query": "## sql context :\nCREATE TABLE Vendors (VendorID VARCHAR(20), VendorName VARCHAR(20)); INSERT INTO Vendors (VendorID, VendorName) VALUES ('X', 'VendorX'), ('W', 'VendorW'); CREATE TABLE ReverseLogisticsTransactions (TransactionID INT, VendorID VARCHAR(20), TransactionStatus VARCHAR(20), TransactionDate DATE); INSERT INTO ReverseLogisticsTransactions (TransactionID, VendorID, TransactionStatus, TransactionDate) VALUES (4, 'W', 'Returned', '2022-01-04');\n\n## Query generation task:\nWhat is the earliest transaction date for 'VendorW' in the reverse logistics domain?\n\n", "response": "SELECT MIN(ReverseLogisticsTransactions.TransactionDate) AS EarliestTransactionDate FROM ReverseLogisticsTransactions JOIN Vendors ON ReverseLogisticsTransactions.VendorID = Vendors.VendorID WHERE Vendors.VendorName = 'VendorW';"}, {"query": "## sql context :\nCREATE TABLE Agricultural_Projects (Project_ID INT, Project_Name TEXT, Location TEXT, Funding_Received DECIMAL, Led_By TEXT, Year INT); INSERT INTO Agricultural_Projects (Project_ID, Project_Name, Location, Funding_Received, Led_By, Year) VALUES (1, 'Precision Farming Initiative', 'Kenya', 50000, 'Women', 2020);\n\n## Query generation task:\nWhat was the total amount of funding received by women-led agricultural projects in Kenya in 2020?\n\n", "response": "SELECT SUM(Funding_Received) FROM Agricultural_Projects WHERE Led_By = 'Women' AND Year = 2020 AND Location = 'Kenya';"}, {"query": "## sql context :\nCREATE TABLE posts (id INT, user_id INT, brand_mentioned VARCHAR(255), likes INT, comments INT, post_time DATETIME);\n\n## Query generation task:\nWhat is the total number of likes and comments on posts mentioning the brand \"Tesla\" in the automotive industry, in Germany, in the past month?\n\n", "response": "SELECT SUM(likes + comments) FROM posts WHERE brand_mentioned = 'Tesla' AND industry = 'automotive' AND country = 'Germany' AND post_time > DATE_SUB(NOW(), INTERVAL 1 MONTH);"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID INT, Gender VARCHAR(10), VeteranStatus VARCHAR(10), Salary INT); INSERT INTO Employees (EmployeeID, Gender, VeteranStatus, Salary) VALUES (1, 'Male', 'Veteran', 80000); INSERT INTO Employees (EmployeeID, Gender, VeteranStatus, Salary) VALUES (2, 'Female', 'Non-veteran', 75000);\n\n## Query generation task:\nWhat is the maximum salary for employees who identify as veterans?\n\n", "response": "SELECT MAX(Salary) FROM Employees WHERE VeteranStatus = 'Veteran';"}, {"query": "## sql context :\nCREATE TABLE sponsor_trials(sponsor_name TEXT, trial_id INT, trial_year INT); INSERT INTO sponsor_trials(sponsor_name, trial_id, trial_year) VALUES('CompanyZ', 1, 2017);\n\n## Query generation task:\nHow many clinical trials were conducted by 'CompanyZ' between 2017 and 2019?\n\n", "response": "SELECT COUNT(*) FROM sponsor_trials WHERE sponsor_name = 'CompanyZ' AND trial_year BETWEEN 2017 AND 2019;"}, {"query": "## sql context :\nCREATE TABLE Materials (Material VARCHAR(50), Quantity INT);INSERT INTO Materials (Material, Quantity) VALUES ('Organic Cotton', 5000), ('Recycled Polyester', 2500), ('Hemp', 1500), ('Tencel', 1800), ('Organic Silk', 1000);\n\n## Query generation task:\nShow the number of times each material is used in the entire dataset, excluding 'Organic Cotton' and 'Recycled Polyester', ordered from most used to least used?\n\n", "response": "SELECT Material, SUM(Quantity) as TotalQuantity FROM Materials WHERE Material NOT IN ('Organic Cotton', 'Recycled Polyester') GROUP BY Material ORDER BY TotalQuantity DESC;"}, {"query": "## sql context :\nCREATE TABLE vulnerabilities (id INT, sector VARCHAR(255), vulnerability VARCHAR(255)); INSERT INTO vulnerabilities (id, sector, vulnerability) VALUES (1, 'finance', 'SQL injection'), (2, 'finance', 'Cross-site scripting'), (3, 'finance', 'Buffer overflow'), (4, 'finance', 'Code injection'), (5, 'finance', 'Path traversal');\n\n## Query generation task:\nWhat are the top 5 most common types of vulnerabilities found in the finance sector?\n\n", "response": "SELECT vulnerability, COUNT(*) as count FROM vulnerabilities WHERE sector = 'finance' GROUP BY vulnerability ORDER BY count DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE materials (material_id INT, material_name VARCHAR(50), production_cost DECIMAL(10,2)); INSERT INTO materials (material_id, material_name, production_cost) VALUES (1, 'Organic Cotton', 2.50), (2, 'Recycled Polyester', 3.25), (3, 'Hemp', 1.80);\n\n## Query generation task:\nWhat is the average production cost of all sustainable material types?\n\n", "response": "SELECT AVG(production_cost) FROM materials WHERE material_name IN ('Organic Cotton', 'Recycled Polyester', 'Hemp');"}, {"query": "## sql context :\nCREATE TABLE eu_ets (id INT, date DATE, price FLOAT); INSERT INTO eu_ets (id, date, price) VALUES (1, '2020-01-01', 25.3), (2, '2020-01-02', 26.1);\n\n## Query generation task:\nWhat is the average carbon price (\u20ac/ton) in the EU ETS for the year 2020?\n\n", "response": "SELECT AVG(price) FROM eu_ets WHERE date BETWEEN '2020-01-01' AND '2020-12-31';"}, {"query": "## sql context :\nCREATE TABLE joint_operations (country1 VARCHAR(255), country2 VARCHAR(255), operation_name VARCHAR(255), operation_date DATE, primary_objective VARCHAR(255), personnel_count INT);\n\n## Query generation task:\nExamine the intelligence operations that have been conducted jointly by two or more countries, their primary objectives, and the number of personnel involved in each operation.\n\n", "response": "SELECT country1, country2, primary_objective, COUNT(*) as num_personnel FROM joint_operations GROUP BY country1, country2, primary_objective;"}, {"query": "## sql context :\nCREATE TABLE Organic_Cosmetics (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), revenue DECIMAL(10,2)); INSERT INTO Organic_Cosmetics (product_id, product_name, category, price, revenue) VALUES (1, 'Lipstick 1', 'Lipsticks', 15.99, 0), (2, 'Lipstick 2', 'Lipsticks', 15.99, 0), (3, 'Lipstick 3', 'Lipsticks', 18.99, 0);\n\n## Query generation task:\nWhat is the total revenue of lipsticks from the organic cosmetics line?\n\n", "response": "SELECT SUM(revenue) FROM Organic_Cosmetics WHERE category = 'Lipsticks';"}, {"query": "## sql context :\nCREATE TABLE pollution_control_initiatives (initiative_id INT, name TEXT, start_date DATE, completion_date DATE); INSERT INTO pollution_control_initiatives (initiative_id, name, start_date, completion_date) VALUES (1, 'Project A', '2018-01-01', '2019-01-01'), (2, 'Project B', '2019-07-01', '2020-07-01'), (3, 'Project C', '2020-03-15', '2021-03-15');\n\n## Query generation task:\nList all pollution control initiatives and their completion dates.\n\n", "response": "SELECT name, completion_date FROM pollution_control_initiatives;"}, {"query": "## sql context :\nCREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10,2), country VARCHAR(50)); INSERT INTO transactions (id, customer_id, amount, country) VALUES (1, 101, 500.00, 'India'), (2, 102, 350.00, 'Brazil'), (3, 103, 700.00, 'India'), (4, 104, 600.00, 'Brazil');\n\n## Query generation task:\nWhat is the total amount of transactions made by customers from India and Brazil?\n\n", "response": "SELECT SUM(amount) FROM transactions WHERE country IN ('India', 'Brazil');"}, {"query": "## sql context :\nCREATE TABLE wearable_metrics (member_id INT, heart_rate INT, workout_date DATE, workout_duration TIME); INSERT INTO wearable_metrics (member_id, heart_rate, workout_date, workout_duration) VALUES (1, 120, '2022-01-01', '01:00:00'), (1, 130, '2022-01-02', '01:30:00'), (2, 140, '2022-01-01', '02:00:00'), (2, 150, '2022-01-03', '01:15:00'), (3, 160, '2022-01-02', '01:00:00'), (3, 170, '2022-01-03', '01:30:00'), (3, 180, '2022-01-04', '02:00:00'), (4, 190, '2022-01-04', '01:15:00');\n\n## Query generation task:\nWhat is the average heart rate for each member during a workout?\n\n", "response": "SELECT member_id, AVG(heart_rate) FROM wearable_metrics GROUP BY member_id;"}, {"query": "## sql context :\nCREATE TABLE Routes (id INT, region VARCHAR(10), wheelchair_accessible BOOLEAN); INSERT INTO Routes (id, region, wheelchair_accessible) VALUES (1, 'north', true), (2, 'north', false), (3, 'south', true);\n\n## Query generation task:\nList all routes with wheelchair accessibility in the 'north' region.\n\n", "response": "SELECT Routes.id, Routes.region FROM Routes WHERE Routes.region = 'north' AND Routes.wheelchair_accessible = true;"}, {"query": "## sql context :\nCREATE TABLE renewable_energy_projects (project_id INT, project_name VARCHAR(50), city VARCHAR(50), installed_capacity FLOAT); INSERT INTO renewable_energy_projects (project_id, project_name, city, installed_capacity) VALUES (1, 'Solar Farm 1', 'CityA', 10000.0), (2, 'Wind Farm 1', 'CityB', 15000.0), (3, 'Hydro Plant 1', 'CityA', 20000.0);\n\n## Query generation task:\nWhat is the total installed capacity of renewable energy projects by city?\n\n", "response": "SELECT city, SUM(installed_capacity) FROM renewable_energy_projects GROUP BY city;"}, {"query": "## sql context :\nCREATE TABLE Paintings (PaintingID INT, Title VARCHAR(50), ArtistID INT, YearCreated INT); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (1, 'Starry Night', 1, 1889); INSERT INTO Paintings (PaintingID, Title, ArtistID, YearCreated) VALUES (2, 'Guernica', 2, 1937);\n\n## Query generation task:\nDelete the painting 'Guernica' from the 'Paintings' table.\n\n", "response": "DELETE FROM Paintings WHERE Title = 'Guernica';"}, {"query": "## sql context :\nCREATE TABLE artists (id INT, name TEXT, nationality TEXT); INSERT INTO artists (id, name, nationality) VALUES (1, 'Picasso', 'Spanish'), (2, 'Braque', 'French'), (3, 'Gris', 'Spanish'); CREATE TABLE artwork_styles (id INT, artwork_id INT, style TEXT); INSERT INTO artwork_styles (id, artwork_id, style) VALUES (1, 1, 'Cubism'), (2, 2, 'Cubism'), (3, 3, 'Futurism');\n\n## Query generation task:\nWhat are the names and nationalities of artists who have worked with the 'Cubism' style?\n\n", "response": "SELECT artists.name, artists.nationality FROM artists INNER JOIN artwork_styles ON artists.id = (SELECT artist_id FROM artworks WHERE artwork_styles.id = artwork_id AND style = 'Cubism' LIMIT 1) WHERE artwork_styles.style = 'Cubism';"}, {"query": "## sql context :\nCREATE TABLE Brands (id INT, brand VARCHAR(255), country VARCHAR(255)); INSERT INTO Brands (id, brand, country) VALUES (1, 'BrandA', 'USA'), (2, 'BrandB', 'Canada'), (3, 'BrandC', 'Mexico'); CREATE TABLE CircularSupplyChain (id INT, brand_id INT, partner_id INT, partner VARCHAR(255), country VARCHAR(255)); INSERT INTO CircularSupplyChain (id, brand_id, partner_id, partner, country) VALUES (1, 1, 1, 'Partner1', 'USA'), (2, 1, 2, 'Partner2', 'USA'), (3, 2, 3, 'Partner3', 'Canada'), (4, 2, 4, 'Partner4', 'Canada'), (5, 3, 5, 'Partner5', 'Mexico'), (6, 3, 6, 'Partner6', 'Mexico');\n\n## Query generation task:\nHow many circular supply chain partners does each brand work with, by country?\n\n", "response": "SELECT c.country, b.brand, COUNT(DISTINCT c.partner_id) AS partner_count FROM CircularSupplyChain c JOIN Brands b ON c.brand_id = b.id GROUP BY c.country, b.brand;"}, {"query": "## sql context :\nCREATE TABLE bike_stations (id INT, location VARCHAR(20), num_bikes INT, urban VARCHAR(5)); INSERT INTO bike_stations (id, location, num_bikes, urban) VALUES (1, 'Station A', 20, 'Yes'), (2, 'Station B', 30, 'Yes'), (3, 'Station C', 15, 'No'), (4, 'Station D', 25, 'No');\n\n## Query generation task:\nWhat is the average number of bicycles per station for stations located in urban areas in the bike_stations table?\n\n", "response": "SELECT AVG(num_bikes) FROM bike_stations WHERE urban = 'Yes';"}, {"query": "## sql context :\nCREATE TABLE staff_members (staff_id INT, email VARCHAR(255));\n\n## Query generation task:\nUpdate the email of the staff_member with ID 5 to 'new.email@example.com'\n\n", "response": "UPDATE staff_members SET email = 'new.email@example.com' WHERE staff_id = 5;"}, {"query": "## sql context :\nCREATE TABLE MentalHealthParity (ComplaintID INT, State VARCHAR(25), FilingDate DATE); INSERT INTO MentalHealthParity (ComplaintID, State, FilingDate) VALUES (1, 'California', '2020-01-01'), (2, 'New York', '2020-02-01'), (3, 'Texas', '2020-03-01'), (4, 'Florida', '2020-04-01');\n\n## Query generation task:\nHow many mental health parity complaints were filed by state in 2020?\n\n", "response": "SELECT State, COUNT(*) as ComplaintCount FROM MentalHealthParity WHERE YEAR(FilingDate) = 2020 GROUP BY State;"}, {"query": "## sql context :\nCREATE TABLE transaction (id INT, customer_id INT, transaction_date DATE, amount DECIMAL(10, 2)); INSERT INTO transaction (id, customer_id, transaction_date, amount) VALUES (1, 1, '2022-01-01', 100.00), (2, 3, '2022-01-02', 200.00);\n\n## Query generation task:\nList all transactions made by customers in New York on January 1, 2022.\n\n", "response": "SELECT * FROM transaction WHERE transaction_date = '2022-01-01' AND customer_id IN (SELECT id FROM customer WHERE address LIKE 'New York%');"}, {"query": "## sql context :\nCREATE TABLE region (region_id INT, region_name TEXT); INSERT INTO region (region_id, region_name) VALUES (1, 'North Atlantic'), (2, 'South Atlantic'), (3, 'Indian Ocean'); CREATE TABLE measurement (measurement_id INT, region_id INT, dissolved_oxygen FLOAT); INSERT INTO measurement (measurement_id, region_id, dissolved_oxygen) VALUES (1, 1, 6.5), (2, 1, 6.8), (3, 2, 7.1), (4, 2, 6.9), (5, 3, 7.3), (6, 3, 7.2);\n\n## Query generation task:\nWhat is the average dissolved oxygen level for each region?\n\n", "response": "SELECT region_id, AVG(dissolved_oxygen) FROM measurement GROUP BY region_id;"}, {"query": "## sql context :\nCREATE TABLE Publications (PublicationID INT, Title VARCHAR(100), Author VARCHAR(50), Year INT, Journal VARCHAR(50), FacultyID INT); CREATE TABLE Faculty (FacultyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Department VARCHAR(50), Rank VARCHAR(10), Gender VARCHAR(10));\n\n## Query generation task:\nHow many faculty members in the English department have published in the Journal of English Language and Literature in the current year?\n\n", "response": "SELECT COUNT(p.FacultyID) as 'Number of Faculty Members' FROM Publications p JOIN Faculty f ON p.FacultyID = f.FacultyID WHERE f.Department = 'English' AND p.Journal = 'Journal of English Language and Literature' AND p.Year = YEAR(GETDATE());"}, {"query": "## sql context :\nCREATE TABLE buses (id INT, route_id INT, clean_date DATE); INSERT INTO buses (id, route_id, clean_date) VALUES (1, 101, '2022-01-01'), (2, 102, '2022-01-02'), (3, 103, '2022-01-03');\n\n## Query generation task:\nWhat is the minimum time between bus cleanings for each route?\n\n", "response": "SELECT route_id, MIN(DATEDIFF('day', LAG(clean_date) OVER (PARTITION BY route_id ORDER BY clean_date), clean_date)) FROM buses GROUP BY route_id;"}, {"query": "## sql context :\nCREATE TABLE labor_unions (id INT, union_name VARCHAR(50), members INT); CREATE TABLE safety_records (id INT, union_id INT, safety_score INT);\n\n## Query generation task:\nCalculate the average safety score and number of members for unions with names starting with 'C' in the 'labor_unions' and 'safety_records' tables\n\n", "response": "SELECT AVG(s.safety_score) AS avg_safety_score, AVG(l.members) AS avg_members FROM labor_unions l JOIN safety_records s ON l.id = s.union_id WHERE l.union_name LIKE 'C%';"}, {"query": "## sql context :\nCREATE TABLE sales (sale_id INT, product_id INT, sale_date DATE, price DECIMAL(5,2), is_fair_trade BOOLEAN);INSERT INTO sales (sale_id, product_id, sale_date, price, is_fair_trade) VALUES (1, 1, '2019-01-01', 20.00, true), (2, 2, '2020-02-01', 30.00, false), (3, 3, '2021-03-01', 40.00, true);\n\n## Query generation task:\nWhat is the total revenue from fair trade certified products in Africa since 2019?\n\n", "response": "SELECT SUM(price) as total_revenue FROM sales WHERE is_fair_trade = true AND YEAR(sale_date) >= 2019 AND location = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE vessel_performance (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), speed FLOAT, location VARCHAR(50), timestamp DATETIME); INSERT INTO vessel_performance (id, name, type, speed, location, timestamp) VALUES (1, 'VesselG', 'Cargo', 18.2, 'Mediterranean Sea', '2021-09-01 10:00:00'), (2, 'VesselH', 'Tanker', 20.1, 'Mediterranean Sea', '2021-09-01 11:00:00');\n\n## Query generation task:\nWhat is the maximum speed of all vessels in the Mediterranean Sea during September 2021?\n\n", "response": "SELECT MAX(speed) FROM vessel_performance WHERE location = 'Mediterranean Sea' AND timestamp BETWEEN '2021-09-01' AND '2021-09-30';"}, {"query": "## sql context :\nCREATE TABLE Artworks (artwork_id INT, title VARCHAR(50), year_made INT, artist_id INT, price FLOAT); INSERT INTO Artworks (artwork_id, title, year_made, artist_id, price) VALUES (1, 'Still Life with Flowers', 1612, 1, 1000.0); ; CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), start_date DATE, end_date DATE, artwork_id INT); INSERT INTO Exhibitions (exhibition_id, exhibition_name, start_date, end_date, artwork_id) VALUES (1, 'Flower Exhibition', '2000-01-01', '2000-12-31', 1); ;\n\n## Query generation task:\nWhat is the average price of artworks exhibited in the 20th century?\n\n", "response": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Exhibitions ON Artworks.artwork_id = Exhibitions.artwork_id WHERE Exhibitions.start_date BETWEEN '1900-01-01' AND '1999-12-31';"}, {"query": "## sql context :\nCREATE TABLE companies (company_id INT, name TEXT, num_sustainable_materials INT, production_cost FLOAT); INSERT INTO companies (company_id, name, num_sustainable_materials, production_cost) VALUES (1, 'GreenFashions', 6, 15000); INSERT INTO companies (company_id, name, num_sustainable_materials, production_cost) VALUES (2, 'EcoFabrics', 3, 12000);\n\n## Query generation task:\nWhat is the total production cost of companies with more than 5 sustainable materials?\n\n", "response": "SELECT SUM(production_cost) FROM companies WHERE num_sustainable_materials > 5;"}, {"query": "## sql context :\nCREATE TABLE Astronauts (name TEXT, nationality TEXT, missions INTEGER); INSERT INTO Astronauts (name, nationality, missions) VALUES ('Neil Armstrong', 'USA', 2), ('Buzz Aldrin', 'USA', 2), ('Peggy Whitson', 'USA', 3), ('Yuri Gagarin', 'Russia', 1), ('Valentina Tereshkova', 'Russia', 2), ('Takao Doi', 'Japan', 2), ('Soichi Noguchi', 'Japan', 3), ('Sunita Williams', 'India', 3);\n\n## Query generation task:\nWho are the top 3 countries with the most astronauts in space?\n\n", "response": "SELECT nationality, COUNT(*) AS missions_count FROM Astronauts GROUP BY nationality ORDER BY missions_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE SeafoodSouthAfricaKenya (id INT, country VARCHAR(50), year INT, tons_produced INT); INSERT INTO SeafoodSouthAfricaKenya (id, country, year, tons_produced) VALUES (1, 'South Africa', 2020, 2000), (2, 'Kenya', 2020, 2100), (3, 'South Africa', 2020, 2200), (4, 'Kenya', 2020, 2300);\n\n## Query generation task:\nWhat is the maximum amount of seafood (in tons) produced by aquaculture farms in South Africa and Kenya, for the year 2020?\n\n", "response": "SELECT MAX(tons_produced) FROM SeafoodSouthAfricaKenya WHERE country IN ('South Africa', 'Kenya') AND year = 2020;"}, {"query": "## sql context :\nCREATE TABLE open_pedagogy (resource_id INT, rating INT, user_id INT); INSERT INTO open_pedagogy (resource_id, rating, user_id) VALUES (1, 5, 100), (2, 4, 100), (3, 3, 101), (4, 5, 102);\n\n## Query generation task:\nWhat is the highest-rated open pedagogy resource by users?\n\n", "response": "SELECT resource_id, MAX(rating) as highest_rating FROM open_pedagogy GROUP BY resource_id ORDER BY highest_rating DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE Employees (id INT, name VARCHAR(100), department VARCHAR(50), country VARCHAR(50)); INSERT INTO Employees (id, name, department, country) VALUES (1, 'John Doe', 'IT', 'United States'), (2, 'Jane Smith', 'Marketing', 'Canada'), (3, 'Mike Johnson', 'IT', 'France'), (4, 'Sara Connor', 'HR', 'United States'), (5, 'David Brown', 'Finance', 'Canada');\n\n## Query generation task:\nList all unique departments in the company.\n\n", "response": "SELECT DISTINCT department FROM Employees;"}, {"query": "## sql context :\nCREATE TABLE crops_year (id INT, name VARCHAR(50), year INT, production INT); INSERT INTO crops_year (id, name, year, production) VALUES (1, 'Rice', 2020, 5000), (2, 'Wheat', 2020, 7000), (3, 'Soybean', 2020, 3000), (4, 'Barley', 2020, 4000), (5, 'Rice', 2019, 6000), (6, 'Wheat', 2019, 8000), (7, 'Soybean', 2019, 4000), (8, 'Barley', 2019, 5000);\n\n## Query generation task:\nWhat is the production of crops by year?\n\n", "response": "SELECT year, SUM(production) as total_production FROM crops_year GROUP BY year;"}, {"query": "## sql context :\nCREATE TABLE CarbonOffsetInitiatives (id INT, initiative_name VARCHAR(50), location VARCHAR(50), carbon_offset_tons INT);\n\n## Query generation task:\nWhat is the total carbon offset of initiatives in 'RegionC' in the 'CarbonOffsetInitiatives' table?\n\n", "response": "SELECT SUM(carbon_offset_tons) FROM CarbonOffsetInitiatives WHERE location = 'RegionC';"}, {"query": "## sql context :\nCREATE TABLE factories(factory_id INT, name TEXT, location TEXT); CREATE TABLE workers(worker_id INT, name TEXT, salary DECIMAL, factory_id INT, program TEXT);\n\n## Query generation task:\nWhich factories do not have any workers in the workforce development program?\n\n", "response": "SELECT f.name FROM factories f LEFT JOIN workers w ON f.factory_id = w.factory_id WHERE w.program IS NULL;"}, {"query": "## sql context :\nCREATE TABLE SupplyChainEmployees (employee_count INT, country VARCHAR(255), year INT);\n\n## Query generation task:\nWhat is the minimum and maximum number of employees in the supply chain, per country, in the year 2020?\n\n", "response": "SELECT country, MIN(employee_count), MAX(employee_count) FROM SupplyChainEmployees WHERE year = 2020 GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE readers (id INT, age INT, gender VARCHAR(10), country VARCHAR(50), news_preference VARCHAR(50)); INSERT INTO readers (id, age, gender, country, news_preference) VALUES (1, 35, 'Male', 'UK', 'Technology'), (2, 45, 'Female', 'UK', 'Technology');\n\n## Query generation task:\nGet the percentage of male and female readers who prefer technology news in the UK.\n\n", "response": "SELECT gender, PERCENTAGE := (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM readers WHERE country = 'UK' AND news_preference = 'Technology')) percentage FROM readers WHERE country = 'UK' AND news_preference = 'Technology' GROUP BY gender;"}, {"query": "## sql context :\nCREATE TABLE ports (port_code CHAR(3), port_name VARCHAR(20)); INSERT INTO ports (port_code, port_name) VALUES ('LA', 'Los Angeles'), ('NY', 'New York'), ('MIA', 'Miami'), ('HOU', 'Houston'), ('SFO', 'San Francisco');\n\n## Query generation task:\nHow many ports are available in the database?\n\n", "response": "SELECT COUNT(DISTINCT ports.port_code) as port_count FROM ports;"}, {"query": "## sql context :\nCREATE TABLE human_resources (id INT, name VARCHAR(50), role VARCHAR(50), department VARCHAR(50)); INSERT INTO human_resources (id, name, role, department) VALUES (1, 'John Doe', 'Manager', 'Human Resources'), (2, 'Jane Smith', 'Employee', 'Human Resources'), (3, 'Bob Johnson', 'Engineer', 'Engineering'), (4, 'Alice Williams', 'Engineer', 'Engineering');\n\n## Query generation task:\nHow many employees work in the 'Engineering' department in the 'human_resources' table?\n\n", "response": "SELECT COUNT(*) FROM human_resources WHERE department = 'Engineering';"}, {"query": "## sql context :\nCREATE TABLE Artworks (id INT, creation_year INT, movement VARCHAR(20));\n\n## Query generation task:\nWhat is the earliest year in which an artwork from the 'Rococo' movement was created?\n\n", "response": "SELECT MIN(creation_year) FROM Artworks WHERE movement = 'Rococo';"}, {"query": "## sql context :\nCREATE TABLE member_details (member_id INT, membership VARCHAR(10)); INSERT INTO member_details (member_id, membership) VALUES (1, 'Gold'), (2, 'Platinum'), (3, 'Silver'), (4, 'Platinum'), (5, 'Gold');\n\n## Query generation task:\nList all members who have a 'Platinum' membership.\n\n", "response": "SELECT member_id FROM member_details WHERE membership = 'Platinum';"}, {"query": "## sql context :\nCREATE TABLE donors (id INT, name TEXT, state TEXT, donation_amount DECIMAL); INSERT INTO donors (id, name, state, donation_amount) VALUES (1, 'John Doe', 'New York', 120.00), (2, 'Jane Smith', 'New York', 200.00);\n\n## Query generation task:\nWhat is the total amount donated by donors from New York having a donation amount greater than $100?\n\n", "response": "SELECT SUM(donation_amount) FROM donors WHERE state = 'New York' AND donation_amount > 100;"}, {"query": "## sql context :\nCREATE TABLE carbon_offset_programs (id INT, name VARCHAR(50), state VARCHAR(50), offset_quantity INT, start_year INT);\n\n## Query generation task:\nWhat is the average carbon offset achieved by carbon offset programs in the state of California since 2015?\n\n", "response": "SELECT AVG(offset_quantity) FROM carbon_offset_programs WHERE state = 'California' AND start_year >= 2015;"}, {"query": "## sql context :\nCREATE TABLE WasteGeneration (country VARCHAR(255), waste_generation_kg_per_capita DECIMAL(5,2), region VARCHAR(255)); INSERT INTO WasteGeneration (country, waste_generation_kg_per_capita, region) VALUES ('Nigeria', 0.7, 'Africa'), ('Egypt', 1.9, 'Africa'), ('South Africa', 2.8, 'Africa');\n\n## Query generation task:\nWhat is the minimum waste generation per capita for African countries?\n\n", "response": "SELECT MIN(waste_generation_kg_per_capita) FROM WasteGeneration WHERE region = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE menu_items (menu_item_id INT, dish_type VARCHAR(255), food_cost DECIMAL(5,2)); INSERT INTO menu_items (menu_item_id, dish_type, food_cost) VALUES (1, 'Vegan', 3.50), (2, 'Vegetarian', 2.50), (3, 'Vegan', 4.00);\n\n## Query generation task:\nWhich menu items have the highest food cost for vegan dishes?\n\n", "response": "SELECT dish_type, MAX(food_cost) FROM menu_items WHERE dish_type = 'Vegan';"}, {"query": "## sql context :\nCREATE TABLE tickets (ticket_id INT, age_group VARCHAR(10), price DECIMAL(5,2)); INSERT INTO tickets (ticket_id, age_group, price) VALUES (1, 'Adult', 20.00), (2, 'Child', 15.00), (3, 'Senior', 10.00);\n\n## Query generation task:\nWhat was the average ticket price for each age group?\n\n", "response": "SELECT age_group, AVG(price) as avg_price FROM tickets GROUP BY age_group;"}, {"query": "## sql context :\nCREATE TABLE sustainable_practices (id INT, practice VARCHAR(50), description TEXT); INSERT INTO sustainable_practices (id, practice, description) VALUES (1, 'Green Roofs', 'Roofs covered with vegetation'), (2, 'Solar Panels', 'Roofs equipped with solar panels'), (3, 'Rainwater Harvesting', 'Collecting and storing rainwater for later use');\n\n## Query generation task:\nList sustainable building practices with their descriptions\n\n", "response": "SELECT practice, description FROM sustainable_practices;"}, {"query": "## sql context :\nCREATE TABLE category_revenue (category VARCHAR(255), sale_date DATE, revenue DECIMAL(10,2));\n\n## Query generation task:\nDetermine the percentage of total revenue for each garment category, for the year 2022.\n\n", "response": "SELECT category, (SUM(revenue) / (SELECT SUM(revenue) FROM category_revenue WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31')) * 100 FROM category_revenue WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY category;"}, {"query": "## sql context :\nCREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), location VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, location, Farm_id) VALUES (1, 'Soil Moisture', 'India', 1), (2, 'Temperature', 'Germany', 2);\n\n## Query generation task:\nList all IoT sensors located in India and Germany.\n\n", "response": "SELECT sensor_type FROM IoT_Sensors WHERE location IN ('India', 'Germany');"}, {"query": "## sql context :\nCREATE TABLE climate_finance (country VARCHAR(50), year INT, sector VARCHAR(50), adaptation BOOLEAN, amount FLOAT); INSERT INTO climate_finance (country, year, sector, adaptation, amount) VALUES ('Brazil', 2021, 'Adaptation', true, 5000000), ('Colombia', 2021, 'Adaptation', true, 4000000), ('Peru', 2021, 'Adaptation', true, 3000000), ('Argentina', 2021, 'Adaptation', true, 6000000), ('Mexico', 2021, 'Adaptation', true, 7000000);\n\n## Query generation task:\nWhat is the average climate finance provided to countries in Latin America and the Caribbean for climate adaptation projects in 2021?\n\n", "response": "SELECT AVG(amount) FROM climate_finance WHERE country IN ('Brazil', 'Colombia', 'Peru', 'Argentina', 'Mexico') AND year = 2021 AND adaptation = true;"}, {"query": "## sql context :\nCREATE TABLE Aquaculture_farms (id INT, name TEXT, country TEXT); INSERT INTO Aquaculture_farms (id, name, country) VALUES (1, 'Farm A', 'Denmark'), (2, 'Farm B', 'Canada'), (3, 'Farm C', 'Japan');\n\n## Query generation task:\nWhich aquaculture farms are located in 'Canada'?\n\n", "response": "SELECT name FROM Aquaculture_farms WHERE country = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE training_programs (id INT PRIMARY KEY, program_name VARCHAR(50), start_date DATE, end_date DATE, department VARCHAR(50), trainer VARCHAR(50));\n\n## Query generation task:\nCreate a table named 'training_programs'\n\n", "response": "CREATE TABLE training_programs (id INT PRIMARY KEY, program_name VARCHAR(50), start_date DATE, end_date DATE, department VARCHAR(50), trainer VARCHAR(50));"}, {"query": "## sql context :\nCREATE TABLE network_infrastructure (country VARCHAR(20), download_speed FLOAT); INSERT INTO network_infrastructure (country, download_speed) VALUES ('USA', 100), ('Canada', 120), ('Mexico', 80);\n\n## Query generation task:\nList the top 3 countries with the highest broadband internet download speed.\n\n", "response": "SELECT country, download_speed FROM network_infrastructure ORDER BY download_speed DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE volunteer_registration (id INT, name VARCHAR(50), registration_date DATE); INSERT INTO volunteer_registration (id, name, registration_date) VALUES (1, 'Alice', '2023-01-05'); INSERT INTO volunteer_registration (id, name, registration_date) VALUES (2, 'Bob', '2023-02-10');\n\n## Query generation task:\nList the number of volunteers who registered in Q1 and Q3 of 2023.\n\n", "response": "SELECT EXTRACT(QUARTER FROM registration_date) as quarter, COUNT(DISTINCT name) as volunteers_joined FROM volunteer_registration WHERE registration_date BETWEEN '2023-01-01' AND '2023-06-30' GROUP BY quarter HAVING quarter IN (1, 3);"}, {"query": "## sql context :\nCREATE TABLE Videos (id INT, title VARCHAR(255), content_creator_name VARCHAR(100), content_creator_region VARCHAR(50), length INT); INSERT INTO Videos (id, title, content_creator_name, content_creator_region, length) VALUES (1, 'Video1', 'Creator1', 'Southeast Asia', 12), (2, 'Video2', 'Creator2', 'Europe', 15), (3, 'Video3', 'Creator3', 'Southeast Asia', 20);\n\n## Query generation task:\nWhat is the total watch time of videos on the platform in minutes, produced by creators from Southeast Asia?\n\n", "response": "SELECT SUM(length) FROM Videos WHERE content_creator_region = 'Southeast Asia';"}, {"query": "## sql context :\nCREATE TABLE Budget (Year INT, Category VARCHAR(255), Amount INT); INSERT INTO Budget (Year, Category, Amount) VALUES (2020, 'Education', 5000000), (2020, 'Infrastructure', 10000000), (2021, 'Education', 6000000), (2021, 'Infrastructure', 12000000);\n\n## Query generation task:\nWhat is the total budget allocated for infrastructure in the year 2020?\n\n", "response": "SELECT SUM(Amount) FROM Budget WHERE Year = 2020 AND Category = 'Infrastructure';"}, {"query": "## sql context :\nCREATE TABLE user (user_id INT, username VARCHAR(20), posts INT, country VARCHAR(20)); INSERT INTO user (user_id, username, posts, country) VALUES (1, 'user1', 10, 'United States'), (2, 'user2', 20, 'Canada'), (3, 'user3', 30, 'United States'), (4, 'user4', 40, 'Mexico'), (5, 'user5', 50, 'Canada'), (6, 'user6', 60, 'Brazil'), (7, 'user7', 70, 'Brazil'), (8, 'user8', 80, 'Brazil'), (9, 'user9', 90, 'India'), (10, 'user10', 100, 'India');\n\n## Query generation task:\nList the top 3 countries with the most posts in the social_media database.\n\n", "response": "SELECT country, SUM(posts) as total_posts FROM user GROUP BY country ORDER BY total_posts DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE wind_farms (id INT, name VARCHAR(50), region VARCHAR(50), capacity FLOAT, efficiency FLOAT); INSERT INTO wind_farms (id, name, region, capacity, efficiency) VALUES (1, 'Windfarm A', 'East', 120.3, 0.32); CREATE TABLE solar_farms (id INT, name VARCHAR(50), region VARCHAR(50), capacity FLOAT, efficiency FLOAT); INSERT INTO solar_farms (id, name, region, capacity, efficiency) VALUES (1, 'Solarfarm A', 'East', 180.5, 0.35);\n\n## Query generation task:\nWhich renewable energy farms in the 'East' region have an efficiency greater than 30%?\n\n", "response": "SELECT name, efficiency FROM wind_farms WHERE region = 'East' UNION SELECT name, efficiency FROM solar_farms WHERE region = 'East' HAVING efficiency > 0.3;"}, {"query": "## sql context :\nCREATE TABLE Farm (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE Measurement (id INT, farm_id INT, dissolved_oxygen FLOAT, timestamp TIMESTAMP);\n\n## Query generation task:\nWhat is the maximum dissolved oxygen level recorded in each aquaculture farm?\n\n", "response": "SELECT f.name, MAX(m.dissolved_oxygen) FROM Farm f JOIN Measurement m ON f.id = m.farm_id GROUP BY f.name;"}, {"query": "## sql context :\nCREATE TABLE game_sales (id INT, game_name VARCHAR(50), genre VARCHAR(50), sale_date DATE, revenue DECIMAL(10,2), quantity INT); INSERT INTO game_sales (id, game_name, genre, sale_date, revenue, quantity) VALUES (1, 'Game G', 'Adventure', '2022-07-10', 30.00, 2); INSERT INTO game_sales (id, game_name, genre, sale_date, revenue, quantity) VALUES (2, 'Game H', 'Adventure', '2022-07-15', 50.00, 3);\n\n## Query generation task:\nShow the total revenue of the 'Adventure' game genre sold in Australia and New Zealand in the past 3 months, and the number of games sold.\n\n", "response": "SELECT SUM(game_sales.revenue) AS total_revenue, SUM(game_sales.quantity) AS num_games_sold FROM game_sales WHERE game_sales.genre = 'Adventure' AND game_sales.sale_date >= DATEADD(month, -3, GETDATE()) AND (game_sales.country = 'Australia' OR game_sales.country = 'New Zealand');"}, {"query": "## sql context :\nCREATE TABLE users (id INT, name TEXT, membership_type TEXT, state TEXT); CREATE TABLE workouts (id INT, user_id INT, duration INT); INSERT INTO users (id, name, membership_type, state) VALUES (1, 'John Doe', 'Premium', 'NY'), (2, 'Jane Smith', 'Basic', 'CA'); INSERT INTO workouts (id, user_id, duration) VALUES (1, 1, 60), (2, 1, 30), (3, 2, 45);\n\n## Query generation task:\nWhat is the average workout duration for each membership type in New York?\n\n", "response": "SELECT users.membership_type, AVG(workouts.duration) AS avg_duration FROM users JOIN workouts ON users.id = workouts.user_id WHERE users.state = 'NY' GROUP BY users.membership_type;"}, {"query": "## sql context :\nCREATE TABLE suppliers (supplier_id INT, supplier_name TEXT);CREATE TABLE inventory (product_id INT, product_name TEXT, category TEXT, is_organic BOOLEAN);INSERT INTO suppliers VALUES (1, 'Supplier A'), (2, 'Supplier B'), (3, 'Supplier C'), (4, 'Supplier D');INSERT INTO inventory VALUES (100, 'Apples', 'Fruits', TRUE), (101, 'Bananas', 'Fruits', FALSE), (102, 'Oranges', 'Fruits', TRUE), (103, 'Pears', 'Fruits', FALSE), (104, 'Grapes', 'Fruits', TRUE);\n\n## Query generation task:\nList the suppliers who have supplied both organic and non-organic fruits.\n\n", "response": "SELECT DISTINCT supplier_name FROM inventory INNER JOIN suppliers ON TRUE WHERE category = 'Fruits' AND is_organic IS NOT NULL;"}, {"query": "## sql context :\nCREATE TABLE landfill_capacity (state VARCHAR(20), year INT, capacity_cubic_meters BIGINT); INSERT INTO landfill_capacity (state, year, capacity_cubic_meters) VALUES ('New York', 2021, 9876543), ('New York', 2023, 10567890);\n\n## Query generation task:\nWhat is the landfill capacity in New York state in 2022?\n\n", "response": "SELECT capacity_cubic_meters FROM landfill_capacity WHERE state = 'New York' AND year = 2022;"}, {"query": "## sql context :\nCREATE TABLE WastewaterTreatment (Id INT, Plant VARCHAR(50), Wastewater DECIMAL(5,2), Date DATE); INSERT INTO WastewaterTreatment (Id, Plant, Wastewater, Date) VALUES (1, 'Denver Plant', 1800.5, '2021-10-01'); INSERT INTO WastewaterTreatment (Id, Plant, Wastewater, Date) VALUES (2, 'Colorado Springs Plant', 1400.3, '2021-10-01');\n\n## Query generation task:\nWhich wastewater treatment plants treated more than 1600 m\u00b3 of wastewater on October 1, 2021?\n\n", "response": "SELECT Plant, SUM(Wastewater) FROM WastewaterTreatment WHERE Date = '2021-10-01' GROUP BY Plant HAVING SUM(Wastewater) > 1600;"}, {"query": "## sql context :\nCREATE TABLE MovieBudgets (movie_id INT, release_date DATE, production_budget DECIMAL(7,2)); INSERT INTO MovieBudgets (movie_id, release_date, production_budget) VALUES (1, '2018-01-01', 25000000.00), (2, '2019-05-15', 18000000.00), (3, '2018-09-22', 12000000.00);\n\n## Query generation task:\nWhat is the total production budget for movies released in 2018 and rated 8 or higher?\n\n", "response": "SELECT SUM(production_budget) FROM MovieBudgets INNER JOIN Movies ON MovieBudgets.movie_id = Movies.movie_id WHERE release_date >= '2018-01-01' AND release_date < '2019-01-01' AND rating >= 8;"}, {"query": "## sql context :\nCREATE TABLE workouts (id INT, member_id INT, workout_type VARCHAR(20), workout_date DATE);\n\n## Query generation task:\nList the total number of workouts and unique members who participated in CrossFit classes in the last month.\n\n", "response": "SELECT COUNT(DISTINCT id) as total_members, COUNT(*) as total_workouts FROM workouts WHERE workout_type = 'CrossFit' AND workout_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);"}, {"query": "## sql context :\nCREATE TABLE SpaceMissions (id INT, mission_name VARCHAR(255), country VARCHAR(255), start_date DATE, end_date DATE); INSERT INTO SpaceMissions (id, mission_name, country, start_date, end_date) VALUES (1, 'International Space Station', 'United States', '1998-11-02', '2022-02-28'); INSERT INTO SpaceMissions (id, mission_name, country, start_date, end_date) VALUES (2, 'Apollo 17', 'United States', '1972-12-07', '1972-12-19');\n\n## Query generation task:\nList the space missions with the longest durations as of 2022.\n\n", "response": "SELECT mission_name, TIMESTAMPDIFF(YEAR, start_date, COALESCE(end_date, CURDATE())) as 'Mission Duration (Years)' FROM SpaceMissions WHERE end_date IS NULL OR end_date >= '2022-01-01' ORDER BY 'Mission Duration (Years)' DESC"}, {"query": "## sql context :\nCREATE TABLE customers (id INT, name VARCHAR(50), country VARCHAR(50)); CREATE TABLE purchases (id INT, customer_id INT, product_id INT, quantity INT); CREATE TABLE products (id INT, name VARCHAR(50), organic BOOLEAN);\n\n## Query generation task:\nGet the name and country of the top 3 customers for organic cosmetics\n\n", "response": "SELECT customers.name, customers.country FROM customers JOIN purchases ON customers.id = purchases.customer_id JOIN products ON purchases.product_id = products.id WHERE products.organic = TRUE GROUP BY customers.id ORDER BY SUM(purchases.quantity) DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE fans (id INT PRIMARY KEY, name VARCHAR(100), age INT, gender VARCHAR(10), favorite_team VARCHAR(50));\n\n## Query generation task:\nget the number of fans who are male and over 40\n\n", "response": "SELECT COUNT(*) FROM fans WHERE gender = 'Male' AND age > 40;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists genetics;CREATE TABLE if not exists genetics.experiments (id INT, experiment_name VARCHAR(255), temperature_delta INT); INSERT INTO genetics.experiments (id, experiment_name, temperature_delta) VALUES (1, 'CRISPR-Cas9', 15), (2, 'Gene Editing', 22), (3, 'Genetic Fusion', 18);\n\n## Query generation task:\nIdentify genetic research experiments with a temperature increase above the average.\n\n", "response": "SELECT experiment_name, temperature_delta FROM genetics.experiments WHERE temperature_delta > (SELECT AVG(temperature_delta) FROM genetics.experiments);"}, {"query": "## sql context :\nCREATE TABLE Stores (store_id INT, store_name VARCHAR(50)); INSERT INTO Stores VALUES (1, 'Store A'), (2, 'Store B'), (3, 'Store C'); CREATE TABLE Sales (sale_id INT, product_name VARCHAR(50), store_id INT, quantity_sold INT); INSERT INTO Sales VALUES (1, 'Eco-Friendly Denim Jacket', 1, 30), (2, 'Eco-Friendly Denim Jacket', 2, 45), (3, 'Eco-Friendly Denim Jacket', 3, 60);\n\n## Query generation task:\nWhat is the total quantity of 'Eco-Friendly Denim Jackets' sold per store, ranked by the highest sales?\n\n", "response": "SELECT store_id, store_name, SUM(quantity_sold) as total_sold FROM Sales JOIN Stores ON Sales.store_id = Stores.store_id WHERE product_name = 'Eco-Friendly Denim Jacket' GROUP BY store_id, store_name ORDER BY total_sold DESC;"}, {"query": "## sql context :\nCREATE TABLE factories (factory_id INT, name TEXT, location TEXT, emissions INT); INSERT INTO factories (factory_id, name, location, emissions) VALUES (1, 'Factory A', 'Texas', 120), (2, 'Factory B', 'California', 100), (3, 'Factory C', 'Texas', 180);\n\n## Query generation task:\nWhat are the average emission levels of factories in Texas?\n\n", "response": "SELECT AVG(f.emissions) FROM factories f WHERE f.location = 'Texas';"}, {"query": "## sql context :\nCREATE TABLE grad_students (id INT, name VARCHAR(50));CREATE TABLE research_grants (id INT, grant_id INT, amount INT, student_id INT);\n\n## Query generation task:\nIdentify the count of unique research grants and their respective amounts, received by each graduate student in descending order of total amount received.\n\n", "response": "SELECT rg.student_id, COUNT(DISTINCT rg.grant_id) AS num_grants, SUM(rg.amount) AS total_amount FROM research_grants rg GROUP BY rg.student_id ORDER BY total_amount DESC;"}, {"query": "## sql context :\nCREATE TABLE Vessels (ID INT, Name VARCHAR(50), Type VARCHAR(50)); CREATE TABLE SafetyIncidents (ID INT, VesselID INT, Location VARCHAR(50), IncidentType VARCHAR(50)); INSERT INTO Vessels (ID, Name, Type) VALUES (1, 'Ocean Titan', 'Cargo'); INSERT INTO SafetyIncidents (ID, VesselID, Location, IncidentType) VALUES (1, 1, 'Caribbean Sea', 'Collision'); INSERT INTO SafetyIncidents (ID, VesselID, Location, IncidentType) VALUES (2, 2, 'Caribbean Sea', 'Grounding');\n\n## Query generation task:\nFind vessels that have never had a safety incident.\n\n", "response": "SELECT v.ID, v.Name, v.Type FROM Vessels v LEFT JOIN SafetyIncidents si ON v.ID = si.VesselID WHERE si.ID IS NULL;"}, {"query": "## sql context :\nCREATE TABLE Areas (area_id INT, area_type TEXT); CREATE TABLE Providers (provider_id INT, provider_parity_score INT, area_id INT);\n\n## Query generation task:\nWhat is the average mental health parity score for providers in urban areas?\n\n", "response": "SELECT AVG(provider_parity_score) as avg_parity_score FROM Providers p JOIN Areas a ON p.area_id = a.area_id WHERE a.area_type = 'urban';"}, {"query": "## sql context :\nCREATE TABLE local_impact_japan (year INT, location TEXT, economic_impact INT); INSERT INTO local_impact_japan (year, location, economic_impact) VALUES (2019, 'Tokyo', 15000), (2022, 'Tokyo', 12000);\n\n## Query generation task:\nFind the local economic impact of tourism in Tokyo, Japan in 2022.\n\n", "response": "SELECT economic_impact FROM local_impact_japan WHERE location = 'Tokyo' AND year = 2022;"}, {"query": "## sql context :\nCREATE TABLE patients (id INT, country VARCHAR(255), start_date DATE); CREATE TABLE treatments (id INT, patient_id INT, type VARCHAR(255), start_date DATE); CREATE TABLE outcomes (id INT, patient_id INT, treatment_id INT, improvement BOOLEAN, follow_up_date DATE); INSERT INTO patients (id, country) VALUES (1, 'Japan'), (2, 'Japan'); INSERT INTO treatments (id, patient_id, type) VALUES (1, 1, 'psychotherapy'), (2, 2, 'psychotherapy'); INSERT INTO outcomes (id, patient_id, treatment_id, improvement, follow_up_date) VALUES (1, 1, 1, true, '2021-08-01'), (2, 1, 1, true, '2021-07-01'), (3, 2, 2, false, '2021-06-01');\n\n## Query generation task:\nWhat percentage of patients in Japan experienced improvement after 6 months of psychotherapy?\n\n", "response": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN outcomes.follow_up_date < patients.start_date + INTERVAL '6 month' AND outcomes.improvement THEN patients.id END) / COUNT(DISTINCT patients.id) AS percentage FROM patients JOIN treatments ON patients.id = treatments.patient_id JOIN outcomes ON treatments.id = outcomes.treatment_id WHERE patients.country = 'Japan' AND treatments.type = 'psychotherapy';"}, {"query": "## sql context :\nCREATE TABLE emergency_incidents (id INT, incident_type VARCHAR(255)); INSERT INTO emergency_incidents (id, incident_type) VALUES (1, 'Medical Emergency'), (2, 'Fire'), (3, 'Traffic Accident'); CREATE TABLE crime_reports (id INT, report_type VARCHAR(255)); INSERT INTO crime_reports (id, report_type) VALUES (1, 'Theft'), (2, 'Vandalism'), (3, 'Assault');\n\n## Query generation task:\nWhat is the total number of emergency incidents and crime reports, excluding medical emergencies and thefts?\n\n", "response": "SELECT incident_type as event_type FROM emergency_incidents WHERE incident_type NOT IN ('Medical Emergency') UNION ALL SELECT report_type FROM crime_reports WHERE report_type NOT IN ('Theft');"}, {"query": "## sql context :\nCREATE TABLE rural_hospitals (hospital_id INT, hospital_name VARCHAR(100), province VARCHAR(50), num_staff INT); INSERT INTO rural_hospitals (hospital_id, hospital_name, province, num_staff) VALUES (1, 'Hospital A', 'New South Wales', 30), (2, 'Hospital B', 'New South Wales', 40), (3, 'Hospital C', 'Queensland', 50), (4, 'Hospital D', 'Queensland', 60);\n\n## Query generation task:\nWhat is the average number of rural hospitals per province in Australia and how many provinces have more than 20 rural hospitals?\n\n", "response": "SELECT AVG(num_staff) AS avg_rural_hospitals_per_province, COUNT(*) FILTER (WHERE num_staff > 20) AS provinces_with_more_than_20_hospitals FROM ( SELECT province, COUNT(*) AS num_staff FROM rural_hospitals GROUP BY province ) subquery;"}, {"query": "## sql context :\nCREATE TABLE routes (route_id INT, route_name VARCHAR(255)); INSERT INTO routes VALUES (1, 'Route 1A'); INSERT INTO routes VALUES (2, 'Route 2B'); CREATE TABLE fares (fare_id INT, route_id INT, fare_amount DECIMAL(5,2)); INSERT INTO fares VALUES (1, 1, 2.50); INSERT INTO fares VALUES (2, 1, 3.00); INSERT INTO fares VALUES (3, 2, 1.75);\n\n## Query generation task:\nWhat is the total revenue for each route in the bus system?\n\n", "response": "SELECT r.route_name, SUM(f.fare_amount) as total_revenue FROM routes r JOIN fares f ON r.route_id = f.route_id GROUP BY r.route_name;"}, {"query": "## sql context :\nCREATE TABLE healthcare_system (id INT, hospital_name TEXT, type TEXT, budget INT);INSERT INTO healthcare_system (id, hospital_name, type, budget) VALUES (1, 'HospitalA', 'Public', 5000000), (2, 'HospitalB', 'Private', 3000000), (3, 'HospitalC', 'Public', 6000000);\n\n## Query generation task:\nWhat is the average budget of public hospitals in the healthcare system?\n\n", "response": "SELECT AVG(budget) FROM healthcare_system WHERE type = 'Public';"}, {"query": "## sql context :\nCREATE TABLE users (id INT, location VARCHAR(50)); CREATE TABLE posts (id INT, user_id INT, likes INT, created_at DATETIME);\n\n## Query generation task:\nWhat is the average number of likes on posts by users located in the United States, for posts created in the last month?\n\n", "response": "SELECT AVG(posts.likes) FROM posts INNER JOIN users ON posts.user_id = users.id WHERE users.location = 'United States' AND posts.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH);"}, {"query": "## sql context :\nCREATE TABLE otas (ota_id INT, hotel_id INT, bookings INT); CREATE TABLE hotels (hotel_id INT, name TEXT, category TEXT); INSERT INTO otas (ota_id, hotel_id, bookings) VALUES (1, 1, 100), (2, 2, 150), (3, 3, 200), (4, 4, 75); INSERT INTO hotels (hotel_id, name, category) VALUES (1, 'Hotel A', 'City'), (2, 'Hotel B', 'City'), (3, 'Hotel C', 'City'), (4, 'Hotel D', 'Boutique');\n\n## Query generation task:\nWhat is the maximum number of OTA bookings made for a hotel in the 'City' category?\n\n", "response": "SELECT MAX(otas.bookings) FROM otas INNER JOIN hotels ON otas.hotel_id = hotels.hotel_id WHERE hotels.category = 'City';"}, {"query": "## sql context :\nCREATE TABLE Astronauts (id INT, name VARCHAR(255), medical_checkup_date DATE, medical_status VARCHAR(50)); INSERT INTO Astronauts (id, name, medical_checkup_date, medical_status) VALUES (1, 'Mark Watney', '2020-05-01', 'Healthy'), (2, 'Melissa Lewis', '2019-12-15', 'Sick');\n\n## Query generation task:\nList all astronauts who had medical checkups in '2020' and their corresponding medical status.\n\n", "response": "SELECT name, medical_status FROM Astronauts WHERE medical_checkup_date >= '2020-01-01' AND medical_checkup_date < '2021-01-01';"}, {"query": "## sql context :\nCREATE TABLE production (prod_id INT, well_id INT, prod_date DATE, production_rate FLOAT); INSERT INTO production (prod_id, well_id, prod_date, production_rate) VALUES (1, 1, '2020-01-01', 1000), (2, 1, '2020-02-01', 1100), (3, 1, '2020-03-01', 1200), (4, 1, '2020-04-01', 1300), (5, 1, '2020-05-01', 1400);\n\n## Query generation task:\nWhat is the monthly production trend for a specific well?\n\n", "response": "SELECT prod_date, production_rate, LAG(production_rate, 1) OVER (ORDER BY prod_date) AS previous_month_rate FROM production WHERE well_id = 1;"}, {"query": "## sql context :\nCREATE TABLE Distributors (DistributorID varchar(10), DistributorName varchar(20)); INSERT INTO Distributors VALUES ('A', 'Distributor A'); CREATE TABLE Stores (StoreID int, StoreName varchar(10)); INSERT INTO Stores VALUES (1, 'Store 1'); CREATE TABLE Deliveries (DeliveryID int, DeliveryDate date, ProduceID varchar(10), StoreID int, DistributorID varchar(10)); INSERT INTO Deliveries VALUES (1, '2022-01-02', 'P001', 1, 'A'); CREATE TABLE Food (ProduceID varchar(10), FoodName varchar(20), Calories int); INSERT INTO Food VALUES ('P001', 'Product 1', 350);\n\n## Query generation task:\nWhich products have more than 300 calories and were delivered to store 1?\n\n", "response": "SELECT FoodName FROM Food INNER JOIN Deliveries ON Food.ProduceID = Deliveries.ProduceID WHERE Food.Calories > 300 AND Deliveries.StoreID = 1;"}, {"query": "## sql context :\nCREATE TABLE doctors (doctor_id INT, clinic_id INT, specialty VARCHAR(50)); INSERT INTO doctors (doctor_id, clinic_id, specialty) VALUES (1, 1, 'General Practitioner'), (2, 1, 'Surgeon'), (3, 2, 'General Practitioner'), (4, 3, 'Surgeon'); CREATE TABLE rural_clinics (clinic_id INT, state VARCHAR(2)); INSERT INTO rural_clinics (clinic_id, state) VALUES (1, 'Oregon'), (2, 'Oregon'), (3, 'California');\n\n## Query generation task:\nHow many general practitioners are available in each rural clinic in Oregon state?\n\n", "response": "SELECT r.clinic_id, COUNT(d.doctor_id) AS general_practitioners_count FROM doctors d JOIN rural_clinics r ON d.clinic_id = r.clinic_id WHERE r.state = 'Oregon' AND specialty = 'General Practitioner' GROUP BY r.clinic_id;"}, {"query": "## sql context :\nCREATE TABLE football_teams (team_id INT, team_name VARCHAR(50));CREATE VIEW football_matches AS SELECT player_id, team_id, SUM(points) AS total_points FROM football_player_scores GROUP BY player_id, team_id;\n\n## Query generation task:\nList the names and total points scored by football players in the 'football_matches' table, sorted by total points in descending order.\n\n", "response": "SELECT football_teams.team_name, football_matches.total_points, basketball_players.name FROM football_teams INNER JOIN football_matches ON football_teams.team_id = football_matches.team_id INNER JOIN basketball_players ON basketball_players.player_id = football_matches.player_id ORDER BY football_matches.total_points DESC;"}, {"query": "## sql context :\nCREATE TABLE systems (system_id INT, risk_score INT, last_updated DATETIME); INSERT INTO systems (system_id, risk_score, last_updated) VALUES (1, 8, '2022-01-01'), (2, 5, '2022-01-05'), (3, 10, '2022-01-03'), (4, 6, '2022-01-04'), (5, 15, '2022-01-02');\n\n## Query generation task:\nWhat is the percentage of systems that have a higher risk score than the average risk score, in the last 60 days?\n\n", "response": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM systems WHERE last_updated >= DATEADD(day, -60, GETDATE())) AS pct_above_avg FROM systems s WHERE risk_score > (SELECT AVG(risk_score) FROM systems WHERE last_updated >= DATEADD(day, -60, GETDATE()));"}, {"query": "## sql context :\nCREATE TABLE Missions (ID INT, Astronaut VARCHAR(255), Year INT); CREATE TABLE Astronauts (ID INT, Name VARCHAR(255), Region VARCHAR(255)); INSERT INTO Missions (ID, Astronaut, Year) VALUES (1, 'Li', 2023), (2, 'Choi', 2023), (3, 'Johnson', 2023); INSERT INTO Astronauts (ID, Name, Region) VALUES (1, 'Li', 'Asia'), (2, 'Choi', 'Asia'), (3, 'Johnson', 'North America');\n\n## Query generation task:\nHow many space missions were conducted by Asian astronauts in 2023?\n\n", "response": "SELECT COUNT(*) FROM Missions INNER JOIN Astronauts ON Missions.Astronaut = Astronauts.Name WHERE Region = 'Asia' AND Year = 2023;"}, {"query": "## sql context :\nCREATE TABLE Building_Permits (Permit_ID INT, Building_Type VARCHAR(50), Issue_Date DATE); CREATE TABLE Residential_Buildings (Building_ID INT, Building_Type VARCHAR(50)); CREATE TABLE Labor_Statistics (Permit_ID INT, Worker_Count INT, Year INT); INSERT INTO Building_Permits (Permit_ID, Building_Type, Issue_Date) VALUES (1, 'Residential', '2018-01-01'), (2, 'Residential', '2019-07-01'); INSERT INTO Residential_Buildings (Building_ID, Building_Type) VALUES (1, 'Residential'), (2, 'Residential'); INSERT INTO Labor_Statistics (Permit_ID, Worker_Count, Year) VALUES (1, 15, 2018), (2, 20, 2019);\n\n## Query generation task:\nList all the building permits issued for residential buildings in New York between 2018 and 2020, along with the labor statistics.\n\n", "response": "SELECT Building_Permits.Permit_ID, Building_Type, Issue_Date, Worker_Count, Year FROM Building_Permits INNER JOIN Residential_Buildings ON Building_Permits.Building_Type = Residential_Buildings.Building_Type INNER JOIN Labor_Statistics ON Building_Permits.Permit_ID = Labor_Statistics.Permit_ID WHERE Issue_Date BETWEEN '2018-01-01' AND '2020-12-31';"}, {"query": "## sql context :\nCREATE TABLE fans (id INT PRIMARY KEY, name VARCHAR(100), age INT, gender VARCHAR(10), city VARCHAR(50));\n\n## Query generation task:\nCreate a view for female fans\n\n", "response": "CREATE VIEW female_fans AS SELECT * FROM fans WHERE gender = 'Female';"}, {"query": "## sql context :\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, Community TEXT, Year INT, Hours DECIMAL(5,2)); INSERT INTO Volunteers (VolunteerID, VolunteerName, Community, Year, Hours) VALUES (1, 'Alice', 'Women in Tech', 2019, 25.50), (2, 'Bob', 'Minorities in STEM', 2018, 30.00);\n\n## Query generation task:\nHow many volunteers from underrepresented communities in the technology sector participated in our programs in 2019?\n\n", "response": "SELECT COUNT(VolunteerID) FROM Volunteers WHERE Community IN ('Women in Tech', 'Minorities in STEM') AND Year = 2019;"}, {"query": "## sql context :\nCREATE TABLE deliveries (id INT, delivery_date DATE, route_id VARCHAR(5), delivery_time INT); INSERT INTO deliveries (id, delivery_date, route_id, delivery_time) VALUES (1, '2022-01-02', 'R01', 300), (2, '2022-01-10', 'R02', 450), (3, '2022-01-15', 'R03', 250), (4, '2022-01-20', 'R02', 400);\n\n## Query generation task:\nWhat is the average delivery time for route 'R02'?\n\n", "response": "SELECT AVG(delivery_time) FROM deliveries WHERE route_id = 'R02';"}, {"query": "## sql context :\nCREATE TABLE algorithmic_fairness_incidents (incident_id INT PRIMARY KEY, incident_date DATE, region VARCHAR(255));\n\n## Query generation task:\nList all algorithmic fairness incidents in the Asia-Pacific region since 2020-01-01.\n\n", "response": "SELECT * FROM algorithmic_fairness_incidents WHERE incident_date >= '2020-01-01' AND region = 'Asia-Pacific';"}, {"query": "## sql context :\nCREATE TABLE Artworks (id INT, value DECIMAL(10,2), artist_id INT); CREATE TABLE Artists (id INT, name VARCHAR(255), nationality VARCHAR(255)); INSERT INTO Artists (id, name, nationality) VALUES (1, 'Claude Monet', 'France'); INSERT INTO Artworks (id, value, artist_id) VALUES (1, 8000, 1);\n\n## Query generation task:\nWhat is the maximum value of artworks in the 'Artworks' table by artists from France?\n\n", "response": "SELECT MAX(value) FROM Artworks INNER JOIN Artists ON Artworks.artist_id = Artists.id WHERE Artists.nationality = 'France';"}, {"query": "## sql context :\nCREATE TABLE teams (team_id INT, team_name VARCHAR(255)); CREATE TABLE players (player_id INT, player_name VARCHAR(255), team_id INT, age INT);\n\n## Query generation task:\nWhat is the average age of players in each team?\n\n", "response": "SELECT t.team_name, AVG(p.age) as avg_age FROM players p JOIN teams t ON p.team_id = t.team_id GROUP BY t.team_name;"}, {"query": "## sql context :\nCREATE TABLE world_heritage_sites (site_id INT, site_name VARCHAR(100), country VARCHAR(100), is_unesco_site BOOLEAN); INSERT INTO world_heritage_sites (site_id, site_name, country, is_unesco_site) VALUES (1, 'Taj Mahal', 'India', true); INSERT INTO world_heritage_sites (site_id, site_name, country, is_unesco_site) VALUES (2, 'Hampi', 'India', true);\n\n## Query generation task:\nHow many UNESCO World Heritage sites are in India?\n\n", "response": "SELECT COUNT(*) FROM world_heritage_sites WHERE country = 'India' AND is_unesco_site = true;"}, {"query": "## sql context :\nCREATE TABLE animal_species (species_id INT, species_name VARCHAR(50));CREATE TABLE rehab_centers (center_id INT, center_name VARCHAR(50));CREATE TABLE animal_rehab (animal_id INT, species_id INT, center_id INT, rehab_date DATE); INSERT INTO animal_species (species_id, species_name) VALUES (1, 'Raccoon'), (2, 'Opossum'), (3, 'Squirrel'); INSERT INTO rehab_centers (center_id, center_name) VALUES (1, 'Rehab Center A'), (2, 'Rehab Center B'); INSERT INTO animal_rehab (animal_id, species_id, center_id, rehab_date) VALUES (101, 1, 1, '2021-01-01'), (102, 2, 1, '2021-03-01'), (103, 3, 2, '2021-05-01');\n\n## Query generation task:\nHow many animals of each species were admitted to rehab centers in 2021?\n\n", "response": "SELECT s.species_name, COUNT(a.animal_id) AS total_admitted FROM animal_species s JOIN animal_rehab a ON s.species_id = a.species_id WHERE YEAR(a.rehab_date) = 2021 GROUP BY s.species_name;"}, {"query": "## sql context :\nCREATE TABLE Agency_Satellites (Agency VARCHAR(50), Satellite_Name VARCHAR(50), Launch_Date DATETIME); CREATE TABLE Missions (Mission_ID INT, Mission_Name VARCHAR(50), Astronaut_Name VARCHAR(50), Agency VARCHAR(50), Start_Date DATETIME, End_Date DATETIME); INSERT INTO Agency_Satellites (Agency, Satellite_Name, Launch_Date) VALUES ('NASA', 'Spitzer Space Telescope', '2003-08-25'), ('ESA', 'Gaia', '2013-12-19'), ('CNES', 'Pl\u00e9iades 1A', '2009-12-17'); INSERT INTO Missions (Mission_ID, Mission_Name, Agency, Start_Date, End_Date) VALUES (1, 'Mars Science Laboratory', 'NASA', '2011-11-26', '2018-11-02'), (2, 'Rosetta', 'ESA', '2004-03-02', '2016-09-30'), (3, 'COROT', 'CNES', '2006-12-27', '2012-11-02');\n\n## Query generation task:\nWhich space agencies have launched more than 5 satellites and their respective total mission durations?\n\n", "response": "SELECT a.Agency, COUNT(a.Satellite_Name) AS Number_Of_Satellites, DATEDIFF(day, MIN(m.Start_Date), MAX(m.End_Date)) * 1.0 / 30 AS Total_Mission_Duration_Months FROM Agency_Satellites a INNER JOIN Missions m ON a.Agency = m.Agency GROUP BY a.Agency HAVING COUNT(a.Satellite_Name) > 5;"}, {"query": "## sql context :\nCREATE TABLE vehicle_safety (id INT PRIMARY KEY, make VARCHAR(50), model VARCHAR(50), safety_rating FLOAT); INSERT INTO vehicle_safety (id, make, model, safety_rating) VALUES (1, 'Audi', 'A4', 5.2), (2, 'BMW', '3 Series', 5.0), (3, 'Ford', 'Fusion', 4.7), (4, 'Volkswagen', 'Golf', 4.9);\n\n## Query generation task:\nDelete the 'Ford Fusion' from the vehicle_safety table if its safety rating is less than 5.\n\n", "response": "DELETE FROM vehicle_safety WHERE make = 'Ford' AND model = 'Fusion' AND safety_rating < 5;"}, {"query": "## sql context :\nCREATE TABLE Donors (id INT, name VARCHAR(50), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50), type VARCHAR(10), donation_amount DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the maximum donation amount for each type of donor in the 'Donors' table?\n\n", "response": "SELECT type, MAX(donation_amount) FROM Donors GROUP BY type;"}, {"query": "## sql context :\nCREATE TABLE RetailerG (item VARCHAR(20), price INT, quantity INT); INSERT INTO RetailerG VALUES ('Accessories', 20, 30), ('Accessories', 15, 40);\n\n## Query generation task:\nFind the total revenue generated by selling all 'Accessories' items.\n\n", "response": "SELECT SUM(price * quantity) FROM RetailerG WHERE item = 'Accessories';"}, {"query": "## sql context :\nCREATE TABLE project_timeline (id INT, project_id INT, start_date DATE, end_date DATE); INSERT INTO project_timeline (id, project_id, start_date, end_date) VALUES (1, 1, '2021-01-01', '2021-06-30'); INSERT INTO project_timeline (id, project_id, start_date, end_date) VALUES (2, 2, '2021-03-01', '2021-08-31'); INSERT INTO project_timeline (id, project_id, start_date, end_date) VALUES (3, 3, '2021-05-01', '2021-11-30');\n\n## Query generation task:\nWhat is the average duration of construction projects in New York?\n\n", "response": "SELECT AVG(DATEDIFF(end_date, start_date)) as avg_duration_days FROM project_timeline WHERE project_id IN (SELECT id FROM projects WHERE state = 'New York');"}, {"query": "## sql context :\nCREATE TABLE InspectionData (PartID INT, Type VARCHAR(50), Manufacturer VARCHAR(50), LastInspection DATE, NextInspection DATE);\n\n## Query generation task:\nWhat is the average time between the last inspection and the next scheduled inspection for each part type and manufacturer?\n\n", "response": "SELECT InspectionData.Type, InspectionData.Manufacturer, AVG(DATEDIFF(day, InspectionData.LastInspection, InspectionData.NextInspection)) as AvgTimeBetweenInspections FROM InspectionData GROUP BY InspectionData.Type, InspectionData.Manufacturer;"}, {"query": "## sql context :\nCREATE TABLE rural_projects (region TEXT, year INT, num_projects INT); INSERT INTO rural_projects (region, year, num_projects) VALUES ('North', 2017, 10), ('North', 2018, 15), ('North', 2019, 12), ('North', 2020, 18), ('North', 2021, 21), ('South', 2017, 15), ('South', 2018, 18), ('South', 2019, 16), ('South', 2020, 20), ('South', 2021, 23), ('East', 2017, 12), ('East', 2018, 14), ('East', 2019, 17), ('East', 2020, 22), ('East', 2021, 25), ('West', 2017, 18), ('West', 2018, 20), ('West', 2019, 23), ('West', 2020, 24), ('West', 2021, 27);\n\n## Query generation task:\nWhat is the three-year rolling average of rural infrastructure projects in Nigeria, partitioned by region?\n\n", "response": "SELECT region, year, AVG(num_projects) OVER (PARTITION BY region ORDER BY year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_average FROM rural_projects WHERE region IN ('North', 'South', 'East', 'West');"}, {"query": "## sql context :\nCREATE TABLE individual (age INT, city TEXT, vaccination_status TEXT);\n\n## Query generation task:\nWhat is the average age of unvaccinated individuals in NYC?\n\n", "response": "SELECT AVG(age) FROM individual i WHERE i.city = 'NYC' AND i.vaccination_status = 'unvaccinated';"}, {"query": "## sql context :\nCREATE TABLE food_safety_inspections (restaurant_id INT, inspection_date DATE, result VARCHAR(10));\n\n## Query generation task:\nInsert a new food safety inspection record with a rating of 'Excellent' for 'Tasty Delights' on '2022-04-15' if it does not exist already.\n\n", "response": "INSERT INTO food_safety_inspections (restaurant_id, inspection_date, result) SELECT 6, '2022-04-15', 'Excellent' FROM (SELECT 1 FROM food_safety_inspections WHERE restaurant_id = 6 AND inspection_date = '2022-04-15') AS dummy WHERE NOT EXISTS (SELECT 1 FROM food_safety_inspections WHERE restaurant_id = 6 AND inspection_date = '2022-04-15');"}, {"query": "## sql context :\nCREATE TABLE field5 (id INT, moisture FLOAT); INSERT INTO field5 (id, moisture) VALUES (1, 78.2), (2, 82.1), (3, 79.3);\n\n## Query generation task:\nHow many times was the moisture level above 80% in 'field5'?\n\n", "response": "SELECT COUNT(*) FROM field5 WHERE moisture > 80;"}, {"query": "## sql context :\nCREATE TABLE Vehicle (id INT, name TEXT, is_autonomous BOOLEAN, is_electric BOOLEAN, city_traffic_speed FLOAT); CREATE TABLE SafetyTesting (id INT, vehicle_id INT); INSERT INTO Vehicle (id, name, is_autonomous, is_electric, city_traffic_speed) VALUES (1, 'Model S', false, true, 15.3), (2, 'Camry', false, false, 18.9), (3, 'Bolt', false, true, 13.2), (4, 'Tesla', true, false, 22.0); INSERT INTO SafetyTesting (id, vehicle_id) VALUES (1, 1), (2, 3), (4, 4);\n\n## Query generation task:\nWhat is the average city traffic speed of the non-autonomous vehicles that participated in safety testing?\n\n", "response": "SELECT AVG(Vehicle.city_traffic_speed) FROM Vehicle INNER JOIN SafetyTesting ON Vehicle.id = SafetyTesting.vehicle_id WHERE Vehicle.is_autonomous = false;"}, {"query": "## sql context :\nCREATE TABLE ArtsHeritage (SiteName VARCHAR(30), ArtType VARCHAR(20)); INSERT INTO ArtsHeritage VALUES ('Head-Smashed-In Buffalo Jump', 'Medicine Wheel'), ('Chichen Itza', 'Maya Dance'); CREATE TABLE HeritageSites (SiteName VARCHAR(30), Country VARCHAR(20)); INSERT INTO HeritageSites VALUES ('Head-Smashed-In Buffalo Jump', 'Canada'), ('Chichen Itza', 'Mexico');\n\n## Query generation task:\nShowcase the types of traditional arts performed at each heritage site.\n\n", "response": "SELECT h.SiteName, a.ArtType FROM HeritageSites h JOIN ArtsHeritage a ON h.SiteName = a.SiteName;"}, {"query": "## sql context :\nCREATE TABLE carbon_sequestration (id INT, location VARCHAR(255), trees_absorbed FLOAT, year INT); INSERT INTO carbon_sequestration (id, location, trees_absorbed, year) VALUES (1, 'Seattle, WA', 5000.0, 2020);\n\n## Query generation task:\nWhat is the average carbon sequestration for locations in the Pacific Northwest between 2019 and 2021?\n\n", "response": "SELECT location, AVG(trees_absorbed) FROM carbon_sequestration WHERE year BETWEEN 2019 AND 2021 AND location LIKE '%Pacific Northwest%' GROUP BY location;"}, {"query": "## sql context :\nCREATE TABLE Grants (GrantID INT, Sector TEXT, Amount DECIMAL);\n\n## Query generation task:\nFind the top 5 sectors based on the total amount of grants awarded?\n\n", "response": "SELECT Sector, SUM(Amount) OVER (PARTITION BY Sector ORDER BY SUM(Amount) DESC) AS TotalAmount, RANK() OVER (ORDER BY SUM(Amount) DESC) AS Rank FROM Grants GROUP BY Sector ORDER BY Rank;"}, {"query": "## sql context :\nCREATE TABLE well (well_id INT, well_name TEXT, shale_play TEXT, gas_production_2020 FLOAT); INSERT INTO well (well_id, well_name, shale_play, gas_production_2020) VALUES (1, 'Well A', 'Eagle Ford', 9000), (2, 'Well B', 'Eagle Ford', 11000), (3, 'Well C', 'Eagle Ford', 8000);\n\n## Query generation task:\nFind the well with the highest gas production in the Eagle Ford shale play in 2020?\n\n", "response": "SELECT well_name, MAX(gas_production_2020) as max_gas_production FROM well WHERE shale_play = 'Eagle Ford' GROUP BY well_name;"}, {"query": "## sql context :\nCREATE TABLE media_database (id INT, type VARCHAR(10), title VARCHAR(50), length FLOAT, source VARCHAR(50)); INSERT INTO media_database (id, type, title, length, source) VALUES (1, 'article', 'Sample NPR Article 1', 5.5, 'NPR'); INSERT INTO media_database (id, type, title, length, source) VALUES (2, 'podcast', 'Sample NPR Podcast 1', 35.2, 'NPR');\n\n## Query generation task:\nWhat are the articles and podcasts from 'NPR' in the 'media_database'?\n\n", "response": "SELECT * FROM media_database WHERE (type = 'article' OR type = 'podcast') AND source = 'NPR';"}, {"query": "## sql context :\nCREATE TABLE students_disabilities (id INT, student_id INT, university_type TEXT, disability_type TEXT); INSERT INTO students_disabilities (id, student_id, university_type, disability_type) VALUES (1, 1, 'Urban', 'Visual Impairment'), (2, 1, 'Urban', 'Learning Disability'), (3, 2, 'Suburban', 'Mobility Impairment'), (4, 3, 'Rural', 'Visual Impairment');\n\n## Query generation task:\nHow many students with disabilities are enrolled in each university type?\n\n", "response": "SELECT university_type, COUNT(DISTINCT student_id) FROM students_disabilities GROUP BY university_type;"}, {"query": "## sql context :\nCREATE TABLE MilitaryBases (id INT, name VARCHAR(255), location VARCHAR(255), country VARCHAR(255), base_type VARCHAR(255)); INSERT INTO MilitaryBases (id, name, location, country, base_type) VALUES (1, 'Camp Lemonnier', 'Djibouti, Africa', 'Djibouti', 'Air Base'), (2, 'Naval Base Rota', 'Spain, Europe', 'Spain', 'Naval Base'), (3, 'Camp Smith', 'Hawaii, USA', 'USA', 'Army Base');\n\n## Query generation task:\nWhat are the names and locations of military bases in Africa and their types?\n\n", "response": "SELECT SUM(CASE WHEN country = 'Djibouti' THEN 1 ELSE 0 END) as total_bases, STRING_AGG(name, ', ') as base_names, STRING_AGG(location, ', ') as base_locations, base_type FROM MilitaryBases WHERE country = 'Djibouti' GROUP BY base_type;"}, {"query": "## sql context :\nCREATE TABLE school_enrollment (student_id INT, district_id INT, school_id INT); INSERT INTO school_enrollment (student_id, district_id, school_id) VALUES (1, 101, 1001), (2, 101, 1002), (3, 102, 2001), (4, 102, 2002), (5, 103, 3001); CREATE TABLE school_districts (district_id INT, district_name TEXT); INSERT INTO school_districts (district_id, district_name) VALUES (101, 'District A'), (102, 'District B'), (103, 'District C'); CREATE VIEW district_enrollment AS SELECT d.district_name, COUNT(s.student_id) as enrollment FROM school_enrollment s JOIN school_districts d ON s.district_id = d.district_id GROUP BY d.district_name;\n\n## Query generation task:\nHow many students have enrolled in each district's schools?\n\n", "response": "SELECT district_name, enrollment FROM district_enrollment;"}, {"query": "## sql context :\nCREATE TABLE Concerts (id INT, title VARCHAR(255), location VARCHAR(255), viewers INT);\n\n## Query generation task:\nHow many viewers are from the United States for each music concert?\n\n", "response": "SELECT location, COUNT(*) as US_viewers FROM Concerts WHERE location LIKE '%United States%' GROUP BY location;"}, {"query": "## sql context :\nCREATE TABLE songs (id INT, title VARCHAR(255), artist VARCHAR(255), label VARCHAR(255), release_date DATE); INSERT INTO songs (id, title, artist, label, release_date) VALUES (1, 'Song1', 'Artist1', 'Label1', '2021-01-01'), (2, 'Song2', 'Artist2', 'Label2', '2021-02-01'), (3, 'Song3', 'Artist3', 'Label1', '2021-03-01');\n\n## Query generation task:\nHow many songs were released by each record label in 2021?\n\n", "response": "SELECT label, COUNT(*) as song_count FROM songs WHERE YEAR(release_date) = 2021 GROUP BY label;"}, {"query": "## sql context :\nCREATE TABLE rural_clinics (clinic_id INT, state VARCHAR(50), no_of_beds INT); INSERT INTO rural_clinics VALUES (1, 'Assam', 20), (2, 'Assam', 15), (3, 'Bihar', 10), (4, 'Bihar', 12); CREATE TABLE rural_hospitals (hospital_id INT, state VARCHAR(50), no_of_beds INT); INSERT INTO rural_hospitals VALUES (1, 'Assam', 500), (2, 'Assam', 600), (3, 'Bihar', 400), (4, 'Bihar', 450);\n\n## Query generation task:\nWhat is the average number of hospital beds per rural clinic in India, partitioned by state?\n\n", "response": "SELECT AVG(r.no_of_beds) as avg_beds FROM (SELECT state, no_of_beds, ROW_NUMBER() OVER (PARTITION BY state ORDER BY no_of_beds DESC) as clinic_rank FROM rural_clinics) r WHERE r.clinic_rank = 1;"}, {"query": "## sql context :\nCREATE TABLE ancient_cultures (id INT, culture VARCHAR(50)); CREATE TABLE ancient_artifacts (id INT, artifact_name VARCHAR(50), age INT, excavation_site VARCHAR(50), culture_id INT);\n\n## Query generation task:\nWhat is the age of the oldest artifact for each culture, grouped by excavation site?\n\n", "response": "SELECT excavation_site, MAX(age) OVER (PARTITION BY culture_id) as oldest_artifact_age FROM ancient_artifacts JOIN ancient_cultures ON ancient_artifacts.culture_id = ancient_cultures.id GROUP BY excavation_site, culture_id;"}, {"query": "## sql context :\nCREATE TABLE investments (company_id INT, funding_amount INT); INSERT INTO investments (company_id, funding_amount) VALUES (1, 5000000); INSERT INTO investments (company_id, funding_amount) VALUES (2, 3000000);\n\n## Query generation task:\nWhat is the total funding amount for startups with at least one female founder?\n\n", "response": "SELECT SUM(funding_amount) FROM investments JOIN companies ON investments.company_id = companies.id WHERE companies.founder_gender = 'female';"}, {"query": "## sql context :\nCREATE TABLE states (name VARCHAR(255), schools_count INT); CREATE TABLE schools (name VARCHAR(255), state VARCHAR(255), school_type VARCHAR(255)); INSERT INTO states (name) VALUES ('California'), ('Texas'), ('New York'), ('Florida'), ('Illinois'); INSERT INTO schools (name, state, school_type) VALUES ('School A', 'California', 'Public'), ('School B', 'California', 'Private'), ('School C', 'Texas', 'Public'), ('School D', 'Texas', 'Public');\n\n## Query generation task:\nWhat is the total number of public schools and private schools in each state?\n\n", "response": "SELECT state, SUM(school_type = 'Public') as public_schools, SUM(school_type = 'Private') as private_schools FROM schools GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE suppliers (id INT, supplier_name VARCHAR(50), total_supply INT); CREATE TABLE circular_supply_chain_products (id INT, product_id INT, supplier_id INT); INSERT INTO suppliers (id, supplier_name, total_supply) VALUES (1, 'GreenVest', 2000), (2, 'EcoFarms', 1500), (3, 'CircularWear', 1200); INSERT INTO circular_supply_chain_products (id, product_id, supplier_id) VALUES (1, 1, 1), (2, 2, 1), (3, 3, 2), (4, 4, 2), (5, 5, 3);\n\n## Query generation task:\nWhich suppliers have provided the most circular supply chain products to our retail business?\n\n", "response": "SELECT supplier_name, SUM(total_supply) FROM suppliers JOIN circular_supply_chain_products ON suppliers.id = circular_supply_chain_products.supplier_id GROUP BY supplier_name ORDER BY SUM(total_supply) DESC;"}, {"query": "## sql context :\nCREATE TABLE artworks (id INT, artist VARCHAR(100), collection VARCHAR(50), gender VARCHAR(10), artworks INT); INSERT INTO artworks (id, artist, collection, gender, artworks) VALUES (1, 'Marc', 'European Collection', 'Male', 5), (2, 'Nina', 'Asian Collection', 'Female', 10), (3, 'Oliver', 'European Collection', 'Male', 15);\n\n## Query generation task:\nWhat is the number of artworks created by male artists from Europe?\n\n", "response": "SELECT SUM(artworks) FROM artworks WHERE collection LIKE '%Europe%' AND gender = 'Male';"}, {"query": "## sql context :\nCREATE TABLE port (port_id INT, name TEXT, created_at DATETIME);CREATE TABLE ship_agent (ship_agent_id INT, port_id INT, name TEXT);CREATE TABLE container (container_id INT, ship_agent_id INT, weight INT, created_at DATETIME);INSERT INTO port VALUES (5, 'Rotterdam', '2022-01-01');\n\n## Query generation task:\nWhat is the total weight of containers handled per day by each ship agent in 'Rotterdam'?\n\n", "response": "SELECT ship_agent.name, SUM(container.weight) FROM ship_agent JOIN port ON ship_agent.port_id = port.port_id JOIN container ON ship_agent.ship_agent_id = container.ship_agent_id WHERE port.name = 'Rotterdam' GROUP BY ship_agent.name, DATE(container.created_at);"}, {"query": "## sql context :\nCREATE TABLE Regions (RegionID INT, RegionName VARCHAR(50));CREATE TABLE Products (ProductID INT, ProductName VARCHAR(50), Meat BOOLEAN, QuantitySold INT); INSERT INTO Regions VALUES (1, 'Northeast'), (2, 'Southeast'); INSERT INTO Products VALUES (1, 'Chicken Breast', true, 100), (2, 'Tofu', false, 150), (3, 'Ground Beef', true, 200), (4, 'Fish Fillet', true, 50);\n\n## Query generation task:\nWhat is the total quantity of meat products sold in each region?\n\n", "response": "SELECT r.RegionName, p.ProductName, SUM(p.QuantitySold) as TotalQuantitySold FROM Regions r JOIN Products p ON r.RegionID = 1 GROUP BY r.RegionName, p.ProductName HAVING p.Meat = true;"}, {"query": "## sql context :\nCREATE TABLE broadband_plans (id INT, name VARCHAR(50), price DECIMAL(5,2)); INSERT INTO broadband_plans (id, name, price) VALUES (1, 'PlanX', 60.00), (2, 'PlanY', 75.00); CREATE TABLE broadband_revenue (date DATE, plan_id INT, amount DECIMAL(5,2)); INSERT INTO broadband_revenue (date, plan_id, amount) VALUES ('2022-01-01', 1, 300.00), ('2022-01-01', 2, 450.00);\n\n## Query generation task:\nWhat is the total revenue for the broadband plans in the last month?\n\n", "response": "SELECT bp.name, SUM(br.amount) as total_revenue FROM broadband_plans bp INNER JOIN broadband_revenue br ON bp.id = br.plan_id WHERE br.date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY bp.name;"}, {"query": "## sql context :\nCREATE TABLE Policyholders (PolicyholderID INT, LastClaimDate DATE); CREATE TABLE Claims (ClaimID INT, PolicyholderID INT, ClaimDate DATE); INSERT INTO Policyholders (PolicyholderID, LastClaimDate) VALUES (1, '2021-02-01'), (2, '2022-02-15'), (3, NULL); INSERT INTO Claims (ClaimID, PolicyholderID, ClaimDate) VALUES (1, 1, '2022-01-01'), (2, 1, '2022-01-15'), (3, 2, '2022-02-10');\n\n## Query generation task:\nList all policyholders who have filed multiple claims in the last 365 days.\n\n", "response": "SELECT Policyholders.PolicyholderID, Policyholders.LastClaimDate, COUNT(Claims.ClaimID) AS NumberOfClaims FROM Policyholders LEFT JOIN Claims ON Policyholders.PolicyholderID = Claims.PolicyholderID WHERE Claims.ClaimDate BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) AND CURRENT_DATE() GROUP BY Policyholders.PolicyholderID HAVING COUNT(Claims.ClaimID) > 1;"}, {"query": "## sql context :\nCREATE TABLE player_demographics (player_id INT PRIMARY KEY, age INT, gender VARCHAR(10), location VARCHAR(50));\n\n## Query generation task:\nCreate a table for player demographics\n\n", "response": "CREATE TABLE player_demographics_new AS SELECT * FROM player_demographics WHERE 1=2;"}, {"query": "## sql context :\nCREATE TABLE vulnerabilities (id INT, severity TEXT, source TEXT, reported_date DATE); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (1, 'high', 'external', '2021-10-05'); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (2, 'medium', 'internal', '2021-10-07'); INSERT INTO vulnerabilities (id, severity, source, reported_date) VALUES (3, 'high', 'external', '2021-11-02');\n\n## Query generation task:\nWhat is the total number of high severity vulnerabilities reported by external sources in the last month?\n\n", "response": "SELECT COUNT(*) FROM vulnerabilities WHERE severity = 'high' AND reported_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND source = 'external';"}, {"query": "## sql context :\nCREATE TABLE oil_production (well_id INT, year INT, oil_volume FLOAT);\n\n## Query generation task:\nCalculate the total oil production for the year 2020 from the 'oil_production' table\n\n", "response": "SELECT SUM(oil_volume) FROM oil_production WHERE year = 2020;"}, {"query": "## sql context :\nCREATE TABLE Routes (RouteID int, RouteName varchar(255), Region varchar(255)); INSERT INTO Routes (RouteID, RouteName, Region) VALUES (1, 'North', 'East'), (2, 'South', 'Central'), (3, 'West', 'West'), (4, 'Red Line', 'East'); CREATE TABLE Trips (TripID int, RouteID int, Passengers int, TripDateTime datetime); CREATE TABLE PeakHours (PeakHourID int, StartTime time, EndTime time); INSERT INTO PeakHours (PeakHourID, StartTime, EndTime) VALUES (1, '06:00', '09:00'), (2, '16:00', '19:00');\n\n## Query generation task:\nWhat is the average number of passengers per trip for the 'Red Line' route during non-peak hours?\n\n", "response": "SELECT AVG(Passengers) FROM Routes JOIN Trips ON Routes.RouteID = Trips.RouteID JOIN PeakHours ON Trips.TripDateTime BETWEEN PeakHours.StartTime AND PeakHours.EndTime WHERE Routes.RouteName = 'Red Line' AND NOT (PeakHours.StartTime BETWEEN '06:00' AND '09:00' OR PeakHours.StartTime BETWEEN '16:00' AND '19:00');"}, {"query": "## sql context :\nCREATE TABLE SafetyIncidents (IncidentID INT, PlantID INT, IncidentDate DATE); INSERT INTO SafetyIncidents (IncidentID, PlantID, IncidentDate) VALUES (1, 101, '2020-06-15'), (2, 102, '2020-07-22'), (3, 101, '2021-02-03'), (4, 103, '2021-04-10'); CREATE TABLE ManufacturingPlants (PlantID INT, PlantLocation VARCHAR(50)); INSERT INTO ManufacturingPlants (PlantID, PlantLocation) VALUES (101, 'London'), (102, 'Paris'), (103, 'Berlin');\n\n## Query generation task:\nIdentify the average safety incident rate per manufacturing plant in Europe in the past 12 months.\n\n", "response": "SELECT AVG(COUNT(DISTINCT PlantID)) AS AvgSafetyIncidentRate FROM SafetyIncidents JOIN ManufacturingPlants ON SafetyIncidents.PlantID = ManufacturingPlants.PlantID WHERE IncidentDate >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH) GROUP BY PlantLocation;"}, {"query": "## sql context :\nCREATE TABLE space_programs (program_id INT PRIMARY KEY, country VARCHAR(50), year INT, cost FLOAT); INSERT INTO space_programs (program_id, country, year, cost) VALUES (1, 'USA', 2020, 60000000000), (2, 'China', 2019, 12000000000), (3, 'Russia', 2021, 8000000000), (4, 'USA', 2019, 55000000000), (5, 'India', 2020, 2500000000);\n\n## Query generation task:\nWhat is the total cost of each country's space program?\n\n", "response": "SELECT country, SUM(cost) AS total_cost FROM space_programs GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE inventory (id INT, ingredient_id INT, quantity INT); INSERT INTO inventory (id, ingredient_id, quantity) VALUES (1, 1, 50), (2, 2, 200), (3, 3, 100), (4, 4, 250);\n\n## Query generation task:\nFind the maximum quantity of any ingredient\n\n", "response": "SELECT MAX(quantity) FROM inventory;"}, {"query": "## sql context :\nCREATE TABLE mines (id INT, name VARCHAR(255), location VARCHAR(255), water_consumption INT); INSERT INTO mines (id, name, location, water_consumption) VALUES (1, 'Mine A', 'USA', 500000), (2, 'Mine B', 'Canada', 600000), (3, 'Mine C', 'USA', 400000), (4, 'Mine D', 'USA', 450000);\n\n## Query generation task:\nCalculate the average water consumption by mine for the mining company.\n\n", "response": "SELECT AVG(m.water_consumption) as avg_water_consumption FROM mines m;"}, {"query": "## sql context :\nCREATE TABLE crops_year (id INT, name VARCHAR(50), year INT, production INT); INSERT INTO crops_year (id, name, year, production) VALUES (1, 'Rice', 2020, 5000), (2, 'Wheat', 2020, 7000), (3, 'Soybean', 2020, 3000), (4, 'Barley', 2020, 4000), (5, 'Rice', 2019, 6000), (6, 'Wheat', 2019, 8000), (7, 'Soybean', 2019, 4000), (8, 'Barley', 2019, 5000);\n\n## Query generation task:\nWhat is the average production of crops by year?\n\n", "response": "SELECT year, AVG(production) as avg_production FROM crops_year GROUP BY year;"}, {"query": "## sql context :\nCREATE TABLE Creative_AI (app_name TEXT, explainability_score INT); INSERT INTO Creative_AI (app_name, explainability_score) VALUES ('AI Painter', 75), ('AI Poet', 82), ('AI Music Composer', 78);\n\n## Query generation task:\nWhich creative AI applications have a higher explainability score than the average explainability score for all creative AI applications?\n\n", "response": "SELECT app_name FROM Creative_AI WHERE explainability_score > (SELECT AVG(explainability_score) FROM Creative_AI);"}, {"query": "## sql context :\nCREATE TABLE MarketingBudget (title VARCHAR(255), genre VARCHAR(255), quarter INT, budget FLOAT); INSERT INTO MarketingBudget (title, genre, quarter, budget) VALUES ('Movie1', 'Action', 1, 100000), ('TVShow1', 'Comedy', 2, 150000), ('Movie2', 'Drama', 3, 120000), ('TVShow2', 'Action', 4, 140000), ('Movie3', 'Comedy', 1, 90000);\n\n## Query generation task:\nWhat was the total marketing budget for movies and TV shows, by genre and quarter?\n\n", "response": "SELECT genre, quarter, SUM(budget) FROM MarketingBudget GROUP BY genre, quarter;"}, {"query": "## sql context :\nCREATE TABLE PlayerScores (PlayerID INT, GameID INT, HighScore INT); INSERT INTO PlayerScores (PlayerID, GameID, HighScore) VALUES (1, 1, 1000), (2, 2, 2000), (3, 1, 1500), (4, 3, 2500), (5, 2, 2200), (6, 1, 3000), (7, 4, 3500), (8, 3, 3000), (9, 2, 3300), (10, 5, 4000);   CREATE TABLE GameGenres (GameID INT, Genre VARCHAR(50)); INSERT INTO GameGenres (GameID, Genre) VALUES (1, 'Action'), (2, 'Strategy'), (3, 'RPG'), (4, 'Simulation'), (5, 'Puzzle');\n\n## Query generation task:\nWhat is the number of players who have achieved a high score in each game genre?\n\n", "response": "SELECT Genre, COUNT(*) as PlayerCount FROM PlayerScores INNER JOIN GameGenres ON PlayerScores.GameID = GameGenres.GameID WHERE HighScore >= (SELECT AVG(HighScore) FROM PlayerScores) GROUP BY Genre;"}, {"query": "## sql context :\nCREATE TABLE Spacecrafts (Sid INT, Name VARCHAR, Manufacturer VARCHAR, Launch_Date DATE, Status VARCHAR);\n\n## Query generation task:\nAdd a new spacecraft to the Spacecrafts table.\n\n", "response": "WITH new_spacecraft AS (VALUES (1, 'New Horizons 2', 'NASA', '2025-01-01', 'Active')) INSERT INTO Spacecrafts (Sid, Name, Manufacturer, Launch_Date, Status) SELECT * FROM new_spacecraft;"}, {"query": "## sql context :\nCREATE TABLE west_providers (region VARCHAR(255), provider VARCHAR(255)); INSERT INTO west_providers (region, provider) VALUES ('Western', 'General Practitioner'); INSERT INTO west_providers (region, provider) VALUES ('Western', 'Nurse Practitioner'); CREATE TABLE southeast_providers (region VARCHAR(255), provider VARCHAR(255)); INSERT INTO southeast_providers (region, provider) VALUES ('Southeast', 'Community Health Worker'); INSERT INTO southeast_providers (region, provider) VALUES ('Southeast', 'Public Health Nurse');\n\n## Query generation task:\nShow the total number of healthcare providers in the Western and Southeast Asian regions.\n\n", "response": "SELECT COUNT(*) FROM west_providers UNION ALL SELECT COUNT(*) FROM southeast_providers;"}, {"query": "## sql context :\nCREATE TABLE CyberSecurityIncidents (id INT PRIMARY KEY, name VARCHAR(50), type VARCHAR(50), year INT); INSERT INTO CyberSecurityIncidents (id, name, type, year) VALUES (1, 'Heartbleed', 'Vulnerability', 2014); INSERT INTO CyberSecurityIncidents (id, name, type, year) VALUES (2, 'WannaCry', 'Ransomware', 2017);\n\n## Query generation task:\nHow many cyber security incidents of each type occurred, with more than one incident?\n\n", "response": "SELECT type, COUNT(*) FROM CyberSecurityIncidents GROUP BY type HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC;"}, {"query": "## sql context :\nCREATE TABLE Events (EventID INT, Name VARCHAR(100), Country VARCHAR(50), Participants INT, Genre VARCHAR(50)); INSERT INTO Events (EventID, Name, Country, Participants, Genre) VALUES (1, 'Event1', 'USA', 500, 'Action'), (2, 'Event2', 'Canada', 400, 'Adventure'), (3, 'Event3', 'England', 600, 'Simulation'), (4, 'Event4', 'France', 300, 'Strategy');\n\n## Query generation task:\nList the unique game genres for esports events.\n\n", "response": "SELECT DISTINCT Genre FROM Events;"}, {"query": "## sql context :\nCREATE TABLE carbon_sequestration (id INT, continent VARCHAR(255), site_name VARCHAR(255), area FLOAT); INSERT INTO carbon_sequestration (id, continent, site_name, area) VALUES (1, 'North America', 'Site E', 30000.0), (2, 'North America', 'Site F', 40000.0), (3, 'South America', 'Site G', 50000.0), (4, 'South America', 'Site H', 60000.0);\n\n## Query generation task:\nWhat is the average area of carbon sequestration sites in each continent, in hectares?\n\n", "response": "SELECT continent, AVG(area) FROM carbon_sequestration GROUP BY continent;"}, {"query": "## sql context :\nCREATE TABLE if not exists carbon_offsets (initiative_id INT, initiative_name VARCHAR(255), location VARCHAR(255), offset_amount INT);\n\n## Query generation task:\nHow many carbon offset initiatives are there in total in the 'carbon_offsets' table?\n\n", "response": "SELECT COUNT(*) FROM carbon_offsets WHERE offset_amount IS NOT NULL;"}, {"query": "## sql context :\nCREATE TABLE donors (id INT, name TEXT, country TEXT, amount_donated DECIMAL(10,2));\n\n## Query generation task:\nWhat is the total amount donated by donors from the US?\n\n", "response": "SELECT SUM(amount_donated) FROM donors WHERE country = 'US';"}, {"query": "## sql context :\nCREATE TABLE labor_productivity (mine_type VARCHAR(20), region VARCHAR(20), productivity FLOAT); INSERT INTO labor_productivity (mine_type, region, productivity) VALUES ('Coal', 'North', 2.8), ('Coal', 'North', 2.9), ('Coal', 'South', 3.1), ('Coal', 'South', 3.0), ('Gold', 'North', 3.4), ('Gold', 'South', 3.6);\n\n## Query generation task:\nCompare labor productivity in coal mines between the Northern and Southern regions.\n\n", "response": "SELECT region, AVG(productivity) FROM labor_productivity WHERE mine_type = 'Coal' GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founders_lgbtq BOOLEAN, funding FLOAT);\n\n## Query generation task:\nWhat is the total funding received by companies founded by people who identify as LGBTQ+ in the biotech sector?\n\n", "response": "SELECT SUM(funding) FROM companies WHERE founders_lgbtq = true AND industry = 'biotech';"}, {"query": "## sql context :\nCREATE TABLE Donors (donor_id INT, donation_amount INT, continent VARCHAR(50)); INSERT INTO Donors (donor_id, donation_amount, continent) VALUES (13, 30, 'Europe'), (14, 80, 'Asia'), (15, 50, 'Africa');\n\n## Query generation task:\nWhat is the average donation amount by continent?\n\n", "response": "SELECT continent, AVG(donation_amount) FROM Donors GROUP BY continent;"}, {"query": "## sql context :\nCREATE TABLE Budget (id INT, department VARCHAR(50), category VARCHAR(50), amount FLOAT, budget_date DATE); INSERT INTO Budget (id, department, category, amount, budget_date) VALUES (1, 'Operations', 'Salaries', 50000, '2019-01-01'); INSERT INTO Budget (id, department, category, amount, budget_date) VALUES (2, 'Marketing', 'Advertising', 30000, '2019-02-01');\n\n## Query generation task:\nWhat was the budget for each department in 2019?\n\n", "response": "SELECT department, SUM(amount) as total_budget FROM Budget WHERE YEAR(budget_date) = 2019 GROUP BY department;"}, {"query": "## sql context :\nCREATE TABLE Hospitals (ID INT, Name VARCHAR(100), State VARCHAR(50)); INSERT INTO Hospitals (ID, Name, State) VALUES (1, 'MD Anderson Cancer Center', 'Texas'), (2, 'Baylor University Medical Center', 'Texas');\n\n## Query generation task:\nHow many hospitals are there in the state of Texas?\n\n", "response": "SELECT COUNT(*) FROM Hospitals WHERE State = 'Texas';"}, {"query": "## sql context :\nCREATE TABLE donors (donor_id INT PRIMARY KEY, donation_amount DECIMAL(10, 2), donation_date DATE, first_donation_date DATE); INSERT INTO donors (donor_id, donation_amount, donation_date, first_donation_date) VALUES (1, 250, '2021-01-01', '2020-01-01'), (2, 750, '2021-01-03', '2019-01-01'), (3, 900, '2021-02-05', '2021-01-01'), (4, 400, '2021-03-01', '2020-01-01');\n\n## Query generation task:\nWhat is the minimum donation amount in the year 2021 from donors who have donated more than twice?\n\n", "response": "SELECT MIN(donation_amount) FROM donors WHERE YEAR(donation_date) = 2021 AND donor_id IN (SELECT donor_id FROM donors GROUP BY donor_id HAVING COUNT(*) > 2);"}, {"query": "## sql context :\nCREATE TABLE cases (case_id INT, category VARCHAR(20), billing_amount DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the maximum billing amount for cases in the civil law category?\n\n", "response": "SELECT MAX(billing_amount) FROM cases WHERE category = 'civil';"}, {"query": "## sql context :\nCREATE TABLE Exhibitions (id INT, city VARCHAR(50), visitors INT, exhibition_type VARCHAR(50)); INSERT INTO Exhibitions (id, city, visitors, exhibition_type) VALUES (1, 'Tokyo', 4000, 'temporary');\n\n## Query generation task:\nWhat is the maximum number of visitors to temporary exhibitions in Tokyo?\n\n", "response": "SELECT MAX(visitors) FROM Exhibitions WHERE city = 'Tokyo' AND exhibition_type = 'temporary';"}, {"query": "## sql context :\nCREATE TABLE DP_Articles(id INT, title VARCHAR(50), publication DATE, category VARCHAR(20));CREATE TABLE SFC_Articles(id INT, title VARCHAR(50), publication DATE, category VARCHAR(20));\n\n## Query generation task:\nIdentify the number of articles published daily in 'Denver Post' and 'San Francisco Chronicle' for the month of July 2022, excluding weekends.\n\n", "response": "SELECT CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END AS DayType, COUNT(*) FROM DP_Articles WHERE publication BETWEEN '2022-07-01' AND '2022-07-31' AND DATEPART(dw, publication) NOT IN (1,7) GROUP BY CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END UNION ALL SELECT CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END AS DayType, COUNT(*) FROM SFC_Articles WHERE publication BETWEEN '2022-07-01' AND '2022-07-31' AND DATEPART(dw, publication) NOT IN (1,7) GROUP BY CASE WHEN DATEPART(dw, publication) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END;"}, {"query": "## sql context :\nCREATE TABLE teams (team_id INT, team_name VARCHAR(50)); INSERT INTO teams (team_id, team_name) VALUES (1, 'Celtics'); CREATE TABLE games (game_id INT, home_team_id INT, away_team_id INT, home_team_score INT, away_team_score INT, home_team_three_point INT, away_team_three_point INT); INSERT INTO games (game_id, home_team_id, away_team_id, home_team_score, away_team_score, home_team_three_point, away_team_three_point) VALUES (1, 1, 2, 100, 90, 12, 10), (2, 2, 1, 80, 85, 15, 11), (3, 1, 3, 110, 105, 13, 14), (4, 4, 1, 70, 75, 9, 12);\n\n## Query generation task:\nWho has the highest number of three-point field goals for the Celtics?\n\n", "response": "SELECT home_team_three_point, away_team_three_point, (home_team_three_point + away_team_three_point) as total_three_point FROM games WHERE home_team_id = (SELECT team_id FROM teams WHERE team_name = 'Celtics') OR away_team_id = (SELECT team_id FROM teams WHERE team_name = 'Celtics') ORDER BY total_three_point DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE Roads (ID INT, Name VARCHAR(50), Location VARCHAR(50), DateAdded DATE); INSERT INTO Roads (ID, Name, Location, DateAdded) VALUES (1, 'Highway 1', 'San Francisco, CA', '1937-05-27'); INSERT INTO Roads (ID, Name, Location, DateAdded) VALUES (2, 'Country Road 32', 'Gravel', '1967-03-21');\n\n## Query generation task:\nInsert a new record into the 'Roads' table for a road named 'Rainbow Road' with an ID of 4, located in 'Auckland, New Zealand', and added on '1985-07-20'.\n\n", "response": "INSERT INTO Roads (ID, Name, Location, DateAdded) VALUES (4, 'Rainbow Road', 'Auckland, New Zealand', '1985-07-20');"}, {"query": "## sql context :\nCREATE TABLE treatments (id INT, patient_id INT, approach TEXT); CREATE TABLE conditions (id INT, name TEXT); INSERT INTO conditions (id, name) VALUES (1, 'Depression');\n\n## Query generation task:\nWhat is the most common treatment approach for depression?\n\n", "response": "SELECT approach, COUNT(*) as count FROM treatments JOIN conditions ON treatments.approach = conditions.name WHERE conditions.id = 1 GROUP BY approach ORDER BY count DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE shariah_financing(client_id INT, country VARCHAR(25), amount FLOAT);INSERT INTO shariah_financing(client_id, country, amount) VALUES (1, 'Malaysia', 5000), (2, 'UAE', 7000), (3, 'Indonesia', 6000), (4, 'Saudi Arabia', 8000), (5, 'Malaysia', 9000), (6, 'UAE', 10000), (7, 'Indonesia', 11000), (8, 'Saudi Arabia', 12000), (9, 'Malaysia', 13000), (10, 'UAE', 14000);\n\n## Query generation task:\nWhat is the total amount of Shariah-compliant financing for clients in the top 3 countries with the most Shariah-compliant financing?\n\n", "response": "SELECT country, SUM(amount) as total_financing FROM shariah_financing WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY SUM(amount) DESC) as rank FROM shariah_financing GROUP BY country) WHERE rank <= 3) GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE articles_es (id INT, title VARCHAR(100), publication_date DATE, publisher VARCHAR(50), language VARCHAR(50)); INSERT INTO articles_es (id, title, publication_date, publisher, language) VALUES (1, 'Article1', '2019-01-01', 'El Pa\u00eds', 'Spanish'), (2, 'Article2', '2020-02-01', 'El Pa\u00eds', 'Spanish'), (3, 'Article3', '2021-03-01', 'El Pa\u00eds', 'Spanish');\n\n## Query generation task:\nWhat is the total number of articles published in Spanish by El Pa\u00eds in 2019 and 2020?\n\n", "response": "SELECT COUNT(*) FROM articles_es WHERE publication_date BETWEEN '2019-01-01' AND '2020-12-31' AND publisher = 'El Pa\u00eds' AND language = 'Spanish';"}, {"query": "## sql context :\nCREATE TABLE TV_Shows (show_id INT, title TEXT, country TEXT, seasons INT); INSERT INTO TV_Shows (show_id, title, country, seasons) VALUES (1, 'ShowC', 'USA', 8), (2, 'ShowD', 'Canada', 12);\n\n## Query generation task:\nHow many TV shows were produced in Canada and have more than 10 seasons?\n\n", "response": "SELECT COUNT(*) FROM TV_Shows WHERE country = 'Canada' AND seasons > 10;"}, {"query": "## sql context :\nCREATE TABLE project_info (id INT, name VARCHAR(50), category VARCHAR(50), cost INT); INSERT INTO project_info (id, name, category, cost) VALUES (1, 'Test1', 'Dam Construction', 5000000);\n\n## Query generation task:\nShow the 5 most expensive projects in 'Dam Construction'.\n\n", "response": "SELECT * FROM (SELECT * FROM project_info WHERE category = 'Dam Construction' ORDER BY cost DESC) subquery LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE london_buses (bus_id INT, daily_distance FLOAT, date DATE);\n\n## Query generation task:\nWhat is the total distance traveled for all buses in the London transit system on a given day?\n\n", "response": "SELECT SUM(daily_distance) FROM london_buses WHERE date = '2022-03-01';"}, {"query": "## sql context :\nCREATE TABLE PlayerGameHistory (PlayerGameID INT, PlayerID INT, GameID INT, PlayDate DATE, Platform VARCHAR(10)); INSERT INTO PlayerGameHistory (PlayerGameID, PlayerID, GameID, PlayDate, Platform) VALUES (1, 1, 1, '2022-02-01', 'PC'); INSERT INTO PlayerGameHistory (PlayerGameID, PlayerID, GameID, PlayDate, Platform) VALUES (2, 2, 2, '2022-02-05', 'Console');\n\n## Query generation task:\nHow many players have played a game in the past week, partitioned by platform?\n\n", "response": "SELECT Platform, COUNT(DISTINCT PlayerID) as PlayersLastWeek FROM PlayerGameHistory WHERE PlayDate >= '2022-02-01' GROUP BY Platform"}, {"query": "## sql context :\nCREATE TABLE ai_systems (system_id INT, system_name VARCHAR(50), country VARCHAR(50)); INSERT INTO ai_systems (system_id, system_name, country) VALUES (1, 'AISystem1', 'USA'), (2, 'AISystem2', 'Canada'), (3, 'AISystem3', 'Mexico'), (4, 'AISystem4', 'Brazil'); CREATE TABLE fairness_reports (report_id INT, system_id INT, issue_count INT); INSERT INTO fairness_reports (report_id, system_id, issue_count) VALUES (1, 1, 5), (2, 2, 3), (3, 3, 7), (4, 4, 2);\n\n## Query generation task:\nHow many algorithmic fairness issues have been reported for AI systems operating in the US, ordered by the number of issues in descending order?\n\n", "response": "SELECT a.system_name, SUM(fr.issue_count) as total_issues FROM ai_systems a JOIN fairness_reports fr ON a.system_id = fr.system_id WHERE a.country = 'USA' GROUP BY a.system_name ORDER BY total_issues DESC;"}, {"query": "## sql context :\nCREATE TABLE CaribbeanSea (species_name TEXT, population INT); INSERT INTO CaribbeanSea (species_name, population) VALUES ('Manatee', 6500), ('Coral', 50000);\n\n## Query generation task:\nHow many marine species are in the Caribbean Sea?\n\n", "response": "SELECT COUNT(species_name) FROM CaribbeanSea WHERE species_name != 'Coral';"}, {"query": "## sql context :\nCREATE TABLE community_development (id INT, initiative_name VARCHAR(50), number_of_participants INT); INSERT INTO community_development VALUES (1, 'Youth Skills Training', 100), (2, 'Women Empowerment', 120), (3, 'Elderly Care', 80), (4, 'Environmental Conservation', 150), (5, 'Cultural Preservation', 110);\n\n## Query generation task:\nWhat is the name of the community development initiative with the most participants in the 'community_development' table?;\n\n", "response": "SELECT initiative_name FROM community_development WHERE number_of_participants = (SELECT MAX(number_of_participants) FROM community_development);"}, {"query": "## sql context :\nCREATE TABLE community_health_workers (id INT, name VARCHAR(50), language VARCHAR(50)); INSERT INTO community_health_workers (id, name, language) VALUES (1, 'Juan Garcia', 'Spanish'), (2, 'James Smith', 'English'), (3, 'Sophia Nguyen', 'Vietnamese');\n\n## Query generation task:\nWhat is the count of community health workers by their language preference?\n\n", "response": "SELECT language, COUNT(*) as count FROM community_health_workers GROUP BY language;"}, {"query": "## sql context :\nCREATE TABLE machines(id INT, name TEXT, department TEXT, last_maintenance DATE, next_maintenance DATE);INSERT INTO machines(id, name, department, last_maintenance, next_maintenance) VALUES (1, 'Machine A', 'Renewable Energy', '2021-09-01', '2021-11-05'), (2, 'Machine B', 'Renewable Energy', '2021-08-15', '2022-01-03'), (3, 'Machine C', 'Mechanical Engineering', '2021-10-01', '2021-12-05'), (4, 'Machine D', 'Electrical Engineering', '2021-07-01', '2021-09-30');\n\n## Query generation task:\nHow many machines in the renewable energy department need maintenance in the upcoming week?\n\n", "response": "SELECT department, COUNT(*) as machines_need_maintenance FROM machines WHERE next_maintenance <= DATE_ADD(CURRENT_DATE, INTERVAL 1 WEEK) AND department = 'Renewable Energy' GROUP BY department;"}, {"query": "## sql context :\nCREATE TABLE students (student_id INT, enrollment_date DATE, underrepresented_community INT); INSERT INTO students (student_id, enrollment_date, underrepresented_community) VALUES (1, '2018-09-01', 1), (2, '2019-01-15', 0), (3, '2020-06-01', 1), (4, '2021-02-28', 0), (5, '2018-12-31', 1); CREATE TABLE programs (program_id INT, program_type VARCHAR(20)); INSERT INTO programs (program_id, program_type) VALUES (1, 'Lifelong Learning'), (2, 'Short Course'), (3, 'Workshop'), (4, 'Certification'), (5, 'Degree Program');\n\n## Query generation task:\nHow many students from underrepresented communities have enrolled in lifelong learning programs since 2018?\n\n", "response": "SELECT COUNT(*) FROM students WHERE underrepresented_community = 1 AND enrollment_date >= '2018-01-01' AND program_id IN (SELECT program_id FROM programs WHERE program_type = 'Lifelong Learning');"}, {"query": "## sql context :\nCREATE TABLE Meals (meal_id INT, meal_name TEXT, country_id INT, caloric_content FLOAT); CREATE TABLE Countries (country_id INT, country_name TEXT);\n\n## Query generation task:\nWhat is the average caloric content of meals in each country, sorted by the highest average?\n\n", "response": "SELECT Countries.country_name, AVG(Meals.caloric_content) as avg_caloric_content FROM Meals INNER JOIN Countries ON Meals.country_id = Countries.country_id GROUP BY Countries.country_name ORDER BY avg_caloric_content DESC;"}, {"query": "## sql context :\nCREATE TABLE employee_demographics (id INT PRIMARY KEY, employee_id INT, name VARCHAR(255), department VARCHAR(255), region VARCHAR(255)); INSERT INTO employee_demographics (id, employee_id, name, department, region) VALUES (1, 101, 'Jamal Johnson', 'Marketing', 'Northwest'), (2, 102, 'Sofia Garcia', 'IT', 'Northeast');\n\n## Query generation task:\nShow the number of employees in each region from 'employee_demographics'\n\n", "response": "SELECT region, COUNT(*) FROM employee_demographics GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE Feedback (Year INT, Type VARCHAR(20), Records INT); INSERT INTO Feedback (Year, Type, Records) VALUES (2022, 'Online', 12000), (2022, 'In-Person', 8000), (2022, 'Phone', 5000);\n\n## Query generation task:\nWhat was the total number of citizen feedback records received in 2022, grouped by feedback type?\n\n", "response": "SELECT Type, SUM(Records) FROM Feedback WHERE Year = 2022 GROUP BY Type;"}, {"query": "## sql context :\nCREATE TABLE design_standards (id INT, structure_type VARCHAR(255), load_capacity_tonnes FLOAT); INSERT INTO design_standards (id, structure_type, load_capacity_tonnes) VALUES (1, 'Building', 500.0), (2, 'Bridge', 800.0), (3, 'Tunnel', 600.0);\n\n## Query generation task:\nWhat is the highest design standard for building load capacity in tonnes?\n\n", "response": "SELECT MAX(load_capacity_tonnes) FROM design_standards WHERE structure_type = 'Building';"}, {"query": "## sql context :\nCREATE TABLE FabricInventory (InventoryID INT, ItemID INT, FabricType TEXT, Quantity INT); INSERT INTO FabricInventory (InventoryID, ItemID, FabricType, Quantity) VALUES (1, 1, 'Organic Cotton', 3), (2, 1, 'Hemp', 2), (3, 2, 'Recycled Polyester', 4), (4, 3, 'Organic Cotton', 5), (5, 4, 'Tencel', 6), (6, 5, 'Conventional Cotton', 7), (7, 6, 'Organic Cotton', 8), (8, 6, 'Hemp', 3), (9, 7, 'Recycled Polyester', 9); CREATE TABLE ClothingItems (ItemID INT, ItemName TEXT, ProductionDate DATE, Sustainable BOOLEAN); INSERT INTO ClothingItems (ItemID, ItemName, ProductionDate, Sustainable) VALUES (1, 'Organic Cotton Dress', '2021-01-01', true), (2, 'Recycled Polyester Skirt', '2021-02-01', true), (3, 'Organic Cotton Pants', '2021-03-01', true), (4, 'Tencel Jacket', '2021-04-01', true), (5, 'Conventional Cotton Shirt', '2021-05-01', false), (6, 'Sustainable Denim Jeans', '2021-06-01', true);\n\n## Query generation task:\nWhat is the total quantity of each fabric type used in the production of sustainable clothing items in 2021?\n\n", "response": "SELECT FabricType, SUM(Quantity) as TotalQuantity FROM FabricInventory JOIN ClothingItems ON FabricInventory.ItemID = ClothingItems.ItemID WHERE ProductionDate BETWEEN '2021-01-01' AND '2021-12-31' AND Sustainable = true GROUP BY FabricType;"}, {"query": "## sql context :\nCREATE TABLE products (product_id INT, product_name TEXT, price DECIMAL, country_of_origin TEXT); INSERT INTO products (product_id, product_name, price, country_of_origin) VALUES (1, 'T-Shirt', 20, 'USA'), (2, 'Jeans', 50, 'Italy');\n\n## Query generation task:\nWhat is the average product price for items produced in the USA?\n\n", "response": "SELECT AVG(price) FROM products WHERE country_of_origin = 'USA';"}, {"query": "## sql context :\nCREATE TABLE DysprosiumProduction (Company VARCHAR(50), Year INT, Production FLOAT); INSERT INTO DysprosiumProduction(Company, Year, Production) VALUES ('CompanyA', 2018, 75.3), ('CompanyA', 2019, 82.7), ('CompanyA', 2020, 90.1), ('CompanyB', 2018, 63.9), ('CompanyB', 2019, 68.1), ('CompanyB', 2020, 73.8), ('CompanyC', 2018, 86.4), ('CompanyC', 2019, 88.2), ('CompanyC', 2020, 89.6);\n\n## Query generation task:\nIdentify companies that had a continuous increase in dysprosium production from 2018 to 2020.\n\n", "response": "SELECT Company FROM (SELECT Company, Production, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Year) as rn, LAG(Production) OVER (PARTITION BY Company ORDER BY Year) as prev_prod FROM DysprosiumProduction) t WHERE rn > 1 AND prev_prod < Production GROUP BY Company HAVING COUNT(*) = 3;"}, {"query": "## sql context :\nCREATE TABLE research (name TEXT, budget FLOAT); INSERT INTO research (name, budget) VALUES ('ResearchA', 7000000), ('ResearchB', 9000000), ('ResearchC', 6000000);\n\n## Query generation task:\nWhich genetic research has a budget greater than $8M?\n\n", "response": "SELECT name FROM research WHERE budget > 8000000;"}, {"query": "## sql context :\nCREATE TABLE mediterranean_salinity (year INT, salinity FLOAT); INSERT INTO mediterranean_salinity (year, salinity) VALUES (2012, 38.4), (2013, 38.3), (2014, 38.5), (2015, 38.6), (2016, 38.7), (2017, 38.8), (2018, 38.9), (2019, 39.0), (2020, 39.1), (2021, 39.2);\n\n## Query generation task:\nWhat is the average water salinity in the Mediterranean Sea for the past decade?\n\n", "response": "SELECT AVG(salinity) FROM mediterranean_salinity WHERE year BETWEEN (SELECT EXTRACT(YEAR FROM NOW()) - 10) AND EXTRACT(YEAR FROM NOW());"}, {"query": "## sql context :\nCREATE TABLE Cities (CityID INT, CityName VARCHAR(50), WasteGeneration FLOAT); INSERT INTO Cities VALUES (1, 'CityA', 1200), (2, 'CityB', 1800), (3, 'CityC', 1500); CREATE TABLE RecyclingProgram (CityID INT); INSERT INTO RecyclingProgram VALUES (1), (2), (3);\n\n## Query generation task:\nIdentify cities with waste generation above the average for cities in the recycling program.\n\n", "response": "SELECT CityName, WasteGeneration FROM Cities WHERE WasteGeneration > (SELECT AVG(Cities.WasteGeneration) FROM Cities INNER JOIN RecyclingProgram ON Cities.CityID = RecyclingProgram.CityID);"}, {"query": "## sql context :\nCREATE TABLE SustainabilityRatings (DestinationID INT, Destination VARCHAR(50), SustainabilityRating INT, Country VARCHAR(50)); INSERT INTO SustainabilityRatings (DestinationID, Destination, SustainabilityRating, Country) VALUES (1, 'Desert Retreat', 2, 'United Arab Emirates'), (2, 'Ancient Ruins', 3, 'Israel'), (3, 'Historic City', 4, 'Turkey');\n\n## Query generation task:\nWhich destinations have the lowest sustainable tourism ratings in the Middle East in the second half of 2023?\n\n", "response": "SELECT Destination, SUM(SustainabilityRating) AS TotalRating FROM SustainabilityRatings WHERE Country = 'United Arab Emirates' OR Country = 'Israel' OR Country = 'Turkey' AND SustainabilityRating < 5 GROUP BY Destination ORDER BY TotalRating ASC;"}, {"query": "## sql context :\nCREATE TABLE rural_infrastructure (id INT, name VARCHAR(50), type VARCHAR(50), budget FLOAT); INSERT INTO rural_infrastructure (id, name, type, budget) VALUES (1, 'Solar Irrigation', 'Agricultural Innovation', 150000.00), (2, 'Wind Turbines', 'Rural Infrastructure', 200000.00), (3, 'Drip Irrigation', 'Agricultural Innovation', 110000.00);\n\n## Query generation task:\nWhat is the maximum budget for an agricultural innovation project in the 'rural_infrastructure' table?\n\n", "response": "SELECT MAX(budget) FROM rural_infrastructure WHERE type = 'Agricultural Innovation';"}, {"query": "## sql context :\nCREATE TABLE voting_data (voter_id INT, name VARCHAR(100), age INT, state VARCHAR(50), registration_date DATE);\n\n## Query generation task:\nUpdate the registration date of voter with ID '12345' to '2022-01-01'.\n\n", "response": "UPDATE voting_data SET registration_date = '2022-01-01' WHERE voter_id = 12345;"}, {"query": "## sql context :\nCREATE TABLE exhibitions (id INT, country VARCHAR(50), visitor_count INT); INSERT INTO exhibitions (id, country, visitor_count) VALUES (1, 'USA', 300), (2, 'Canada', 200), (3, 'Mexico', 100);\n\n## Query generation task:\nWhat is the average visitor count for exhibitions held in each country?\n\n", "response": "SELECT country, AVG(visitor_count) FROM exhibitions GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE creative_ai_algorithm_explainability_scores (issue_id INT PRIMARY KEY, ai_algorithm_id INT, explainability_score FLOAT, continent VARCHAR(255));\n\n## Query generation task:\nWhat is the distribution of explainability scores for creative AI algorithms by continent?\n\n", "response": "SELECT continent, AVG(explainability_score) AS avg_explainability_score FROM creative_ai_algorithm_explainability_scores GROUP BY continent;"}, {"query": "## sql context :\nCREATE TABLE iot_sensors (id INT, location VARCHAR(50), precipitation FLOAT, reading_time TIMESTAMP);\n\n## Query generation task:\nWhat is the total precipitation in Germany for the current month?\n\n", "response": "SELECT SUM(precipitation) FROM iot_sensors WHERE location = 'Germany' AND reading_time BETWEEN DATE_FORMAT(NOW(), '%Y-%m-01') AND LAST_DAY(NOW());"}, {"query": "## sql context :\nCREATE TABLE aquaculture_sites (site_id INT, country VARCHAR(50), farm_type VARCHAR(50), dissolved_oxygen FLOAT); INSERT INTO aquaculture_sites VALUES (1, 'Norway', 'Freshwater', 7.5), (2, 'Norway', 'Marine', 8.2), (3, 'Canada', 'Freshwater', 6.8), (4, 'Canada', 'Marine', 8.0);\n\n## Query generation task:\nWhat is the average dissolved oxygen level for each country's aquaculture sites, partitioned by farm type?\n\n", "response": "SELECT country, farm_type, AVG(dissolved_oxygen) AS avg_dissolved_oxygen FROM aquaculture_sites GROUP BY country, farm_type;"}, {"query": "## sql context :\nCREATE TABLE Accommodations (id INT, student VARCHAR(255), date DATE); CREATE TABLE Students (id INT, name VARCHAR(255), age INT, disability VARCHAR(255));\n\n## Query generation task:\nHow many students with visual impairments have received accommodations in the last year?\n\n", "response": "SELECT COUNT(*) FROM Accommodations INNER JOIN Students ON Accommodations.student = Students.id WHERE disability = 'visual impairment' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}, {"query": "## sql context :\nCREATE TABLE donations (id INT, supporter INT, amount FLOAT); INSERT INTO donations (id, supporter, amount) VALUES (1, 1, 50.00), (2, 2, 100.00), (3, 3, 150.00), (4, 4, 200.00);\n\n## Query generation task:\nWhat is the running total of donations for each supporter?\n\n", "response": "SELECT supporter, amount, SUM(amount) OVER (ORDER BY supporter) AS running_total FROM donations;"}, {"query": "## sql context :\nCREATE TABLE HumanitarianAssistanceOperations (id INT, country VARCHAR(50), military_personnel INT);\n\n## Query generation task:\nWhat is the average number of military personnel in humanitarian assistance operations by country, for countries with more than 200 personnel?\n\n", "response": "SELECT country, AVG(military_personnel) FROM HumanitarianAssistanceOperations GROUP BY country HAVING COUNT(*) > 200;"}, {"query": "## sql context :\nCREATE TABLE conservation_projects (id INT, name VARCHAR(20), co2_emissions INT); INSERT INTO conservation_projects (id, name, co2_emissions) VALUES (1, 'Coral Reef Restoration', 250), (2, 'Mangrove Forest Protection', 180), (3, 'Seagrass Meadows Conservation', 120);\n\n## Query generation task:\nWhat is the total CO2 emissions for each marine conservation project?\n\n", "response": "SELECT name, SUM(co2_emissions) FROM conservation_projects GROUP BY name;"}, {"query": "## sql context :\nCREATE TABLE Workout (user_id INT, workout_duration INT, country VARCHAR(50)); INSERT INTO Workout (user_id, workout_duration, country) VALUES (1, 30, 'Brazil'), (2, 40, 'USA'), (3, 50, 'Brazil'), (4, 60, 'Brazil');\n\n## Query generation task:\nWhat is the maximum workout duration for users from Brazil?\n\n", "response": "SELECT MAX(workout_duration) FROM Workout WHERE country = 'Brazil';"}, {"query": "## sql context :\nCREATE TABLE employee (employee_id INT, employee_name TEXT, gender TEXT, ethnicity TEXT); INSERT INTO employee (employee_id, employee_name, gender, ethnicity) VALUES (1, 'John Doe', 'Male', 'Caucasian'), (2, 'Jane Smith', 'Female', 'African American'), (3, 'Alice Johnson', 'Female', 'Hispanic'), (4, 'Bob Brown', 'Male', 'Asian'), (5, 'Emily Davis', 'Female', 'Native American'), (6, 'Michael Lee', 'Male', 'Asian'), (7, 'Jessica Kim', 'Female', 'Asian'), (8, 'David Nguyen', 'Male', 'Asian'), (9, 'Grace Park', 'Female', 'Asian'), (10, 'Daniel Kim', 'Male', 'Asian');\n\n## Query generation task:\nWhat is the total number of employees from underrepresented communities?\n\n", "response": "SELECT COUNT(e.employee_id) as total_employees FROM employee e WHERE e.ethnicity IN ('African American', 'Hispanic', 'Native American');"}, {"query": "## sql context :\nCREATE TABLE PharmaSales (DrugName TEXT, Year INTEGER, Sales INTEGER); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugA', 2015, 5000000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugA', 2016, 5500000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugB', 2015, 6000000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugB', 2016, 6500000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugC', 2017, 7000000); INSERT INTO PharmaSales (DrugName, Year, Sales) VALUES ('DrugC', 2016, 6000000);\n\n## Query generation task:\nWhat was the total sales for DrugC in 2016?\n\n", "response": "SELECT SUM(Sales) FROM PharmaSales WHERE DrugName = 'DrugC' AND Year = 2016;"}, {"query": "## sql context :\nCREATE TABLE call_volume (cvid INT, call_date DATE, call_count INT, day_of_week VARCHAR(10));\n\n## Query generation task:\nWhat is the maximum 911 call volume for each day of the week?\n\n", "response": "SELECT day_of_week, MAX(call_count) FROM call_volume GROUP BY day_of_week;"}, {"query": "## sql context :\nCREATE TABLE wastewater_plants(state VARCHAR(20), year INT, num_plants INT); INSERT INTO wastewater_plants VALUES ('California', 2000, 15), ('California', 2001, 17), ('California', 2002, 19), ('Nevada', 2000, 5), ('Nevada', 2001, 6), ('Nevada', 2002, 7), ('Arizona', 2000, 8), ('Arizona', 2001, 9), ('Arizona', 2002, 10);\n\n## Query generation task:\nIdentify the number of wastewater treatment plants built in each state between 2000 and 2010, excluding California.\n\n", "response": "SELECT state, COUNT(*) FROM wastewater_plants WHERE state != 'California' AND year BETWEEN 2000 AND 2010 GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE labor_costs (id INT, task VARCHAR(50), cost FLOAT, state VARCHAR(50)); INSERT INTO labor_costs (id, task, cost, state) VALUES (1, 'Concrete Work', 50.00, 'Oregon'); INSERT INTO labor_costs (id, task, cost, state) VALUES (2, 'Electrical Work', 60.50, 'Oregon');\n\n## Query generation task:\nWhat is the maximum construction labor cost per hour in Oregon?\n\n", "response": "SELECT MAX(cost) FROM labor_costs WHERE state = 'Oregon'"}, {"query": "## sql context :\nCREATE TABLE movie (id INT, title VARCHAR(50), genre VARCHAR(20), viewers INT); INSERT INTO movie (id, title, genre, viewers) VALUES (1, 'Movie1', 'Animation', 150000), (2, 'Movie2', 'Action', 250000), (3, 'Movie3', 'Animation', 200000), (4, 'Movie4', 'Drama', 100000), (5, 'Movie5', 'Animation', 220000);\n\n## Query generation task:\nList the top 3 most viewed Animation movies in descending order.\n\n", "response": "SELECT title FROM movie WHERE genre = 'Animation' ORDER BY viewers DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE SouthChinaSea.wells (well_id INT, depth FLOAT); INSERT INTO SouthChinaSea.wells (well_id, depth) VALUES (1, 1200.5), (2, 1800.3), (3, 2050.2);\n\n## Query generation task:\nWhat is the maximum depth for wells in the 'SouthChinaSea' schema?\n\n", "response": "SELECT MAX(depth) FROM SouthChinaSea.wells;"}, {"query": "## sql context :\nCREATE TABLE unique_donors (donor_id INT, cause_id INT); INSERT INTO unique_donors (donor_id, cause_id) VALUES (1, 1), (1, 2), (2, 2), (3, 3), (3, 3), (4, 1);\n\n## Query generation task:\nHow many unique donors are there for each cause?\n\n", "response": "SELECT cause_id, COUNT(DISTINCT donor_id) AS unique_donors FROM unique_donors GROUP BY cause_id;"}, {"query": "## sql context :\nCREATE TABLE vessel_capacity (id INT, vessel_id INT, capacity INT);\n\n## Query generation task:\nList all the vessels that have a capacity less than 50,000 tons.\n\n", "response": "SELECT v.name FROM vessel_capacity vc JOIN vessel v ON vc.vessel_id = v.id WHERE vc.capacity < 50000;"}, {"query": "## sql context :\nCREATE TABLE leo_missions (id INT, name VARCHAR(50), type VARCHAR(50), orbit VARCHAR(50), years_active INT); INSERT INTO leo_missions (id, name, type, orbit, years_active) VALUES (1, 'Mission1', 'Communication', 'LEO', 8), (2, 'Mission2', 'Observation', 'LEO', 11), (3, 'Mission3', 'Navigation', 'LEO', 9);\n\n## Query generation task:\nDelete any space missions in Low Earth Orbit (LEO) that have been active for more than 10 years.\n\n", "response": "DELETE FROM leo_missions WHERE orbit = 'LEO' AND years_active > 10;"}, {"query": "## sql context :\nCREATE TABLE global_tournament (player_id INT, player_name TEXT, score INT, country TEXT);\n\n## Query generation task:\nWhat was the average score of players from Japan in the 'global_tournament' table?\n\n", "response": "SELECT AVG(score) as avg_score FROM global_tournament WHERE country = 'Japan';"}, {"query": "## sql context :\nCREATE TABLE artists (id INT, name VARCHAR(255), genre VARCHAR(255)); CREATE TABLE albums (id INT, artist_id INT, title VARCHAR(255), num_tracks INT); INSERT INTO artists (id, name, genre) VALUES (1, 'Taylor Swift', 'Pop'), (2, 'BTS', 'Pop'), (3, 'Ed Sheeran', 'Pop'); INSERT INTO albums (id, artist_id, title, num_tracks) VALUES (1, 1, 'Lover', 18), (2, 1, 'Fearless', 13), (3, 2, 'BE', 14), (4, 3, 'Divide', 16);\n\n## Query generation task:\nWhat is the average number of tracks per album for pop artists?\n\n", "response": "SELECT AVG(num_tracks) FROM albums WHERE genre = 'Pop' GROUP BY artist_id;"}, {"query": "## sql context :\nCREATE TABLE products (product_id INT, product_name VARCHAR(255), certification VARCHAR(255), quantity INT);INSERT INTO products VALUES (1,'Product A','recycled',5),(2,'Product B','fair_trade',10),(3,'Product C','organic',15),(4,'Product D','recycled',20),(5,'Product E','fair_trade',25),(6,'Product F','recycled, fair_trade',30);\n\n## Query generation task:\nWhat is the maximum quantity of products that are 'recycled' and 'fair_trade' certified?\n\n", "response": "SELECT MAX(quantity) FROM products WHERE certification IN ('recycled', 'fair_trade') GROUP BY certification HAVING COUNT(DISTINCT certification) = 2"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50), DonorType VARCHAR(50));  CREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL(10,2), DonationDate DATE);\n\n## Query generation task:\nWhat is the total amount donated by each donor type in the last quarter?\n\n", "response": "SELECT Donors.DonorType, SUM(Donations.DonationAmount) FROM Donors INNER JOIN Donations ON Donors.DonorID = Donations.DonorID WHERE Donations.DonationDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY Donors.DonorType;"}, {"query": "## sql context :\nCREATE TABLE EcoHousing (property_id INT, coowner_name TEXT, units_owned INT); INSERT INTO EcoHousing (property_id, coowner_name, units_owned) VALUES (1, 'John Doe', 2), (1, 'Jane Smith', 3); CREATE TABLE Property (property_id INT, development_name TEXT); INSERT INTO Property (property_id, development_name) VALUES (1, 'EcoHousing');\n\n## Query generation task:\nFind the co-owners of a property in the EcoHousing development.\n\n", "response": "SELECT coowner_name FROM EcoHousing JOIN Property ON EcoHousing.property_id = Property.property_id WHERE development_name = 'EcoHousing';"}, {"query": "## sql context :\nCREATE TABLE agricultural_innovations (innovation_id INT, country TEXT, innovation TEXT, implementation_year INT); INSERT INTO agricultural_innovations (innovation_id, country, innovation, implementation_year) VALUES (1, 'Guatemala', 'Precision agriculture', 2016), (2, 'Guatemala', 'Drip irrigation', 2017), (3, 'Guatemala', 'Vertical farming', 2018), (4, 'Guatemala', 'Automated harvesting', 2019);\n\n## Query generation task:\nWhich agricultural innovations were implemented in Guatemala between 2016 and 2019?\n\n", "response": "SELECT innovation FROM agricultural_innovations WHERE country = 'Guatemala' AND implementation_year BETWEEN 2016 AND 2019;"}, {"query": "## sql context :\nCREATE TABLE missions (mission_name VARCHAR(50), country1 VARCHAR(50), country2 VARCHAR(50)); INSERT INTO missions (mission_name, country1, country2) VALUES ('Apollo-Soyuz Test Project', 'USA', 'Russia'), ('Gemini 12', 'USA', 'None'), ('Shenzhou 5', 'China', 'None');\n\n## Query generation task:\nFind all space missions with astronauts from multiple countries\n\n", "response": "SELECT mission_name FROM missions WHERE country1 != country2;"}, {"query": "## sql context :\nCREATE TABLE fans (fan_id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO fans (fan_id, name, country) VALUES (1, 'Alice Johnson', 'Canada'); INSERT INTO fans (fan_id, name, country) VALUES (2, 'Bob Smith', 'USA');\n\n## Query generation task:\nWhat is the number of fans from 'Canada' in the 'fans' table?\n\n", "response": "SELECT COUNT(*) FROM fans WHERE country = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE cybersecurity_incidents(incident_id INT, incident_date DATE, severity INT); INSERT INTO cybersecurity_incidents(incident_id, incident_date, severity) VALUES (1, '2019-01-01', 8), (2, '2019-05-15', 5), (3, '2019-12-31', 9);\n\n## Query generation task:\nList all cybersecurity incidents with a severity level above 7 in 2019, ordered by date.\n\n", "response": "SELECT * FROM cybersecurity_incidents WHERE YEAR(incident_date) = 2019 AND severity > 7 ORDER BY incident_date;"}, {"query": "## sql context :\nCREATE TABLE Ingredients (ingredient_id INT, ingredient_name TEXT, dish_id INT, cost FLOAT); INSERT INTO Ingredients (ingredient_id, ingredient_name, dish_id, cost) VALUES (1, 'Falafel', 3, 3.0);\n\n## Query generation task:\nWhat is the total cost of ingredients for the 'Falafel Wrap' for the month of June 2022?\n\n", "response": "SELECT SUM(cost) FROM Ingredients WHERE dish_id IN (SELECT dish_id FROM Dishes WHERE dish_name = 'Falafel Wrap') AND ingredient_name NOT IN ('Hummus', 'Pita Bread');"}, {"query": "## sql context :\nCREATE TABLE Co2Emissions (country VARCHAR(50), year INT, co2_emission FLOAT); INSERT INTO Co2Emissions (country, year, co2_emission) VALUES ('United States', 2020, 5134.3), ('China', 2020, 10458.8), ('India', 2020, 2718.6), ('United States', 2019, 5035.1), ('China', 2019, 10380.6), ('India', 2019, 2648.3);\n\n## Query generation task:\nWhat is the total CO2 emission of the top 3 emitting countries in 2020?\n\n", "response": "SELECT SUM(co2_emission) as total_emission FROM (SELECT country, co2_emission FROM Co2Emissions WHERE year = 2020 ORDER BY co2_emission DESC LIMIT 3) t;"}, {"query": "## sql context :\nCREATE TABLE Endangered_Species (ID INT, Name VARCHAR(50), Population INT, Status VARCHAR(50), Region VARCHAR(50)); INSERT INTO Endangered_Species VALUES (1, 'Snowy Owl', 1000, 'Least Concern', 'Arctic'); INSERT INTO Endangered_Species VALUES (2, 'Gyrfalcon', 2000, 'Least Concern', 'Arctic'); INSERT INTO Endangered_Species VALUES (3, 'Peregrine Falcon', 1500, 'Critically Endangered', 'Arctic');\n\n## Query generation task:\nWhat is the total population of all critically endangered species in the Arctic?\n\n", "response": "SELECT SUM(Population) FROM Endangered_Species WHERE Status = 'Critically Endangered';"}, {"query": "## sql context :\nCREATE TABLE storage (id INT, name VARCHAR(50), type VARCHAR(50), capacity INT, location VARCHAR(50));\n\n## Query generation task:\nWhat is the total energy storage capacity for each energy storage technology in the storage table?\n\n", "response": "SELECT type, SUM(capacity) as total_capacity FROM storage GROUP BY type ORDER BY total_capacity DESC;"}, {"query": "## sql context :\nCREATE TABLE programs (program_id INT, program_name TEXT, program_expenses FLOAT, program_date DATE); INSERT INTO programs (program_id, program_name, program_expenses, program_date) VALUES (1, 'Education', 8000, '2021-01-01'); INSERT INTO programs (program_id, program_name, program_expenses, program_date) VALUES (2, 'Health', 5000, '2021-03-01');\n\n## Query generation task:\nWhich programs had the highest and lowest total expenses in H1 2021?\n\n", "response": "SELECT program_name, program_expenses FROM (SELECT program_name, program_expenses, ROW_NUMBER() OVER (ORDER BY program_expenses DESC) AS high_expense, ROW_NUMBER() OVER (ORDER BY program_expenses ASC) AS low_expense FROM programs WHERE EXTRACT(YEAR FROM program_date) = 2021 AND EXTRACT(MONTH FROM program_date) BETWEEN 1 AND 6) AS subquery WHERE high_expense = 1 OR low_expense = 1;"}, {"query": "## sql context :\nCREATE TABLE health_equity_metrics (state VARCHAR(2), year INT, accessibility FLOAT, affordability FLOAT);\n\n## Query generation task:\nDelete health equity metrics for Arizona in 2019\n\n", "response": "DELETE FROM health_equity_metrics WHERE state = 'AZ' AND year = 2019;"}, {"query": "## sql context :\nCREATE TABLE GameStats (GameID int, GameName varchar(50), Category varchar(50), Playtime decimal(10,2));\n\n## Query generation task:\nWhat is the average playtime for each game in the \"Simulation\" category?\n\n", "response": "SELECT Category, AVG(Playtime) OVER(PARTITION BY Category) as AvgPlaytime FROM GameStats;"}, {"query": "## sql context :\nCREATE TABLE users (id INT, age INT, gender TEXT); INSERT INTO users (id, age, gender) VALUES (1, 25, 'Female'), (2, 35, 'Male'), (3, 45, 'Non-binary'); CREATE TABLE likes (user_id INT, article_id INT); INSERT INTO likes (user_id, article_id) VALUES (1, 123), (2, 123), (3, 456);\n\n## Query generation task:\nWhat is the average age of all users who liked article 123?\n\n", "response": "SELECT AVG(users.age) FROM users INNER JOIN likes ON users.id = likes.user_id WHERE likes.article_id = 123;"}, {"query": "## sql context :\nCREATE TABLE States (state VARCHAR(255), revenue DECIMAL(10,2)); INSERT INTO States (state, revenue) VALUES ('CA', 1200000), ('CO', 800000), ('WA', 700000), ('OR', 600000), ('MI', 500000);\n\n## Query generation task:\nWhat are the top 5 states with the highest total cannabis sales revenue?\n\n", "response": "SELECT state, SUM(revenue) as total_revenue FROM States GROUP BY state ORDER BY total_revenue DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE factories (id INT, name VARCHAR(50), country VARCHAR(50), certified BOOLEAN);\n\n## Query generation task:\nWhich country has the highest number of fair-trade certified factories?\n\n", "response": "SELECT country, COUNT(*) AS factory_count FROM factories WHERE certified = TRUE GROUP BY country ORDER BY factory_count DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE public_transportation (id INT PRIMARY KEY, name VARCHAR(255), location VARCHAR(255));\n\n## Query generation task:\nList all public transportation systems that serve a given location\n\n", "response": "CREATE VIEW public_transportation_by_location AS SELECT location, GROUP_CONCAT(name) as transportation_systems FROM public_transportation GROUP BY location;"}, {"query": "## sql context :\nCREATE TABLE Indigenous_Food_Systems (System_ID INT, Country VARCHAR(20), Farming_Method VARCHAR(20)); INSERT INTO Indigenous_Food_Systems (System_ID, Country, Farming_Method) VALUES (1001, 'Spain', 'Permaculture'), (1002, 'France', 'Permaculture');\n\n## Query generation task:\nList all indigenous food systems in Europe that use permaculture farming methods.\n\n", "response": "SELECT * FROM Indigenous_Food_Systems WHERE Country IN ('Spain', 'France') AND Farming_Method = 'Permaculture';"}, {"query": "## sql context :\nCREATE TABLE patients (patient_id INT, gender VARCHAR(10), health_equity_metric_score INT); INSERT INTO patients (patient_id, gender, health_equity_metric_score) VALUES (1, 'Female', 75), (2, 'Male', 80), (3, 'Female', 60), (4, 'Non-binary', 90), (5, 'Male', 70);\n\n## Query generation task:\nWhat is the minimum health equity metric score by gender?\n\n", "response": "SELECT gender, MIN(health_equity_metric_score) FROM patients GROUP BY gender;"}, {"query": "## sql context :\nCREATE TABLE social_good_projects (id INT, project_name TEXT, budget INT); INSERT INTO social_good_projects (id, project_name, budget) VALUES (1, 'Smart Energy Grids', 900000), (2, 'AI for Disaster Response', 700000), (3, 'Accessible Technology Initiative', 800000);\n\n## Query generation task:\nWhich technology for social good projects have the highest budgets?\n\n", "response": "SELECT project_name, budget FROM social_good_projects ORDER BY budget DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE shariah_compliant_products (product_id INT, product_name TEXT, description TEXT);\n\n## Query generation task:\nList all Shariah-compliant financial products with their descriptions.\n\n", "response": "SELECT product_name, description  FROM shariah_compliant_products;"}, {"query": "## sql context :\nCREATE TABLE news_reporting (article_id INT, author VARCHAR(50), title VARCHAR(100), published_date DATE, category VARCHAR(30), word_count INT, author_gender VARCHAR(10)); INSERT INTO news_reporting (article_id, author, title, published_date, category, word_count, author_gender) VALUES (1, 'Aisha Jones', 'Article 7', '2021-01-07', 'Sports', 600, 'Female');\n\n## Query generation task:\nWhat is the average word count for articles in the 'sports' category in the 'news_reporting' table?\n\n", "response": "SELECT AVG(word_count) AS avg_word_count FROM news_reporting WHERE category = 'Sports';"}, {"query": "## sql context :\nCREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, region VARCHAR(50)); CREATE TABLE order_details (order_id INT, menu_id INT, quantity_sold INT); CREATE TABLE menu (menu_id INT, menu_name VARCHAR(255), menu_category VARCHAR(50)); INSERT INTO orders (order_id, customer_id, order_date, region) VALUES (1, 1, '2022-01-01', 'South'), (2, 2, '2022-01-02', 'North'), (3, 3, '2022-01-03', 'South'); INSERT INTO order_details (order_id, menu_id, quantity_sold) VALUES (1, 1, 10), (1, 2, 5), (2, 2, 8), (2, 3, 12), (3, 4, 20); INSERT INTO menu (menu_id, menu_name, menu_category) VALUES (1, 'Chocolate Cake', 'Dessert'), (2, 'Cheese Cake', 'Dessert'), (3, 'Beef Burger', 'Main Course'), (4, 'Ice Cream', 'Dessert');\n\n## Query generation task:\nList the top 5 most preferred desserts among customers in the South region.\n\n", "response": "SELECT menu_name, SUM(quantity_sold) as total_quantity FROM order_details o JOIN orders ON o.order_id = orders.order_id JOIN menu m ON o.menu_id = m.menu_id WHERE region = 'South' AND menu_category = 'Dessert' GROUP BY menu_name ORDER BY total_quantity DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE factories (name TEXT, region TEXT, industry_4_0 BOOLEAN); INSERT INTO factories (name, region, industry_4_0) VALUES ('Delta Manufacturing', 'Americas', TRUE), ('Epsilon Robotics', 'Europe', FALSE);\n\n## Query generation task:\nWhich factories have implemented Industry 4.0 technologies and are located in the Americas?\n\n", "response": "SELECT name FROM factories WHERE region = 'Americas' AND industry_4_0 = TRUE;"}, {"query": "## sql context :\nCREATE TABLE Field4_Precip (sensor_id INT, sensor_reading DATE, precip FLOAT); INSERT INTO Field4_Precip (sensor_id, sensor_reading, precip) VALUES (1, '2021-08-15', 5.2), (2, '2021-08-16', 7.0), (1, '2021-08-17', 4.9), (2, '2021-08-17', 6.1);\n\n## Query generation task:\nWhat is the average precipitation (in millimeters) for \"Field4\" in the second half of August 2021, grouped by sensor_id?\n\n", "response": "SELECT sensor_id, AVG(precip) FROM Field4_Precip WHERE sensor_reading BETWEEN '2021-08-16' AND '2021-08-31' GROUP BY sensor_id;"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID INT, Name TEXT, Country TEXT, TotalDonation FLOAT); INSERT INTO Donors (DonorID, Name, Country, TotalDonation) VALUES (1, 'John Smith', 'USA', 500.00), (2, 'Jane Doe', 'Canada', 350.00);\n\n## Query generation task:\nWhat's the total donation amount per country?\n\n", "response": "SELECT Country, SUM(TotalDonation) FROM Donors GROUP BY Country;"}, {"query": "## sql context :\nCREATE TABLE iot_sensors (id INT, sensor_type VARCHAR(50), location VARCHAR(50), last_data_received DATE); INSERT INTO iot_sensors (id, sensor_type, location, last_data_received) VALUES (1, 'Temperature', 'Colombia', '2022-04-15'), (2, 'Humidity', 'Colombia', '2022-04-18'), (3, 'Soil Moisture', 'Colombia', '2022-04-19'), (4, 'Temperature', 'Colombia', '2022-04-20'), (5, 'Humidity', 'Colombia', '2022-04-21');\n\n## Query generation task:\nWhat is the count of IoT sensors in Colombia that are not sending data in the last week?\n\n", "response": "SELECT COUNT(*) FROM iot_sensors WHERE last_data_received <= DATE_SUB(CURDATE(), INTERVAL 7 DAY);"}, {"query": "## sql context :\nCREATE TABLE IngredientsVeganCrueltyFree (product_id INT, ingredient TEXT, is_vegan BOOLEAN, is_cruelty_free BOOLEAN); INSERT INTO IngredientsVeganCrueltyFree (product_id, ingredient, is_vegan, is_cruelty_free) VALUES (1, 'aloe vera', true, true), (2, 'almond oil', false, false), (3, 'coconut oil', true, true), (4, 'lavender', false, true), (5, 'lavender', true, true);\n\n## Query generation task:\nList the beauty products that contain 'lavender' as an ingredient and are labeled 'vegan' and 'cruelty-free'.\n\n", "response": "SELECT product_id, ingredient FROM IngredientsVeganCrueltyFree WHERE ingredient = 'lavender' AND is_vegan = true AND is_cruelty_free = true;"}, {"query": "## sql context :\nCREATE TABLE college (id INT, name VARCHAR(255)); INSERT INTO college (id, name) VALUES (1, 'College of Engineering'); CREATE TABLE departments (id INT, name VARCHAR(255), college_id INT, PRIMARY KEY (id), FOREIGN KEY (college_id) REFERENCES college(id)); INSERT INTO departments (id, name, college_id) VALUES (1, 'Mechanical Engineering', 1), (2, 'Electrical Engineering', 1); CREATE TABLE grants (id INT, department_id INT, PRIMARY KEY (id), FOREIGN KEY (department_id) REFERENCES departments(id));\n\n## Query generation task:\nWhat is the average number of research grants awarded per department in the College of Engineering?\n\n", "response": "SELECT AVG(g.count) FROM (SELECT COUNT(grants.id) AS count FROM grants GROUP BY grants.department_id) AS g;"}, {"query": "## sql context :\nCREATE TABLE co_ownerships (id INT, city VARCHAR(255), co_ownership BOOLEAN); INSERT INTO co_ownerships (id, city, co_ownership) VALUES (1, 'Los Angeles', true), (2, 'Los Angeles', true), (3, 'San Diego', false);\n\n## Query generation task:\nList the names of the cities that have more than 10 property co-ownerships and the number of co-ownerships for each of these cities.\n\n", "response": "SELECT city, COUNT(*) FROM co_ownerships WHERE co_ownership = true GROUP BY city HAVING COUNT(*) > 10;"}, {"query": "## sql context :\nCREATE TABLE wind_projects (project_id INT, project_name VARCHAR(255), city VARCHAR(255), state VARCHAR(255), capacity FLOAT);\n\n## Query generation task:\nWhat is the total installed capacity of wind power projects in the city of Seattle?\n\n", "response": "SELECT SUM(capacity) FROM wind_projects WHERE city = 'Seattle';"}, {"query": "## sql context :\nCREATE TABLE fish_biomass (id INT, species TEXT, location TEXT, year INT, biomass INT); INSERT INTO fish_biomass (id, species, location, year, biomass) VALUES (1, 'Tuna', 'Gulf of Mexico', 2012, 25000), (2, 'Mackerel', 'Gulf of Mexico', 2012, 18000), (3, 'Tuna', 'Gulf of Mexico', 2013, 27000), (4, 'Mackerel', 'Gulf of Mexico', 2013, 19000);\n\n## Query generation task:\nWhat is the total biomass of fish species in the Gulf of Mexico over the past decade?\n\n", "response": "SELECT location, species, SUM(biomass) biomass FROM fish_biomass WHERE year BETWEEN 2011 AND 2021 GROUP BY location, species;"}, {"query": "## sql context :\nCREATE TABLE temperature_data (id INT, region VARCHAR(50), year INT, temperature DECIMAL); INSERT INTO temperature_data (id, region, year, temperature) VALUES (1, 'Arctic', 2020, -25.6); INSERT INTO temperature_data (id, region, year, temperature) VALUES (2, 'Antarctic', 2019, -35.7);\n\n## Query generation task:\nWhat is the minimum temperature recorded in the Arctic region in 2020?\n\n", "response": "SELECT MIN(temperature) FROM temperature_data WHERE region = 'Arctic' AND year = 2020;"}, {"query": "## sql context :\nCREATE TABLE SupportPrograms (program_id INT, program_name VARCHAR(255), cost DECIMAL(10, 2)); INSERT INTO SupportPrograms (program_id, program_name, cost) VALUES (2001, 'Buddy Program', 1500.00), (2002, 'Mentorship Program', 2500.00), (2003, 'Tutoring Program', 3500.00);\n\n## Query generation task:\nWhat are the total costs of support programs from the 'SupportPrograms' table?\n\n", "response": "SELECT SUM(cost) FROM SupportPrograms;"}, {"query": "## sql context :\nCREATE TABLE CustomersRegion (CustomerID INT, CustomerName VARCHAR(255), Region VARCHAR(50), TotalFreightCharges DECIMAL(10, 2)); INSERT INTO CustomersRegion (CustomerID, CustomerName, Region, TotalFreightCharges) VALUES (1, 'ABC Corp', 'East', 5000.00), (2, 'XYZ Inc', 'West', 7000.00), (3, 'LMN Ltd', 'East', 6000.00), (4, 'DEF Co', 'West', 8000.00), (5, 'GHI Pvt', 'East', 9000.00), (6, 'JKL Co', 'North', 4000.00), (7, 'MNO Inc', 'North', 3000.00), (8, 'PQR Ltd', 'South', 10000.00), (9, 'STU Pvt', 'South', 11000.00), (10, 'VWX Corp', 'South', 12000.00);\n\n## Query generation task:\nWhat are the top 3 customers by total freight charges for each region?\n\n", "response": "SELECT CustomerName, TotalFreightCharges, Region FROM (SELECT CustomerName, TotalFreightCharges, Region, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY TotalFreightCharges DESC) AS Ranking FROM CustomersRegion) AS Subquery WHERE Ranking <= 3;"}, {"query": "## sql context :\nCREATE TABLE mobile_usage (id INT, plan_type VARCHAR(10), state VARCHAR(20), data_usage INT);\n\n## Query generation task:\nWhat is the total data usage in GB for each mobile plan type in the state of Florida?\n\n", "response": "SELECT plan_type, state, SUM(data_usage)/1024/1024/1024 FROM mobile_usage WHERE state = 'Florida' GROUP BY plan_type;"}, {"query": "## sql context :\nCREATE TABLE mobile_subscribers (subscriber_id INT, data_usage FLOAT, state VARCHAR(20)); INSERT INTO mobile_subscribers (subscriber_id, data_usage, state) VALUES (1, 3.5, 'California'), (2, 4.2, 'California'), (3, 3.8, 'New York');\n\n## Query generation task:\nWhat is the minimum monthly data usage for postpaid mobile customers in the state of California?\n\n", "response": "SELECT MIN(data_usage) FROM mobile_subscribers WHERE state = 'California' AND subscription_type = 'postpaid';"}, {"query": "## sql context :\nCREATE TABLE Volunteers (VolunteerID int, VolunteerName varchar(50), State varchar(50), LastEngagementDate date);\n\n## Query generation task:\nHow many volunteers engaged in our programs in California in the last 6 months?\n\n", "response": "SELECT COUNT(*) FROM Volunteers WHERE State = 'California' AND LastEngagementDate >= DATEADD(month, -6, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE dapps (id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255)); INSERT INTO dapps (id, name, category) VALUES (1, 'Game1', 'Gaming'), (2, 'Tool1', 'Development');\n\n## Query generation task:\nList all decentralized applications (dApps) in the gaming category.\n\n", "response": "SELECT name FROM dapps WHERE category = 'Gaming';"}, {"query": "## sql context :\nCREATE TABLE biotech_startups (id INT, name VARCHAR(50), budget DECIMAL(10,2), region VARCHAR(50)); INSERT INTO biotech_startups (id, name, budget, region) VALUES (1, 'Genetix', 5000000.00, 'Asia Pacific'); INSERT INTO biotech_startups (id, name, budget, region) VALUES (2, 'BioEngineerz', 7000000.00, 'North America'); INSERT INTO biotech_startups (id, name, budget, region) VALUES (3, 'SensoraBio', 6000000.00, 'Europe');\n\n## Query generation task:\nWhat is the average budget of biotech startups in the Asia Pacific region?\n\n", "response": "SELECT AVG(budget) FROM biotech_startups WHERE region = 'Asia Pacific';"}, {"query": "## sql context :\nCREATE TABLE portfolios (portfolio_id INT, customer_id INT, num_investments INT, num_shariah_compliant_investments INT, shariah_compliant_investment_amount DECIMAL(10,2));CREATE VIEW shariah_compliant_portfolios AS SELECT * FROM portfolios WHERE num_shariah_compliant_investments > 0;\n\n## Query generation task:\nWhat is the maximum and minimum Shariah-compliant investment amount in each portfolio?\n\n", "response": "SELECT p.portfolio_id, MAX(p.shariah_compliant_investment_amount) as max_amount, MIN(p.shariah_compliant_investment_amount) as min_amount FROM portfolios p INNER JOIN shariah_compliant_portfolios scp ON p.portfolio_id = scp.portfolio_id GROUP BY p.portfolio_id;"}, {"query": "## sql context :\nCREATE TABLE publications(id INT, author VARCHAR(50), department VARCHAR(50), pub_date DATE); INSERT INTO publications VALUES (1, 'Alice', 'Arts and Humanities', '2021-03-01'); INSERT INTO publications VALUES (2, 'Beth', 'Science', '2020-06-15'); INSERT INTO publications VALUES (3, 'Charlie', 'Arts and Humanities', '2019-12-31'); INSERT INTO publications VALUES (4, 'Diana', 'Arts and Humanities', '2021-01-01');\n\n## Query generation task:\nWhat is the maximum number of publications by a single author in the College of Arts and Humanities?\n\n", "response": "SELECT department, MAX(COUNT(*)) FROM publications GROUP BY department HAVING department = 'Arts and Humanities';"}, {"query": "## sql context :\nCREATE TABLE SupportPrograms (programID INT, programName VARCHAR(50), enrollment INT);\n\n## Query generation task:\nList the top 3 support programs with the highest enrollment count in the SupportPrograms table.\n\n", "response": "SELECT programName, COUNT(*) as enrollment_count FROM SupportPrograms GROUP BY programName ORDER BY enrollment_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE hair_care_sales(product_name TEXT, price DECIMAL(5,2), is_natural BOOLEAN, country TEXT); INSERT INTO hair_care_sales VALUES ('Shampoo', 12.99, true, 'France'); INSERT INTO hair_care_sales VALUES ('Conditioner', 14.99, true, 'France'); INSERT INTO hair_care_sales VALUES ('Styling Cream', 8.99, false, 'France');\n\n## Query generation task:\nWhat is the maximum price of natural hair care products sold in France?\n\n", "response": "SELECT MAX(price) FROM hair_care_sales WHERE is_natural = true AND country = 'France';"}, {"query": "## sql context :\nCREATE TABLE Volunteer_Hours (id INT, hours INT, volunteer_id INT, month INT); CREATE TABLE Volunteers (id INT, name TEXT);\n\n## Query generation task:\nWhat is the average number of hours volunteered per volunteer?\n\n", "response": "SELECT AVG(hours) as avg_hours_per_volunteer FROM Volunteer_Hours JOIN Volunteers ON Volunteer_Hours.volunteer_id = Volunteers.id;"}, {"query": "## sql context :\nCREATE TABLE clients (client_id INT PRIMARY KEY, name VARCHAR(100), last_transaction_date DATE); INSERT INTO clients (client_id, name, last_transaction_date) VALUES (1, 'John Doe', '2021-12-15');\n\n## Query generation task:\nFind total assets of clients with a last transaction date in 2021 Q4\n\n", "response": "SELECT SUM(assets) FROM (SELECT client_id, assets FROM client_assets WHERE client_id IN (SELECT client_id FROM clients WHERE last_transaction_date >= '2021-10-01' AND last_transaction_date <= '2021-12-31')) clients_assets_q4"}, {"query": "## sql context :\nCREATE TABLE model_fairness (model_id INT, fairness_score DECIMAL(3,2)); INSERT INTO model_fairness (model_id, fairness_score) VALUES (1, 0.85), (2, 0.70), (3, 0.92), (4, 0.68), (5, 0.55);\n\n## Query generation task:\nFind the number of models with a fairness score less than 0.7.\n\n", "response": "SELECT COUNT(*) FROM model_fairness WHERE fairness_score < 0.7;"}, {"query": "## sql context :\nCREATE TABLE smart_cities (id INT, name VARCHAR(255), technology_adoption_score FLOAT);\n\n## Query generation task:\nCalculate the average smart city technology adoption score of all cities in the database.\n\n", "response": "SELECT AVG(technology_adoption_score) FROM smart_cities;"}, {"query": "## sql context :\nCREATE TABLE space_exploration (id INT PRIMARY KEY, mission_name VARCHAR(50), mission_status VARCHAR(20));\n\n## Query generation task:\nDelete all records from the 'space_exploration' table where the mission is 'not successful'\n\n", "response": "DELETE FROM space_exploration WHERE mission_status = 'not successful';"}, {"query": "## sql context :\nCREATE TABLE hospitals (name VARCHAR(255), state VARCHAR(255)); INSERT INTO hospitals (name, state) VALUES ('UCLA Medical Center', 'California'), ('Stanford Health Care', 'California'), ('Cedars-Sinai Medical Center', 'California');\n\n## Query generation task:\nWhat is the total number of hospitals in the state of California?\n\n", "response": "SELECT COUNT(*) FROM hospitals WHERE state = 'California';"}, {"query": "## sql context :\nCREATE TABLE elements_price (element_id INT, price FLOAT, PRIMARY KEY (element_id, price)); CREATE TABLE elements (id INT PRIMARY KEY, name VARCHAR(255), symbol VARCHAR(3), weight FLOAT, element_id INT, FOREIGN KEY (element_id) REFERENCES elements_price(element_id));\n\n## Query generation task:\nFind the average price of elements with symbol 'E'\n\n", "response": "SELECT AVG(price) FROM elements_price WHERE element_id IN (SELECT id FROM elements WHERE symbol LIKE 'E%');"}, {"query": "## sql context :\nCREATE TABLE food_safety_inspections (restaurant_name VARCHAR(255), inspection_date DATE, score INT); INSERT INTO food_safety_inspections (restaurant_name, inspection_date, score) VALUES ('Pizza Palace', '2022-01-01', 85);\n\n## Query generation task:\nInsert a new record in the food_safety_inspections table for 'Sushi Spot' restaurant.\n\n", "response": "INSERT INTO food_safety_inspections (restaurant_name, inspection_date, score) VALUES ('Sushi Spot', '2022-03-01', 90);"}, {"query": "## sql context :\nCREATE TABLE carbon_offset_initiatives ( id INT PRIMARY KEY, project_name VARCHAR(255), total_offset INT, state VARCHAR(255) );\n\n## Query generation task:\nDelete carbon offset initiative records for the project 'Green Spaces' in the state of New York.\n\n", "response": "DELETE FROM carbon_offset_initiatives WHERE project_name = 'Green Spaces' AND state = 'New York';"}, {"query": "## sql context :\nCREATE TABLE Sales (SaleID INT, ProductCategory VARCHAR(255), SaleDate DATE); CREATE TABLE Revenue (RevenueID INT, SaleID INT, Amount DECIMAL(10,2)); INSERT INTO Sales (SaleID, ProductCategory, SaleDate) VALUES (1, 'Flower', '2022-01-01'), (2, 'Concentrates', '2022-01-05'), (3, 'Edibles', '2022-01-10'); INSERT INTO Revenue (RevenueID, SaleID, Amount) VALUES (1, 1, 50.00), (2, 1, 75.00), (3, 2, 100.00), (4, 3, 200.00);\n\n## Query generation task:\nWhat is the total revenue generated by each product category in the last month?\n\n", "response": "SELECT ProductCategory, SUM(Amount) AS TotalRevenue FROM Sales JOIN Revenue ON Sales.SaleID = Revenue.SaleID WHERE SaleDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY ProductCategory;"}, {"query": "## sql context :\nCREATE TABLE reservoirs (reservoir_id INT, reservoir_name VARCHAR(255), field_name VARCHAR(255), oil_grade VARCHAR(255), gas_content FLOAT);\n\n## Query generation task:\nDelete any records in the 'reservoirs' table where the 'oil_grade' is 'light'\n\n", "response": "DELETE FROM reservoirs WHERE oil_grade = 'light';"}, {"query": "## sql context :\nCREATE TABLE mental_health_parity (violation_id INT, location VARCHAR(50), violation_count INT); INSERT INTO mental_health_parity (violation_id, location, violation_count) VALUES (1, 'Northeast', 10), (2, 'Southeast', 15), (3, 'Midwest', 12), (4, 'Southwest', 8), (5, 'West', 5);\n\n## Query generation task:\nHow many mental health parity violations occurred in each region?\n\n", "response": "SELECT region, SUM(violation_count) FROM mental_health_parity GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE members (member_id INT, name TEXT, age INT, gender TEXT); INSERT INTO members (member_id, name, age, gender) VALUES (1, 'John Doe', 30, 'Male'), (2, 'Jane Doe', 28, 'Female'), (3, 'Alex Brown', 33, 'Non-binary');\n\n## Query generation task:\nUpdate the age of the member 'Alex Brown' to 35 in the members table\n\n", "response": "UPDATE members SET age = 35 WHERE name = 'Alex Brown';"}, {"query": "## sql context :\nCREATE TABLE Expenditure (Quarter INT, Year INT, Region VARCHAR(20), Project VARCHAR(20), Amount DECIMAL(10,2)); INSERT INTO Expenditure (Quarter, Year, Region, Project, Amount) VALUES (1, 2023, 'North', 'Road Construction', 50000.00), (1, 2023, 'South', 'Bridge Construction', 75000.00);\n\n## Query generation task:\nWhat was the total expenditure on infrastructure projects in Q1 2023, categorized by region?\n\n", "response": "SELECT Region, SUM(Amount) FROM Expenditure WHERE Quarter = 1 AND Year = 2023 GROUP BY Region;"}, {"query": "## sql context :\nCREATE TABLE games (id INT, team VARCHAR(20), date DATE); INSERT INTO games (id, team, date) VALUES (1, 'Eagles', '2021-01-01'), (2, 'Eagles', '2021-02-15'), (3, 'Eagles', '2021-04-01'); CREATE TABLE tickets (id INT, game_id INT, quantity INT); INSERT INTO tickets (id, game_id, quantity) VALUES (1, 1, 2000), (2, 1, 500), (3, 2, 1500), (4, 2, 700), (5, 3, 2500), (6, 3, 1500);\n\n## Query generation task:\nWhat is the maximum number of tickets sold for a single game of the basketball team \"Eagles\" in the year 2021?\n\n", "response": "SELECT MAX(quantity) FROM tickets JOIN games ON tickets.game_id = games.id WHERE games.team = 'Eagles' AND YEAR(games.date) = 2021;"}, {"query": "## sql context :\nCREATE TABLE WasteData (Country VARCHAR(50), Continent VARCHAR(50), WasteGeneration FLOAT, Year INT, RecyclingRate FLOAT); INSERT INTO WasteData (Country, Continent, WasteGeneration, Year, RecyclingRate) VALUES ('South Africa', 'Africa', 1234.56, 2020, 30.5), ('South Africa', 'Africa', 1300.98, 2019, 31.6), ('Egypt', 'Africa', 456.34, 2020, 25.1), ('Egypt', 'Africa', 467.65, 2019, 26.2);\n\n## Query generation task:\nWhat is the total waste generation for the bottom 2 recycling countries in Africa, for the most recent year?\n\n", "response": "SELECT SUM(WasteGeneration) FROM (SELECT Country, WasteGeneration FROM WasteData WHERE Continent = 'Africa' AND RecyclingRate < (SELECT AVG(RecyclingRate) FROM WasteData WHERE Continent = 'Africa') GROUP BY Country ORDER BY WasteGeneration DESC FETCH FIRST 2 ROWS ONLY) tmp;"}, {"query": "## sql context :\nCREATE TABLE total_consumption (year INT, sector TEXT, consumption FLOAT); INSERT INTO total_consumption (year, sector, consumption) VALUES (2015, 'residential', 123.5), (2015, 'commercial', 234.6), (2016, 'residential', 130.2), (2016, 'commercial', 240.1);\n\n## Query generation task:\nWhat is the total water consumption by all sectors in 2015 and 2016?\n\n", "response": "SELECT consumption FROM total_consumption WHERE year IN (2015, 2016)"}, {"query": "## sql context :\nCREATE TABLE MilitaryInnovations (id INT PRIMARY KEY, country VARCHAR(50), year INT, innovation VARCHAR(100)); INSERT INTO MilitaryInnovations (id, country, year, innovation) VALUES (3, 'China', 2015, 'Artificial intelligence for military logistics');\n\n## Query generation task:\nHow many military innovations were made by China between 2012 and 2017?\n\n", "response": "SELECT COUNT(*) FROM MilitaryInnovations WHERE country = 'China' AND year BETWEEN 2012 AND 2017;"}, {"query": "## sql context :\nCREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), expiration_date DATE); INSERT INTO products (product_id, product_name, expiration_date) VALUES (1, 'Lipstick', '2020-01-01'), (2, 'Foundation', '2022-12-31'), (3, 'Mascara', '2019-06-15');\n\n## Query generation task:\nDelete all records of expired products from the 'products' table.\n\n", "response": "DELETE FROM products WHERE expiration_date < CURDATE();"}, {"query": "## sql context :\nCREATE TABLE hotels (hotel_id INT, hotel_name VARCHAR(50), country VARCHAR(50), revenue FLOAT); INSERT INTO hotels (hotel_id, hotel_name, country, revenue) VALUES (1, 'Eco Hotel', 'Brazil', 35000), (2, 'Green Hotel', 'Argentina', 40000), (3, 'Sustainable Hotel', 'Brazil', 45000), (4, 'Eco Resort', 'Argentina', 50000);\n\n## Query generation task:\nWhat is the average revenue of eco-friendly hotels in Brazil and Argentina?\n\n", "response": "SELECT AVG(revenue) FROM hotels WHERE country IN ('Brazil', 'Argentina') AND hotel_name LIKE '%eco%';"}, {"query": "## sql context :\nCREATE TABLE MaintenanceRequests (id INT, country VARCHAR(50), request_date DATE); INSERT INTO MaintenanceRequests (id, country, request_date) VALUES (1, 'Japan', '2021-02-05'), (2, 'France', '2021-03-18'), (3, 'Japan', '2021-06-24');\n\n## Query generation task:\nWhat is the total number of military equipment maintenance requests in Japan in the last 12 months?\n\n", "response": "SELECT COUNT(*) FROM MaintenanceRequests WHERE country = 'Japan' AND request_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH);"}, {"query": "## sql context :\nCREATE TABLE menu_items (item_id INT, item_name TEXT, is_vegetarian BOOLEAN); INSERT INTO menu_items (item_id, item_name, is_vegetarian) VALUES (1, 'Hamburger', false), (2, 'Pizza', true), (3, 'Chicken Sandwich', false);\n\n## Query generation task:\nWhat are the top 2 most frequently ordered vegetarian items?\n\n", "response": "SELECT item_name, COUNT(*) as order_count FROM menu_items WHERE is_vegetarian = true GROUP BY item_name ORDER BY order_count DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE orders (id SERIAL PRIMARY KEY, customer_id INTEGER, size VARCHAR(10)); INSERT INTO orders (customer_id, size) VALUES (1, 'M'), (2, 'XL'), (3, 'S'), (1, 'L'), (2, 'XL'), (3, 'M'), (4, 'XS');\n\n## Query generation task:\nList the top 5 most popular sizes among customers\n\n", "response": "SELECT size, COUNT(*) as popularity FROM orders GROUP BY size ORDER BY popularity DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE graduate_students (id INT, department VARCHAR(255), num_publications INT); INSERT INTO graduate_students (id, department, num_publications) VALUES (1, 'Computer Science', 2), (2, 'Physics', 3), (3, 'Mathematics', 1), (4, 'Computer Science', 4);\n\n## Query generation task:\nWhat is the average number of publications per graduate student by department?\n\n", "response": "SELECT department, AVG(num_publications) as avg_publications FROM graduate_students GROUP BY department;"}, {"query": "## sql context :\nCREATE TABLE patient (patient_id INT, age INT, gender TEXT, diagnosis TEXT, state TEXT); INSERT INTO patient (patient_id, age, gender, diagnosis, state) VALUES (1, 65, 'Male', 'Diabetes', 'Texas');\n\n## Query generation task:\nHow many patients diagnosed with diabetes in rural areas of Texas are male?\n\n", "response": "SELECT COUNT(patient_id) FROM patient WHERE diagnosis = 'Diabetes' AND state = 'Texas' AND gender = 'Male' AND location LIKE '%rural%';"}, {"query": "## sql context :\nCREATE TABLE public.trips_by_day_train (id SERIAL PRIMARY KEY, train_type TEXT, city TEXT, trips_on_day INTEGER); INSERT INTO public.trips_by_day_train (train_type, city, trips_on_day) VALUES ('autonomous_train', 'Beijing', 2000), ('autonomous_train', 'Beijing', 2500), ('autonomous_train', 'Beijing', 3000);\n\n## Query generation task:\nWhat is the maximum number of trips taken by autonomous trains in Beijing on a single day?\n\n", "response": "SELECT MAX(trips_on_day) FROM public.trips_by_day_train WHERE train_type = 'autonomous_train' AND city = 'Beijing';"}, {"query": "## sql context :\nCREATE TABLE ai_ethics (id INT PRIMARY KEY, initiative VARCHAR(50), organization VARCHAR(50), region VARCHAR(50), start_date DATE, end_date DATE, budget FLOAT);\n\n## Query generation task:\nCreate a table named 'ai_ethics' to store details about AI ethics initiatives\n\n", "response": "CREATE TABLE ai_ethics (id INT PRIMARY KEY, initiative VARCHAR(50), organization VARCHAR(50), region VARCHAR(50), start_date DATE, end_date DATE, budget FLOAT);"}, {"query": "## sql context :\nCREATE TABLE suppliers (id INT, supplier_name VARCHAR(100), industry VARCHAR(50), contact VARCHAR(50)); CREATE TABLE electronics_factories (id INT, factory_name VARCHAR(100), location VARCHAR(50), supplier_id INT); INSERT INTO suppliers (id, supplier_name, industry, contact) VALUES (1, 'Global Resources', 'Electronics', 'contact1@globalresources.com'); INSERT INTO electronics_factories (id, factory_name, location, supplier_id) VALUES (1, 'ElectroTech', 'USA', 1);\n\n## Query generation task:\nWhich suppliers provide raw materials to factories in the electronics industry?\n\n", "response": "SELECT s.supplier_name FROM suppliers s INNER JOIN electronics_factories ef ON s.id = ef.supplier_id WHERE s.industry = 'Electronics';"}, {"query": "## sql context :\nCREATE TABLE restaurant_revenue (item VARCHAR(50), revenue NUMERIC(10,2), sales_date DATE); INSERT INTO restaurant_revenue (item, revenue, sales_date) VALUES ('Chicken Caesar Salad', 25.00, '2022-02-22'), ('Organic Veggie Pizza', 120.50, '2022-01-01'), ('Organic Veggie Pizza', 155.25, '2022-01-02');\n\n## Query generation task:\nUpdate the revenue for 'Chicken Caesar Salad' on February 22, 2022 to 30.00?\n\n", "response": "UPDATE restaurant_revenue SET revenue = 30.00 WHERE item = 'Chicken Caesar Salad' AND sales_date = '2022-02-22';"}, {"query": "## sql context :\nCREATE TABLE SkincareProducts (product_id INT, product_name VARCHAR(255), price DECIMAL(5,2), is_vegan BOOLEAN, country VARCHAR(50));\n\n## Query generation task:\nWhat is the minimum price of vegan skincare products sold in the United Kingdom?\n\n", "response": "SELECT MIN(price) FROM SkincareProducts WHERE is_vegan = TRUE AND country = 'United Kingdom';"}, {"query": "## sql context :\nCREATE TABLE species (species_id INT, species_name VARCHAR(100)); INSERT INTO species (species_id, species_name) VALUES (1, 'Redwood'), (2, 'Douglas Fir'), (3, 'Spruce'), (4, 'Fir'); CREATE TABLE timber_production (production_id INT, species_id INT, year INT, volume INT); INSERT INTO timber_production (production_id, species_id, year, volume) VALUES (1, 1, 2000, 1200), (2, 1, 2001, 1300), (3, 2, 2000, 800), (4, 2, 2001, 850), (5, 3, 2000, 1500), (6, 3, 2001, 1600), (7, 4, 2000, 900), (8, 4, 2001, 950);\n\n## Query generation task:\nWhat is the average volume of timber produced per species and year?\n\n", "response": "SELECT species_name, year, AVG(volume) as avg_volume FROM timber_production tp JOIN species s ON tp.species_id = s.species_id GROUP BY species_name, year;"}, {"query": "## sql context :\nCREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (1, 'John Doe', 'Texas'), (2, 'Jane Smith', 'California'), (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');\n\n## Query generation task:\nHow many clients live in each state?\n\n", "response": "SELECT state, COUNT(*) FROM clients GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255)); INSERT INTO excavation_sites (site_id, site_name) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE artifacts (artifact_id INT, site_id INT, artifact_weight DECIMAL(5,2), artifact_type VARCHAR(255)); INSERT INTO artifacts (artifact_id, site_id, artifact_weight, artifact_type) VALUES (1, 1, 23.5, 'Pottery'), (2, 1, 15.3, 'Bone'), (3, 2, 8.9, 'Metal'), (4, 2, 34.7, 'Stone'), (5, 3, 100.2, 'Jewelry'), (6, 3, 12.8, 'Ceramic');\n\n## Query generation task:\nList all unique artifact types found at 'Site A'?\n\n", "response": "SELECT DISTINCT artifact_type FROM artifacts WHERE site_id = 1;"}, {"query": "## sql context :\nCREATE TABLE shark_biomass (species TEXT, biomass REAL, ocean TEXT); INSERT INTO shark_biomass (species, biomass, ocean) VALUES ('Great White', 2000.0, 'Atlantic'), ('Hammerhead', 1500.0, 'Atlantic'), ('Mako', 1000.0, 'Pacific');\n\n## Query generation task:\nWhat is the minimum biomass of sharks in the Atlantic Ocean?\n\n", "response": "SELECT MIN(biomass) FROM shark_biomass WHERE ocean = 'Atlantic';"}, {"query": "## sql context :\nCREATE TABLE low_value_contracts (id INT, contract_type VARCHAR(255), contract_value INT); INSERT INTO low_value_contracts (id, contract_type, contract_value) VALUES (1, 'Service', 500000), (2, 'Supply', 700000), (3, 'Research', 600000);\n\n## Query generation task:\nFind the defense contract with the lowest value\n\n", "response": "SELECT * FROM low_value_contracts WHERE contract_value = (SELECT MIN(contract_value) FROM low_value_contracts);"}, {"query": "## sql context :\nCREATE TABLE Retail_Workers_Union (union_member_id INT, member_id INT, safety_rating FLOAT, salary FLOAT); INSERT INTO Retail_Workers_Union (union_member_id, member_id, safety_rating, salary) VALUES (1, 101, 8.25, 45000.00), (1, 102, 9.00, 42000.00), (1, 103, 7.75, 50000.00), (2, 201, 8.50, 48000.00), (2, 202, 9.25, 36000.00);\n\n## Query generation task:\nCount the number of members in the 'Retail_Workers_Union' who have a safety rating above 8 and a salary above 40000.\n\n", "response": "SELECT COUNT(union_member_id) FROM Retail_Workers_Union WHERE safety_rating > 8 AND salary > 40000;"}, {"query": "## sql context :\nCREATE TABLE waste_types (id INT PRIMARY KEY, waste_type VARCHAR(255)); INSERT INTO waste_types (id, waste_type) VALUES (1, 'Plastic'), (2, 'Paper');\n\n## Query generation task:\nShow the number of waste types\n\n", "response": "SELECT COUNT(*) FROM waste_types;"}, {"query": "## sql context :\nCREATE TABLE ContractNegotiations (id INT, country1 VARCHAR(50), country2 VARCHAR(50), date DATE);CREATE TABLE RiskAssessments (id INT, country VARCHAR(50), risk_score INT);\n\n## Query generation task:\nList the defense contract negotiations involving the US and any other country, along with the associated geopolitical risk assessment scores, sorted by date in descending order.\n\n", "response": "SELECT ContractNegotiations.country1, ContractNegotiations.country2, ContractNegotiations.date, RiskAssessments.risk_score FROM ContractNegotiations INNER JOIN RiskAssessments ON (ContractNegotiations.country1 = RiskAssessments.country OR ContractNegotiations.country2 = RiskAssessments.country) WHERE (ContractNegotiations.country1 = 'US' OR ContractNegotiations.country2 = 'US') ORDER BY ContractNegotiations.date DESC;"}, {"query": "## sql context :\nCREATE TABLE building_stats (building_id INT, energy_star_rating INT, year_built INT);\n\n## Query generation task:\nWhat is the average energy efficiency rating (energy_star_rating) of buildings constructed before 2000 in the building_stats table?\n\n", "response": "SELECT AVG(energy_star_rating) FROM building_stats WHERE year_built < 2000;"}, {"query": "## sql context :\nCREATE TABLE Artists (id INT, name VARCHAR(100)); CREATE TABLE Streams (id INT, artist_id INT, minutes DECIMAL(10,2), year INT);\n\n## Query generation task:\nFind the top 5 artists by total streaming minutes in a given year.\n\n", "response": "SELECT a.name, SUM(s.minutes) AS total_minutes FROM Artists a JOIN Streams s ON a.id = s.artist_id WHERE s.year = 2021 GROUP BY a.name ORDER BY total_minutes DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE virtual_tours(tour_id INT, tour_name VARCHAR(50), location VARCHAR(50), booking_date DATE, bookings INT);\n\n## Query generation task:\nWhat is the average virtual tour bookings per day in New York?\n\n", "response": "SELECT AVG(bookings) FROM virtual_tours WHERE location = 'New York' GROUP BY DATE(booking_date);"}, {"query": "## sql context :\nCREATE TABLE mining_company_revenue (company_name VARCHAR(255), revenue INT, revenue_date DATE); INSERT INTO mining_company_revenue (company_name, revenue, revenue_date) VALUES ('Company A', 1000000, '2021-08-01'), ('Company B', 2000000, '2021-08-01'), ('Company C', 3000000, '2021-08-01'), ('Company A', 1500000, '2020-08-01'), ('Company B', 1800000, '2020-08-01');\n\n## Query generation task:\nList the top 10 mining companies by revenue in the past year?\n\n", "response": "SELECT company_name, revenue FROM (SELECT company_name, revenue, revenue_date, RANK() OVER (ORDER BY revenue DESC) as rnk FROM mining_company_revenue WHERE revenue_date >= DATEADD(year, -1, CURRENT_DATE)) t WHERE rnk <= 10;"}, {"query": "## sql context :\nCREATE TABLE Volunteers (id INT, disaster_id INT, volunteer_name TEXT, age INT, gender TEXT, city TEXT); INSERT INTO Volunteers (id, disaster_id, volunteer_name, age, gender, city) VALUES (4, 7, 'VolunteerD', 30, 'Male', 'CityJ'); INSERT INTO Volunteers (id, disaster_id, volunteer_name, age, gender, city) VALUES (5, 7, 'VolunteerE', 26, 'Female', 'CityJ'); INSERT INTO Volunteers (id, disaster_id, volunteer_name, age, gender, city) VALUES (6, 8, 'VolunteerF', 40, 'Male', 'CityK');\n\n## Query generation task:\nWhat is the total number of volunteers and the average age of volunteers from a specific city who participated in disaster response activities?\n\n", "response": "SELECT city, COUNT(*), AVG(age) FROM Volunteers WHERE city = 'CityJ' GROUP BY city;"}, {"query": "## sql context :\nCREATE TABLE ChemicalBatches (id INT, pH FLOAT, production_date DATE); INSERT INTO ChemicalBatches (id, pH, production_date) VALUES (1, 9.2, '2021-02-12'), (2, 8.5, '2021-03-04'), (3, 9.4, '2021-08-20');\n\n## Query generation task:\nList all chemical batches with a pH level above 9, produced in the USA since January 2021, along with their production dates.\n\n", "response": "SELECT id, pH, production_date FROM ChemicalBatches WHERE pH > 9 AND production_date >= '2021-01-01';"}, {"query": "## sql context :\nCREATE TABLE Artist_Data (artist_id INT, artist_name VARCHAR(255), category VARCHAR(255), num_pieces INT); INSERT INTO Artist_Data (artist_id, artist_name, category, num_pieces) VALUES (1, 'Paul Cezanne', 'Post-Impressionism', 80), (2, 'Claude Monet', 'Impressionism', 120), (3, 'Georges Seurat', 'Pointillism', 70);\n\n## Query generation task:\nWho are the top 3 artists with the highest number of art pieces in the 'Post-Impressionism' category?\n\n", "response": "SELECT artist_name, num_pieces FROM (SELECT artist_name, category, num_pieces, RANK() OVER (PARTITION BY category ORDER BY num_pieces DESC) AS rank FROM Artist_Data) tmp WHERE rank <= 3 AND category = 'Post-Impressionism';"}, {"query": "## sql context :\nCREATE TABLE Faculty(FacultyID INT, Department VARCHAR(255), Gender VARCHAR(255)); INSERT INTO Faculty(FacultyID, Department, Gender) VALUES (1, 'Computer Science', 'Male'), (2, 'Computer Science', 'Female'); CREATE TABLE ResearchGrants(GranteeID INT, GrantAmount DECIMAL(10, 2)); INSERT INTO ResearchGrants(GranteeID, GrantAmount) VALUES (1, 50000), (2, 75000);\n\n## Query generation task:\nWhat is the average number of research grants awarded to female faculty members in the Computer Science department?\n\n", "response": "SELECT AVG(GrantAmount) FROM ResearchGrants JOIN Faculty ON Faculty.FacultyID = ResearchGrants.GranteeID WHERE Faculty.Department = 'Computer Science' AND Faculty.Gender = 'Female';"}, {"query": "## sql context :\nCREATE TABLE public_buildings (name VARCHAR(255), state VARCHAR(255), size DECIMAL(10,2)); INSERT INTO public_buildings (name, state, size) VALUES ('Building1', 'New York', 120000), ('Building2', 'New York', 150000), ('Building3', 'Illinois', 180000);\n\n## Query generation task:\nWhat is the total number of public buildings in New York and Illinois?\n\n", "response": "SELECT SUM(size) FROM public_buildings WHERE state IN ('New York', 'Illinois');"}, {"query": "## sql context :\nCREATE TABLE professionals (id INT, name TEXT, state TEXT, location TEXT, profession TEXT);\n\n## Query generation task:\nWhat is the total number of medical professionals in urban areas of Alaska?\n\n", "response": "SELECT COUNT(*) FROM professionals WHERE state = 'Alaska' AND location = 'urban';"}, {"query": "## sql context :\nCREATE TABLE states (state_id INT PRIMARY KEY, state_name VARCHAR(255)); INSERT INTO states (state_id, state_name) VALUES (1, 'Alabama'), (2, 'Alaska'), (3, 'Arizona'); CREATE TABLE medical_professionals (state_id INT, profession_count INT); INSERT INTO medical_professionals (state_id, profession_count) VALUES (1, 5000), (2, 6000), (3, 7000);\n\n## Query generation task:\nWhat is the number of medical professionals per state?\n\n", "response": "SELECT s.state_name, mp.profession_count FROM states s JOIN medical_professionals mp ON s.state_id = mp.state_id;"}, {"query": "## sql context :\nCREATE TABLE waste_generation (country VARCHAR(50), year INT, waste_generation_grams INT, population INT); INSERT INTO waste_generation (country, year, waste_generation_grams, population) VALUES ('Germany', 2020, 7000000, 80000000), ('France', 2020, 6000000, 65000000), ('Italy', 2020, 5000000, 60000000);\n\n## Query generation task:\nWhat is the average waste generation per capita in grams for each country in Europe in 2020, ordered by the greatest average amount?\n\n", "response": "SELECT country, AVG(waste_generation_grams / population) as avg_waste_generation_per_capita FROM waste_generation WHERE year = 2020 GROUP BY country ORDER BY avg_waste_generation_per_capita DESC;"}, {"query": "## sql context :\nCREATE TABLE rural_clinics (patient_id INT, age INT, gender VARCHAR(10), country VARCHAR(20));\n\n## Query generation task:\nWhat is the minimum age of patients in rural_clinics from Mexico?\n\n", "response": "SELECT MIN(age) FROM rural_clinics WHERE country = 'Mexico';"}, {"query": "## sql context :\nCREATE TABLE Orders (OrderID INT, OrderDate DATE, DishID INT, Quantity INT); CREATE TABLE Dishes (DishID INT, DishName VARCHAR(50), Category VARCHAR(50), Price DECIMAL(5,2), IsVegetarian INT); INSERT INTO Dishes (DishID, DishName, Category, Price, IsVegetarian) VALUES (1, 'Veggie Pizza', 'Pizza', 12.99, 1), (2, 'Margherita Pizza', 'Pizza', 10.99, 1), (3, 'Chicken Caesar Salad', 'Salad', 15.49, 0), (4, 'Garden Salad', 'Salad', 11.99, 1); INSERT INTO Orders (OrderID, OrderDate, DishID, Quantity) VALUES (1, '2022-01-01', 1, 2), (2, '2022-01-02', 2, 1), (3, '2022-01-03', 3, 3), (4, '2022-01-04', 1, 1), (5, '2022-02-05', 4, 2);\n\n## Query generation task:\nWhat is the total sales of vegetarian dishes by month?\n\n", "response": "SELECT EXTRACT(MONTH FROM OrderDate) as Month, SUM(Quantity * Price) as TotalSales FROM Orders JOIN Dishes ON Orders.DishID = Dishes.DishID WHERE IsVegetarian = 1 GROUP BY Month;"}, {"query": "## sql context :\nCREATE TABLE sales (sale_id INT, vendor_id INT, revenue DECIMAL(5,2)); INSERT INTO sales (sale_id, vendor_id, revenue) VALUES (1, 1, 100.00), (2, 1, 200.00), (3, 2, 300.00), (4, 3, 400.00), (5, 3, 500.00), (6, 4, 600.00); CREATE TABLE vendors (vendor_id INT, region TEXT); INSERT INTO vendors (vendor_id, region) VALUES (1, 'North America'), (2, 'South America'), (3, 'Europe'), (4, 'Asia');\n\n## Query generation task:\nWhat is the sum of revenues for each vendor in a specific region?\n\n", "response": "SELECT vendors.region, SUM(sales.revenue) FROM vendors INNER JOIN sales ON vendors.vendor_id = sales.vendor_id GROUP BY vendors.region;"}, {"query": "## sql context :\nCREATE TABLE AquaticFarm (date DATE, temperature FLOAT); INSERT INTO AquaticFarm (date, temperature) VALUES ('2022-02-01', 21.0), ('2022-02-02', 22.0), ('2022-02-03', 23.0);\n\n## Query generation task:\nWhat is the maximum water temperature in the AquaticFarm table for February 2022?\n\n", "response": "SELECT MAX(temperature) FROM AquaticFarm WHERE MONTH(date) = 2 AND YEAR(date) = 2022;"}, {"query": "## sql context :\nCREATE TABLE arctic_marine_species (id INT, species TEXT, region TEXT); INSERT INTO arctic_marine_species (id, species, region) VALUES (1, 'Beluga Whale', 'Arctic'), (2, 'Narwhal', 'Arctic');\n\n## Query generation task:\nFind the number of unique marine species in the Arctic Ocean region.\n\n", "response": "SELECT COUNT(DISTINCT species) FROM arctic_marine_species WHERE region = 'Arctic';"}, {"query": "## sql context :\nCREATE TABLE Contractors (id INT, name TEXT, labor_cost INT);CREATE VIEW Contractor_Labor_Costs AS SELECT contractor_id, SUM(labor_cost) as total_labor_cost FROM Construction_Labor JOIN Contractors ON Construction_Labor.contractor_id = Contractors.id GROUP BY contractor_id;\n\n## Query generation task:\nWho are the top 3 contractors by total labor cost in Florida?\n\n", "response": "SELECT name, total_labor_cost FROM Contractor_Labor_Costs JOIN Contractors ON Contractor_Labor_Costs.contractor_id = Contractors.id WHERE state = 'Florida' ORDER BY total_labor_cost DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE flu_shots (patient_id INT, state VARCHAR(255)); CREATE TABLE patients (patient_id INT, age INT); INSERT INTO flu_shots (patient_id, state) VALUES (1, 'Texas'), (2, 'Texas'); INSERT INTO patients (patient_id, age) VALUES (1, 70), (2, 60);\n\n## Query generation task:\nHow many flu shots were administered to patients over 65 in Texas?\n\n", "response": "SELECT COUNT(*) FROM flu_shots f INNER JOIN patients p ON f.patient_id = p.patient_id WHERE p.age > 65 AND f.state = 'Texas';"}, {"query": "## sql context :\nCREATE TABLE WasteGeneration (ID INT PRIMARY KEY, WasteType VARCHAR(50), Sector VARCHAR(50), City VARCHAR(50), Year INT, Quantity DECIMAL(10,2)); INSERT INTO WasteGeneration (ID, WasteType, Sector, City, Year, Quantity) VALUES (3, 'Organic Waste', 'Commercial', 'Mumbai', 2020, 8000.00), (4, 'E-Waste', 'Residential', 'Mumbai', 2020, 2000.00);\n\n## Query generation task:\nWhat was the total waste generated in the city of Mumbai in 2020, categorized by waste type?\n\n", "response": "SELECT WasteType, SUM(Quantity) FROM WasteGeneration WHERE City = 'Mumbai' AND Year = 2020 GROUP BY WasteType;"}, {"query": "## sql context :\nCREATE TABLE project (project_id INT, name VARCHAR(50), location VARCHAR(50), budget FLOAT, launch_date DATE); CREATE TABLE location (location_id INT, name VARCHAR(50), continent_id INT); CREATE TABLE continent (continent_id INT, name VARCHAR(50), description TEXT); INSERT INTO continent (continent_id, name, description) VALUES (1, 'Asia', 'The largest and most populous continent.'); INSERT INTO location (location_id, name, continent_id) VALUES (1, 'Southeast Asia', 1);\n\n## Query generation task:\nWhat is the average budget of agricultural innovation projects in Southeast Asia?\n\n", "response": "SELECT AVG(p.budget) FROM project p JOIN location l ON p.location = l.name JOIN continent c ON l.continent_id = c.continent_id WHERE c.name = 'Asia' AND l.name = 'Southeast Asia';"}, {"query": "## sql context :\nCREATE TABLE landfill_capacity_north_america (country VARCHAR(50), year INT, capacity FLOAT); INSERT INTO landfill_capacity_north_america (country, year, capacity) VALUES ('Canada', 2021, 12000000.0), ('Mexico', 2021, 15000000.0), ('USA', 2021, 20000000.0);\n\n## Query generation task:\nWhat is the total landfill capacity in cubic meters for each country in North America in 2021?\n\n", "response": "SELECT country, SUM(capacity) FROM landfill_capacity_north_america WHERE year = 2021 GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE Companies (id INT, name TEXT, founder_group TEXT); INSERT INTO Companies (id, name, founder_group) VALUES (1, 'NativeRoot', 'Native American'), (2, 'Women in Power', 'Female'), (3, 'Green Horizons', 'Minority');\n\n## Query generation task:\nInsert new companies founded by underrepresented groups.\n\n", "response": "INSERT INTO Companies (id, name, founder_group) VALUES (4, 'QueerTech', 'LGBTQ+'), (5, 'Accessible Solutions', 'Disabled'), (6, 'International Innovations', 'Immigrant');"}, {"query": "## sql context :\nCREATE TABLE startups(id INT, name TEXT, founded_year INT, exit_strategy TEXT); INSERT INTO startups (id, name, founded_year, exit_strategy) VALUES (1, 'Kappa Inc', 2016, 'Acquisition'); INSERT INTO startups (id, name, founded_year, exit_strategy) VALUES (2, 'Lambda Corp', 2015, 'IPO'); INSERT INTO startups (id, name, founded_year, exit_strategy) VALUES (3, 'Mu Startup', 2017, 'Merger');\n\n## Query generation task:\nList all exit strategies for startups founded in 2016\n\n", "response": "SELECT * FROM startups WHERE founded_year = 2016;"}, {"query": "## sql context :\nCREATE TABLE countries (country_id INT, country_name VARCHAR(255)); INSERT INTO countries VALUES (1, 'CountryA'), (2, 'CountryB'); CREATE TABLE life_expectancy (country_id INT, life_expectancy DECIMAL(5,2), year INT); INSERT INTO life_expectancy VALUES (1, 75.5, 2020), (2, 80.3, 2020);\n\n## Query generation task:\nWhat is the average life expectancy in each country?\n\n", "response": "SELECT countries.country_name, AVG(life_expectancy) AS avg_life_expectancy FROM countries INNER JOIN life_expectancy ON countries.country_id = life_expectancy.country_id GROUP BY countries.country_name;"}, {"query": "## sql context :\nCREATE TABLE apac_hotel_views (hotel_id INT, hotel_name VARCHAR(255), views INT);\n\n## Query generation task:\nWhat is the total virtual tour engagement for each hotel in APAC?\n\n", "response": "SELECT hotel_id, hotel_name, SUM(views) FROM apac_hotel_views GROUP BY hotel_id, hotel_name;"}, {"query": "## sql context :\nCREATE TABLE Budget(Year INT, Service VARCHAR(20), Budget FLOAT); INSERT INTO Budget VALUES(2020, 'Education', 15000000), (2020, 'Healthcare', 20000000), (2021, 'Education', 17000000), (2021, 'Healthcare', 22000000), (2020, 'Public Transport', 10000000), (2021, 'Public Transport', 11000000);\n\n## Query generation task:\nFind the total budget allocated for education services in 2020 and 2021 and display the result as a percentage of the total budget for all services in these two years.\n\n", "response": "SELECT (SUM(CASE WHEN Service = 'Education' THEN Budget ELSE 0 END) / SUM(Budget)) * 100 FROM Budget WHERE Year IN (2020, 2021);"}, {"query": "## sql context :\nCREATE TABLE Funding (SiteID INT, FundingAgency TEXT, FundingDate DATE); INSERT INTO Funding (SiteID, FundingAgency, FundingDate) VALUES (5, 'Mexican Government', '2005-02-01'), (6, 'Spanish Government', '2010-03-01'), (7, 'American Government', '2015-04-01');\n\n## Query generation task:\nWho funded the excavation of 'Palenque' and what was the date?\n\n", "response": "SELECT FundingAgency, FundingDate FROM Funding f JOIN ExcavationSites e ON f.SiteID = e.SiteID WHERE e.SiteName = 'Palenque';"}, {"query": "## sql context :\nCREATE TABLE public_transportation (route VARCHAR(20), trip_count INT, trip_date DATE); INSERT INTO public_transportation (route, trip_count, trip_date) VALUES ('Route 10', 1000, '2023-01-01');\n\n## Query generation task:\nWhat is the total number of public transportation trips taken in the city of San Francisco, including all routes, for the month of January 2023?\n\n", "response": "SELECT SUM(trip_count) FROM public_transportation WHERE trip_date BETWEEN '2023-01-01' AND '2023-01-31';"}, {"query": "## sql context :\nCREATE TABLE Genres (GenreID INT PRIMARY KEY AUTO_INCREMENT, Name VARCHAR(50));\n\n## Query generation task:\nRemove genre 'K-pop' from the Genres table\n\n", "response": "DELETE FROM Genres WHERE Name = 'K-pop';"}, {"query": "## sql context :\nCREATE TABLE tv_shows (id INT, name VARCHAR(100)); CREATE TABLE episodes (id INT, tv_show_id INT, season_number INT, episode_number INT, runtime INT); INSERT INTO tv_shows (id, name) VALUES (1, 'Show1'), (2, 'Show2'); INSERT INTO episodes (id, tv_show_id, season_number, episode_number, runtime) VALUES (1, 1, 1, 1, 30), (2, 1, 1, 2, 30), (3, 2, 1, 1, 60);\n\n## Query generation task:\nWhat is the total runtime of all episodes of a specific TV show in the \"episodes\" table?\n\n", "response": "SELECT SUM(runtime) FROM episodes WHERE tv_show_id = 1;"}, {"query": "## sql context :\nCREATE TABLE mobile_subscribers (id INT, name VARCHAR(50), data_usage FLOAT, subscription_plan VARCHAR(50), last_update DATE); INSERT INTO mobile_subscribers (id, name, data_usage, subscription_plan, last_update) VALUES (1, 'John Doe', 3.5, 'Basic', '2021-08-01'); INSERT INTO mobile_subscribers (id, name, data_usage, subscription_plan, last_update) VALUES (2, 'Jane Smith', 5.2, 'Premium', '2021-08-01');\n\n## Query generation task:\nWhat is the average data usage per mobile user, partitioned by their subscription plan, for the past 12 months?\n\n", "response": "SELECT subscription_plan, AVG(data_usage) as avg_data_usage FROM (SELECT subscription_plan, data_usage, last_update, ROW_NUMBER() OVER (PARTITION BY subscription_plan, YEAR(last_update) - MONTH(last_update) / 12 ORDER BY last_update DESC) as rn FROM mobile_subscribers WHERE last_update >= DATEADD(year, -1, GETDATE())) x WHERE rn = 1 GROUP BY subscription_plan;"}, {"query": "## sql context :\nCREATE TABLE diversion_programs (program_id INT, region VARCHAR(255), juvenile BOOLEAN); INSERT INTO diversion_programs (program_id, region, juvenile) VALUES (1, 'Northern', FALSE), (2, 'Southern', TRUE), (3, 'Southern', TRUE), (4, 'Eastern', FALSE), (5, 'Southern', TRUE), (6, 'Western', FALSE);\n\n## Query generation task:\nCalculate the total number of diversion programs for juveniles in the southern region\n\n", "response": "SELECT SUM(juvenile) FROM diversion_programs WHERE region = 'Southern';"}, {"query": "## sql context :\nCREATE TABLE english_premier_league (team_id INT, team_name VARCHAR(50), matches_played INT); INSERT INTO english_premier_league (team_id, team_name, matches_played) VALUES (1, 'Manchester City', 38), (2, 'Liverpool', 38), (3, 'Chelsea', 38);\n\n## Query generation task:\nHow many matches did each soccer team in the English Premier League play in the 2021-2022 season?\n\n", "response": "SELECT team_name, matches_played FROM english_premier_league;"}, {"query": "## sql context :\nCREATE TABLE initiative_types (id INT, initiative_type TEXT); INSERT INTO initiative_types (id, initiative_type) VALUES (1, 'Education'), (2, 'Health'), (3, 'Environment'), (4, 'Social Services');\n\n## Query generation task:\nIdentify the organizations that have received grants for all initiative types.\n\n", "response": "SELECT organization_id FROM grants GROUP BY organization_id HAVING COUNT(DISTINCT initiative_type) = (SELECT COUNT(*) FROM initiative_types);"}, {"query": "## sql context :\nCREATE TABLE rare_earth_companies (company_name VARCHAR(50), region VARCHAR(20)); INSERT INTO rare_earth_companies VALUES ('Magna', 'North America'), ('Lynas', 'Asia'), ('Bushveld', 'Africa'), ('Iluka', 'Australia');\n\n## Query generation task:\nHow many distinct regions are there in the 'rare_earth_companies' table?\n\n", "response": "SELECT COUNT(DISTINCT region) FROM rare_earth_companies;"}, {"query": "## sql context :\nCREATE TABLE faculty (id INT, name VARCHAR(100), department VARCHAR(50), gender VARCHAR(50)); INSERT INTO faculty VALUES (1, 'Alex Smith', 'Physics', 'Non-binary');\n\n## Query generation task:\nWhat is the average number of research grants received by non-binary faculty members in the Physics department?\n\n", "response": "SELECT AVG(number_of_grants) FROM (SELECT faculty.gender, COUNT(grants.id) AS number_of_grants FROM faculty JOIN grants ON faculty.id = grants.faculty_id WHERE faculty.department = 'Physics' AND faculty.gender = 'Non-binary' GROUP BY faculty.id) AS subquery;"}, {"query": "## sql context :\nCREATE TABLE farmers (id INT PRIMARY KEY, name VARCHAR(50), age INT, gender VARCHAR(10), location VARCHAR(50)); INSERT INTO farmers (id, name, age, gender, location) VALUES (1, 'John Doe', 35, 'Male', 'USA'); INSERT INTO farmers (id, name, age, gender, location) VALUES (2, 'Jane Smith', 40, 'Female', 'Canada'); CREATE VIEW older_farmers AS SELECT * FROM farmers WHERE age > 45;\n\n## Query generation task:\nDisplay records from the 'older_farmers' view\n\n", "response": "SELECT * FROM older_farmers;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists africa_schema;CREATE TABLE africa_schema.african_mines (id INT, name VARCHAR, location VARCHAR, production_value DECIMAL);INSERT INTO africa_schema.african_mines (id, name, location, production_value) VALUES (1, 'G mining', 'Ghana', 1500000.00), (2, 'K gold', 'Kenya', 800000.00);\n\n## Query generation task:\nWhich mining operations in 'african_mines' have a production value higher than $1000000?\n\n", "response": "SELECT name FROM africa_schema.african_mines WHERE production_value > 1000000;"}, {"query": "## sql context :\nCREATE TABLE Accessible_Tech_Categories (country VARCHAR(50), category VARCHAR(50), initiatives INT); INSERT INTO Accessible_Tech_Categories (country, category, initiatives) VALUES ('China', 'hardware', 1000), ('China', 'software', 1500), ('China', 'training', 1200), ('India', 'hardware', 800), ('India', 'software', 1100), ('India', 'training', 900), ('Indonesia', 'hardware', 600), ('Indonesia', 'software', 800), ('Indonesia', 'training', 700);\n\n## Query generation task:\nList the number of accessible technology initiatives in each category, for the top 3 most populous countries?\n\n", "response": "SELECT Accessible_Tech_Categories.category, SUM(Accessible_Tech_Categories.initiatives) FROM Accessible_Tech_Categories WHERE Accessible_Tech_Categories.country IN (SELECT Accessible_Tech_Categories.country FROM Accessible_Tech_Categories GROUP BY Accessible_Tech_Categories.country ORDER BY COUNT(Accessible_Tech_Categories.country) DESC LIMIT 3) GROUP BY Accessible_Tech_Categories.category;"}, {"query": "## sql context :\nCREATE TABLE funding_sources (id INT, event_name TEXT, funding_source_type TEXT, amount_funded INT); INSERT INTO funding_sources (id, event_name, funding_source_type, amount_funded) VALUES (1, 'Art Exhibit', 'Private', 5000), (2, 'Photography Show', 'Corporate', 10000);\n\n## Query generation task:\nWhat is the total amount of funding received by events in the 'visual arts' category, grouped by the funding source type?\n\n", "response": "SELECT funding_source_type, SUM(amount_funded) FROM funding_sources WHERE event_name IN (SELECT event_name FROM events WHERE event_category = 'visual arts') GROUP BY funding_source_type;"}, {"query": "## sql context :\nCREATE TABLE sites_me (site_id INT, site_name VARCHAR(255), country_name VARCHAR(255), region VARCHAR(255)); INSERT INTO sites_me (site_id, site_name, country_name, region) VALUES (1, 'Petra', 'Jordan', 'Middle East');\n\n## Query generation task:\nWhat is the total number of cultural heritage sites in the Middle Eastern region?\n\n", "response": "SELECT COUNT(*) FROM sites_me WHERE region = 'Middle East';"}, {"query": "## sql context :\nCREATE TABLE solana_transactions (transaction_id TEXT, gas_fee INTEGER, transaction_date DATE);\n\n## Query generation task:\nWhat is the maximum and minimum gas fee for transactions on the Solana network in the past month?\n\n", "response": "SELECT MAX(gas_fee) AS max_fee, MIN(gas_fee) AS min_fee FROM solana_transactions WHERE transaction_date >= DATEADD(month, -1, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE digital_trends (trend_id INT, name VARCHAR(20), popularity_score INT);\n\n## Query generation task:\nAdd new records to the 'digital_trends' table for trends with IDs 9 and 10, names 'Machine Learning' and 'Blockchain', and popularity scores of 85 and 60, respectively\n\n", "response": "INSERT INTO digital_trends (trend_id, name, popularity_score) VALUES (9, 'Machine Learning', 85), (10, 'Blockchain', 60);"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID int, EmployeeName varchar(50), Department varchar(50), Salary float, Gender varchar(10)); INSERT INTO Employees (EmployeeID, EmployeeName, Department, Salary, Gender) VALUES (1, 'John Doe', 'IT', 80000, 'Male'), (2, 'Jane Smith', 'HR', 70000, 'Female'), (3, 'Mike Johnson', 'IT', 85000, 'Male');\n\n## Query generation task:\nWhat is the average salary of male employees per department?\n\n", "response": "SELECT Department, AVG(Salary) as Avg_Salary FROM Employees WHERE Gender = 'Male' GROUP BY Department;"}, {"query": "## sql context :\nCREATE TABLE mental_health_parity (id INT PRIMARY KEY, state VARCHAR(2), parity_law VARCHAR(255));\n\n## Query generation task:\nFind states with more than 3 mental health parity laws.\n\n", "response": "SELECT state, COUNT(*) as parity_law_count FROM mental_health_parity WHERE parity_law = 'yes' GROUP BY state HAVING COUNT(*) > 3;"}, {"query": "## sql context :\nCREATE TABLE wind_energy_projects (project_id INT, state VARCHAR(20), year INT, installed_capacity FLOAT);\n\n## Query generation task:\nWhat was the total installed capacity (in MW) of wind energy projects in California in 2020?\n\n", "response": "SELECT SUM(installed_capacity) FROM wind_energy_projects WHERE state = 'California' AND year = 2020;"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID int, DonorName varchar(50), DonationDate date, DonationAmount decimal(10,2), Age int); INSERT INTO Donors (DonorID, DonorName, DonationDate, DonationAmount, Age) VALUES (1, 'Jane Doe', '2021-02-01', 20.00, 35), (2, 'Jim Brown', '2021-03-15', 50.00, 42), (3, 'Fatima Khan', '2021-04-01', 7.50, 28);\n\n## Query generation task:\nWhat was the average donation amount by age group in 2021, excluding donations below $10?\n\n", "response": "SELECT Age, AVG(DonationAmount) as AverageDonationAmount FROM Donors WHERE DonationAmount >= 10 AND YEAR(DonationDate) = 2021 GROUP BY Age;"}, {"query": "## sql context :\nCREATE TABLE donors (id INT, name TEXT, country TEXT, amount_donated DECIMAL(10,2)); INSERT INTO donors (id, name, country, amount_donated) VALUES (1, 'Alice', 'United States', 5000.00), (2, 'Bob', 'Canada', 6000.00), (3, 'Charlie', 'India', 3000.00);\n\n## Query generation task:\nUpdate the donation amount of the donor from India to 4000.\n\n", "response": "UPDATE donors SET amount_donated = 4000 WHERE country = 'India';"}, {"query": "## sql context :\nCREATE TABLE student_access (student_id INT, resource_id INT, access_date DATE); CREATE TABLE open_pedagogy_resources (resource_id INT, resource_name VARCHAR(255));\n\n## Query generation task:\nWhich open pedagogy resources have been accessed by students in total, and how many times have they been accessed?\n\n", "response": "SELECT r.resource_name, COUNT(s.access_date) FROM student_access s INNER JOIN open_pedagogy_resources r ON s.resource_id = r.resource_id GROUP BY r.resource_name;"}, {"query": "## sql context :\nCREATE TABLE ClassicGame (GameID INT, PlayerID INT, Score INT); INSERT INTO ClassicGame (GameID, PlayerID, Score) VALUES (2001, 1, 85), (2002, 2, 95), (2003, 3, 100);\n\n## Query generation task:\nWhat is the maximum score in the 'ClassicGame' table?\n\n", "response": "SELECT MAX(Score) FROM ClassicGame;"}, {"query": "## sql context :\nCREATE TABLE suppliers (supplier_id INT, company VARCHAR(30), country VARCHAR(20)); INSERT INTO suppliers VALUES (1, 'Hong Supplies', 'China'), (2, 'Metal Masters', 'USA'), (3, 'Green Goods', 'Canada'), (4, 'Global Gadgets', 'China'), (5, 'Fair Trade Fabrics', 'Bangladesh');\n\n## Query generation task:\nDelete all records from the 'suppliers' table where 'country' is 'China'.\n\n", "response": "DELETE FROM suppliers WHERE country = 'China';"}, {"query": "## sql context :\nCREATE TABLE smart_contracts (id INT, name VARCHAR(255), country VARCHAR(50)); INSERT INTO smart_contracts (id, name, country) VALUES (1, 'SC1', 'Country1'); INSERT INTO smart_contracts (id, name, country) VALUES (2, 'SC2', 'Country2'); INSERT INTO smart_contracts (id, name, country) VALUES (3, 'SC3', 'Country1'); INSERT INTO smart_contracts (id, name, country) VALUES (4, 'SC4', 'Country3'); INSERT INTO smart_contracts (id, name, country) VALUES (5, 'SC5', 'Country1'); CREATE TABLE countries (id INT, name VARCHAR(255)); INSERT INTO countries (id, name) VALUES (1, 'Country1'); INSERT INTO countries (id, name) VALUES (2, 'Country2'); INSERT INTO countries (id, name) VALUES (3, 'Country3');\n\n## Query generation task:\nWhat are the top 3 countries with the most smart contracts?\n\n", "response": "SELECT country, COUNT(*) as smart_contract_count FROM smart_contracts GROUP BY country ORDER BY smart_contract_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE shipments (id INT, supplier_id INT, organic BOOLEAN, year INT, total_shipped INT); INSERT INTO shipments (id, supplier_id, organic, year, total_shipped) VALUES (1, 1, true, 2021, 500), (2, 2, false, 2022, 600), (3, 3, true, 2021, 400);\n\n## Query generation task:\nIdentify the supplier with the highest total organic product shipments in 2021?\n\n", "response": "SELECT supplier_id, SUM(total_shipped) as total_organic_shipments FROM shipments WHERE organic = true AND year = 2021 GROUP BY supplier_id ORDER BY total_organic_shipments DESC FETCH FIRST 1 ROW ONLY;"}, {"query": "## sql context :\nCREATE TABLE NetworkDevices (id INT, device_name VARCHAR(50), severity VARCHAR(10), discovered_date DATE); INSERT INTO NetworkDevices (id, device_name, severity, discovered_date) VALUES (1, 'Router1', 'High', '2021-08-01'), (2, 'Switch1', 'Medium', '2021-07-15'), (3, 'Firewall1', 'Low', '2021-06-01'), (4, 'Router2', 'High', '2021-09-01'), (5, 'Switch2', 'Low', '2021-07-15');\n\n## Query generation task:\nWhat is the distribution of vulnerabilities by severity in the 'NetworkDevices' table, in a pie chart?\n\n", "response": "SELECT severity, COUNT(*) as total_vulnerabilities FROM NetworkDevices GROUP BY severity;"}, {"query": "## sql context :\nCREATE TABLE vessels (vessel_id INT, vessel_name TEXT); INSERT INTO vessels (vessel_id, vessel_name) VALUES (1, 'Vessel A'), (2, 'Vessel B'); CREATE TABLE visits (visit_id INT, vessel_id INT, port_id INT, visit_date DATE); INSERT INTO visits (visit_id, vessel_id, port_id, visit_date) VALUES (1, 1, 3, '2021-02-01'), (2, 2, 3, '2021-03-01'), (3, 1, 3, '2021-04-01');\n\n## Query generation task:\nList all vessels that have visited port 'Singapore' since 2021-01-01 ordered by their last visit date.\n\n", "response": "SELECT vessel_name, MAX(visit_date) FROM visits JOIN vessels ON visits.vessel_id = vessels.vessel_id WHERE port_id = (SELECT port_id FROM ports WHERE port_name = 'Singapore') AND visit_date >= '2021-01-01' GROUP BY vessel_name ORDER BY MAX(visit_date) DESC;"}, {"query": "## sql context :\nCREATE TABLE military_contracts (contract_id INT, company_gender TEXT, country TEXT, contract_value FLOAT); INSERT INTO military_contracts (contract_id, company_gender, country, contract_value) VALUES (1, 'Women-Owned Business', 'India', 5000000);\n\n## Query generation task:\nWhat is the total value of military contracts awarded to women-owned businesses in India, in descending order?\n\n", "response": "SELECT SUM(contract_value) FROM military_contracts WHERE country = 'India' AND company_gender = 'Women-Owned Business' ORDER BY contract_value DESC;"}, {"query": "## sql context :\nCREATE TABLE DefenseAgreements (AgreementID INT, Country VARCHAR(50), AgreementType VARCHAR(50), StartDate DATE, EndDate DATE);\n\n## Query generation task:\nWhat is the total number of defense agreements between the USA and countries in the APAC region?\n\n", "response": "SELECT COUNT(AgreementID) FROM DefenseAgreements WHERE Country IN (SELECT Country FROM Countries WHERE Region = 'APAC') AND AgreementType = 'Defense Agreement';"}, {"query": "## sql context :\nCREATE TABLE ArcticOcean (seal_species TEXT, population INT); INSERT INTO ArcticOcean (seal_species, population) VALUES ('Ringed Seal', 750000), ('Bearded Seal', 250000), ('Hooded Seal', 50000);\n\n## Query generation task:\nWhat is the average population of seals in the Arctic Ocean?\n\n", "response": "SELECT AVG(population) FROM ArcticOcean WHERE seal_species IS NOT NULL;"}, {"query": "## sql context :\nCREATE TABLE Plants (id INT, name VARCHAR(50), department VARCHAR(50));\n\n## Query generation task:\nWhat is the average salary of workers in the Manufacturing plant?\n\n", "response": "SELECT AVG(e.salary) FROM Employees e JOIN Plants p ON e.department = p.name WHERE p.name = 'Manufacturing';"}, {"query": "## sql context :\nCREATE TABLE redundant_billing_data (bill_id INT PRIMARY KEY, attorney_id INT, amount DECIMAL(10,2), bill_date DATE);\n\n## Query generation task:\nDelete the table for storing redundant billing data\n\n", "response": "DROP TABLE redundant_billing_data;"}, {"query": "## sql context :\nCREATE TABLE european_healthcare (model_name TEXT, explainability_score FLOAT); INSERT INTO european_healthcare (model_name, explainability_score) VALUES ('model1', 0.85), ('model2', 0.90), ('model3', 0.88);\n\n## Query generation task:\nWhat is the average explainability score for models trained on the 'european_healthcare' dataset?\n\n", "response": "SELECT AVG(explainability_score) FROM european_healthcare;"}, {"query": "## sql context :\nCREATE TABLE events (id INT PRIMARY KEY, event_name VARCHAR(100), event_type VARCHAR(50), num_tickets_sold INT);\n\n## Query generation task:\nHow many total tickets were sold for outdoor concerts in the 'events' table?\n\n", "response": "SELECT SUM(num_tickets_sold) AS total_tickets_sold FROM events WHERE event_type = 'Outdoor Concert';"}, {"query": "## sql context :\nCREATE TABLE green_buildings (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size INT, certification VARCHAR(50));\n\n## Query generation task:\nShow all buildings and their certifications from 'green_buildings'\n\n", "response": "SELECT name, certification FROM green_buildings;"}, {"query": "## sql context :\nCREATE TABLE LegalAidRequests (Year INT, Request TEXT, Status TEXT); INSERT INTO LegalAidRequests (Year, Request, Status) VALUES (2020, 'Request A', 'Resolved'), (2020, 'Request B', 'Unresolved'), (2020, 'Request C', 'Resolved'), (2021, 'Request D', 'Resolved'), (2021, 'Request E', 'Unresolved'), (2021, 'Request F', 'Resolved');\n\n## Query generation task:\nWhat is the total number of legal aid requests and their resolution status for a given year?\n\n", "response": "SELECT Year, Status, COUNT(Request) FROM LegalAidRequests GROUP BY Year, Status;"}, {"query": "## sql context :\nCREATE TABLE SafetyOrgs (name VARCHAR(20), country VARCHAR(10)); INSERT INTO SafetyOrgs (name, country) VALUES ('Euro NCAP', 'UK'); INSERT INTO SafetyOrgs (name, country) VALUES ('ADAC', 'Germany'); INSERT INTO SafetyOrgs (name, country) VALUES ('UTAC', 'France'); INSERT INTO SafetyOrgs (name, country) VALUES ('DEKRA', 'Germany');\n\n## Query generation task:\nWhat are the vehicle safety testing organizations that operate in the UK, France, and Germany?\n\n", "response": "SELECT name FROM SafetyOrgs WHERE country IN ('UK', 'France', 'Germany') GROUP BY name HAVING COUNT(DISTINCT country) = 3;"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID int, FirstName varchar(50), LastName varchar(50), JobLevel int, Manager varchar(50), Ethnicity varchar(50), Tenure int); INSERT INTO Employees (EmployeeID, FirstName, LastName, JobLevel, Manager, Ethnicity, Tenure) VALUES (1, 'John', 'Doe', 3, 'Jane Doe', 'Asian', 5), (2, 'Jane', 'Doe', 2, 'Bob Smith', 'Latino', 10), (3, 'Jim', 'Smith', 1, 'Bob Smith', 'African American', 2);\n\n## Query generation task:\nWhat is the distribution of employee tenure by job level, manager, and ethnicity?\n\n", "response": "SELECT Employees.JobLevel, Employees.Manager, Employees.Ethnicity, AVG(Employees.Tenure) as Avg_Tenure FROM Employees GROUP BY Employees.JobLevel, Employees.Manager, Employees.Ethnicity;"}, {"query": "## sql context :\nCREATE TABLE sustainability_initiatives (location VARCHAR(50), year INT); INSERT INTO sustainability_initiatives (location, year) VALUES ('Bali, Indonesia', 2021), ('Bangkok, Thailand', 2021), ('Siem Reap, Cambodia', 2021), ('Hanoi, Vietnam', 2021);\n\n## Query generation task:\nHow many sustainable tourism initiatives were launched in Asia in 2021?\n\n", "response": "SELECT COUNT(*) as total_initiatives FROM sustainability_initiatives WHERE location LIKE '%Asia%' AND year = 2021;"}, {"query": "## sql context :\nCREATE TABLE trucks (id INT PRIMARY KEY, make VARCHAR(50), model VARCHAR(50), year INT);\n\n## Query generation task:\nDelete records from the \"trucks\" table where the \"year\" is less than 2022\n\n", "response": "DELETE FROM trucks WHERE year < 2022;"}, {"query": "## sql context :\nCREATE TABLE investor (investor_id INT, name VARCHAR(255), country VARCHAR(255)); INSERT INTO investor (investor_id, name, country) VALUES (1, 'EcoHealth India', 'India'); CREATE TABLE investment (investment_id INT, investor_id INT, strategy VARCHAR(255), impact_score FLOAT);\n\n## Query generation task:\nWhat is the maximum impact score for investments made by Indian investors in healthcare?\n\n", "response": "SELECT MAX(impact_score) FROM investment JOIN investor ON investment.investor_id = investor.investor_id WHERE investor.country = 'India' AND strategy LIKE '%Healthcare%';"}, {"query": "## sql context :\nCREATE TABLE ProjectTimelineByBudget (ProjectID int, Region varchar(20), Half int, Budget decimal(10,2), OnTime bit); INSERT INTO ProjectTimelineByBudget (ProjectID, Region, Half, Budget, OnTime) VALUES (1, 'Pacific', 2, 12000000.00, 1), (2, 'Pacific', 2, 8000000.00, 0), (3, 'Pacific', 2, 11000000.00, 1);\n\n## Query generation task:\nCalculate the percentage of projects with a budget over $10 million that were completed on time, in the Pacific region, for the second half of 2021.\n\n", "response": "SELECT Region, PERCENTAGE(SUM(OnTime) OVER (PARTITION BY Region) / COUNT(*) OVER (PARTITION BY Region)) as PercentageOnTime FROM ProjectTimelineByBudget WHERE Region = 'Pacific' AND Half = 2 AND Budget > 10000000;"}, {"query": "## sql context :\nCREATE TABLE Events (EventID INT, EventDate DATE, EventAttendance INT); INSERT INTO Events (EventID, EventDate, EventAttendance) VALUES (1, '2022-03-12', 120), (2, '2022-04-20', 80), (3, '2022-05-15', 150), (4, '2022-01-01', 30), (5, '2022-06-10', 45);\n\n## Query generation task:\nHow many events had an attendance of under 50 in the first half of 2022?\n\n", "response": "SELECT COUNT(*) FROM Events WHERE EventAttendance < 50 AND EventDate < '2022-07-01';"}, {"query": "## sql context :\nCREATE TABLE paris_real_estate(id INT, city VARCHAR(50), price DECIMAL(10,2), size INT, wheelchair_accessible BOOLEAN); INSERT INTO paris_real_estate VALUES (1, 'Paris', 500000, 1000, true);\n\n## Query generation task:\nWhat is the average price per square foot of properties in the city of Paris, France that are wheelchair accessible?\n\n", "response": "SELECT AVG(price/size) FROM paris_real_estate WHERE city = 'Paris' AND wheelchair_accessible = true;"}, {"query": "## sql context :\nCREATE TABLE infection_rates (id INT PRIMARY KEY, state VARCHAR(50), infection_rate FLOAT);\n\n## Query generation task:\nCreate a table named 'infection_rates'\n\n", "response": "CREATE TABLE infection_rates (id INT PRIMARY KEY, state VARCHAR(50), infection_rate FLOAT);"}, {"query": "## sql context :\nCREATE TABLE Hotels (id INT, name TEXT, country TEXT, city TEXT, rooms INT, eco_certified BOOLEAN, revenue DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the total revenue generated by eco-friendly hotels in the Americas, with more than 100 rooms, for the year 2022?\n\n", "response": "SELECT SUM(revenue) FROM Hotels WHERE eco_certified = TRUE AND country IN ('Americas') AND rooms > 100 AND YEAR(date) = 2022;"}, {"query": "## sql context :\nCREATE TABLE sales (sale_id INT, product_id INT, quantity INT, sale_date DATE, revenue INT); INSERT INTO sales (sale_id, product_id, quantity, sale_date, revenue) VALUES (1, 1, 3, '2022-01-05', 15), (2, 2, 1, '2022-01-07', 10); CREATE TABLE product (product_id INT, product_name TEXT, region_id INT); INSERT INTO product (product_id, product_name, region_id) VALUES (1, 'Coca Cola', 1), (2, 'Pizza', 2);\n\n## Query generation task:\nWhat is the total quantity of each product sold in the last week and the total revenue generated from those sales?\n\n", "response": "SELECT p.product_name, SUM(s.quantity) as total_quantity, SUM(s.revenue) as total_revenue FROM sales s JOIN product p ON s.product_id = p.product_id WHERE s.sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY p.product_name;"}, {"query": "## sql context :\nCREATE TABLE indigenous_food_systems (name TEXT, region TEXT, community_members INT); INSERT INTO indigenous_food_systems (name, region, community_members) VALUES ('Green Corn Ceremony', 'North America', 120); INSERT INTO indigenous_food_systems (name, region, community_members) VALUES ('Potlatch', 'North America', 150);\n\n## Query generation task:\nList all indigenous food systems that have a similar number of community members as 'Green Corn Ceremony' in the 'North America' region.\n\n", "response": "SELECT name FROM indigenous_food_systems WHERE region = 'North America' AND community_members = (SELECT community_members FROM indigenous_food_systems WHERE name = 'Green Corn Ceremony');"}, {"query": "## sql context :\nCREATE TABLE DonationHistory (DonationID int, DonationDate date, DonationAmount numeric); INSERT INTO DonationHistory (DonationID, DonationDate, DonationAmount) VALUES (1, '2022-01-01', 500), (2, '2022-02-01', 300), (3, '2022-03-01', 800), (4, '2022-04-01', 900), (5, '2022-05-01', 700);\n\n## Query generation task:\nWhat is the total donation amount for each month, for the past year?\n\n", "response": "SELECT EXTRACT(MONTH FROM DonationDate) Month, SUM(DonationAmount) TotalDonations FROM DonationHistory WHERE DonationDate >= DATEADD(year, -1, CURRENT_DATE) GROUP BY EXTRACT(MONTH FROM DonationDate);"}, {"query": "## sql context :\nCREATE TABLE clinical_trials (id INT PRIMARY KEY, drug_id INT, phase VARCHAR(50), completion_date DATE); CREATE TABLE drugs (id INT PRIMARY KEY, name VARCHAR(255), manufacturer VARCHAR(255), approval_date DATE);\n\n## Query generation task:\nHow many clinical trials were completed for drugs that were approved after 2017?\n\n", "response": "SELECT COUNT(ct.id) as total_completed_trials FROM clinical_trials ct JOIN drugs d ON ct.drug_id = d.id WHERE d.approval_date > '2017-01-01';"}, {"query": "## sql context :\nCREATE TABLE space_missions (id INT PRIMARY KEY, mission_name VARCHAR(100), launch_date DATE, mission_status VARCHAR(50));\n\n## Query generation task:\nDisplay the mission_name, launch_date, and mission_status for all missions launched before 1990 in the space_missions table\n\n", "response": "SELECT mission_name, launch_date, mission_status FROM space_missions WHERE launch_date < '1990-01-01';"}, {"query": "## sql context :\nCREATE TABLE security_incidents (id INT, incident_date DATE, region VARCHAR(255), incident_type VARCHAR(255)); INSERT INTO security_incidents (id, incident_date, region, incident_type) VALUES (1, '2021-01-05', 'EMEA', 'Phishing'), (2, '2021-02-10', 'EMEA', 'Malware'), (3, '2021-03-15', 'EMEA', 'SQL Injection'), (4, '2021-04-20', 'EMEA', 'Cross-site Scripting'), (5, '2021-05-25', 'EMEA', 'DoS/DDoS');\n\n## Query generation task:\nHow many security incidents were there in the EMEA region per month in 2021?\n\n", "response": "SELECT EXTRACT(MONTH FROM incident_date) as month, COUNT(*) as incidents_per_month FROM security_incidents WHERE region = 'EMEA' AND incident_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY month;"}, {"query": "## sql context :\nCREATE TABLE rebounds (id INT, player VARCHAR(50), team VARCHAR(50), league VARCHAR(50), rebounds INT); INSERT INTO rebounds (id, player, team, league, rebounds) VALUES (1, 'Andre Drummond', 'Cavaliers', 'NBA', 15); INSERT INTO rebounds (id, player, team, league, rebounds) VALUES (2, 'Rudy Gobert', 'Jazz', 'NBA', 13);\n\n## Query generation task:\nWho is the basketball player with the most rebounds in the NBA?\n\n", "response": "SELECT player FROM rebounds WHERE league = 'NBA' AND rebounds = (SELECT MAX(rebounds) FROM rebounds WHERE league = 'NBA');"}, {"query": "## sql context :\nCREATE TABLE performance_scores (id INT, region VARCHAR(5), date DATE, score INT); INSERT INTO performance_scores VALUES (1, 'SA', '2021-09-01', 80), (2, 'ASIA', '2021-09-03', 90), (3, 'SA', '2021-09-05', 85);\n\n## Query generation task:\nWhat is the average warehouse management performance score in 'SA' region?\n\n", "response": "SELECT AVG(score) FROM performance_scores WHERE region = 'SA';"}, {"query": "## sql context :\nCREATE TABLE MappingLengths (MappingID INT PRIMARY KEY, MappingName TEXT, MappingLength FLOAT);\n\n## Query generation task:\nWhat is the total length of all ocean floor mapping projects in the 'MappingLengths' table?\n\n", "response": "SELECT SUM(MappingLength) FROM MappingLengths;"}, {"query": "## sql context :\nCREATE TABLE art_exhibit_attendance (id INT, num_attendees INT, exhibit_location VARCHAR(50)); INSERT INTO art_exhibit_attendance (id, num_attendees, exhibit_location) VALUES (1, 25, 'Paris'), (2, 35, 'Paris'), (3, 45, 'Paris'), (4, 30, 'Berlin'), (5, 50, 'Berlin'), (6, 20, 'London');\n\n## Query generation task:\nHow many art_exhibit events had more than 30 attendees in Paris?\n\n", "response": "SELECT COUNT(*) FROM art_exhibit_attendance WHERE num_attendees > 30 AND exhibit_location = 'Paris';"}, {"query": "## sql context :\nCREATE TABLE donations (id INT, donor VARCHAR(50), amount DECIMAL(10,2), donation_date DATE); INSERT INTO donations (id, donor, amount, donation_date) VALUES (1, 'Sophia Lee', 250, '2022-02-14'); INSERT INTO donations (id, donor, amount, donation_date) VALUES (2, 'Ali Al-Khaleej', 400, '2022-07-03');\n\n## Query generation task:\nWhat is the sum of donations made by 'Sophia Lee' and 'Ali Al-Khaleej' in 2022?\n\n", "response": "SELECT SUM(amount) as total_donation FROM donations WHERE donor IN ('Sophia Lee', 'Ali Al-Khaleej') AND YEAR(donation_date) = 2022;"}, {"query": "## sql context :\nCREATE TABLE employees (id INT, name VARCHAR(50), department VARCHAR(50), salary INT); INSERT INTO employees (id, name, department, salary) VALUES (1, 'John Smith', 'Production', 45000); INSERT INTO employees (id, name, department, salary) VALUES (2, 'Jane Doe', 'Engineering', 50000);\n\n## Query generation task:\nUpdate the salaries of employees in the 'Production' department by 3%.\n\n", "response": "UPDATE employees SET salary = salary * 1.03 WHERE department = 'Production';"}, {"query": "## sql context :\nCREATE TABLE org_donation (org_id INT, donation_id INT, donation_amount INT); INSERT INTO org_donation (org_id, donation_id, donation_amount) VALUES (1, 1, 500), (1, 2, 750), (2, 3, 1000), (3, 4, 250), (4, 5, 300);\n\n## Query generation task:\nWhat is the total number of donations for each organization?\n\n", "response": "SELECT org_id, COUNT(*) as total_donations FROM org_donation GROUP BY org_id;"}, {"query": "## sql context :\nCREATE TABLE stellar_transactions (transaction_id INT, node_id VARCHAR(50), timestamp BIGINT);\n\n## Query generation task:\nHow many transactions were processed by each node in the Stellar network in the last week?\n\n", "response": "SELECT node_id, COUNT(*) FROM stellar_transactions WHERE timestamp BETWEEN UNIX_TIMESTAMP() - 604800 AND UNIX_TIMESTAMP() GROUP BY node_id;"}, {"query": "## sql context :\nCREATE TABLE publications (id INT PRIMARY KEY, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), publication_date DATE);\n\n## Query generation task:\nDelete a publication record from the \"publications\" table\n\n", "response": "WITH deleted_publication AS (DELETE FROM publications WHERE id = 1 RETURNING *) SELECT * FROM deleted_publication;"}, {"query": "## sql context :\nCREATE TABLE City (id INT, name VARCHAR(50), population INT, founded DATE); INSERT INTO City (id, name, population, founded) VALUES (1, 'New York', 8500000, '1624-09-17'); INSERT INTO City (id, name, population, founded) VALUES (2, 'Los Angeles', 4000000, '1781-09-04');\n\n## Query generation task:\nWhat is the total population of cities founded before the year 1800?\n\n", "response": "SELECT SUM(population) FROM City WHERE YEAR(founded) < 1800;"}, {"query": "## sql context :\nCREATE TABLE elections (id INT PRIMARY KEY, district VARCHAR(30), votes INT, total_voters INT); INSERT INTO elections (id, district, votes, total_voters) VALUES (1, 'District 1', 1000, 2000);\n\n## Query generation task:\nHow many votes were cast in each district for the most recent election, and what was the turnout percentage?\n\n", "response": "SELECT district, SUM(votes) AS total_votes, (SUM(votes) / MAX(total_voters)) * 100 AS turnout_percentage FROM elections GROUP BY district;"}, {"query": "## sql context :\nCREATE TABLE safety_violations (violation_id INT, sector VARCHAR(50), violation_date DATE, union_id INT); CREATE TABLE unions (union_id INT, union_name VARCHAR(50), focus VARCHAR(50)); INSERT INTO safety_violations (violation_id, sector, violation_date, union_id) VALUES (1, 'manufacturing', '2021-01-01', 1), (2, 'manufacturing', '2021-02-01', 1), (3, 'construction', '2021-03-01', 2); INSERT INTO unions (union_id, union_name, focus) VALUES (1, 'Manufacturing Workers Union', 'manufacturing'), (2, 'Tech Workers Union', 'technology');\n\n## Query generation task:\nWhat is the maximum number of workplace safety violations recorded in a single month for unions with a focus on manufacturing?\n\n", "response": "SELECT MAX(violation_count) FROM (SELECT COUNT(*) as violation_count, EXTRACT(MONTH FROM sv.violation_date) as violation_month FROM safety_violations sv INNER JOIN unions u ON sv.union_id = u.union_id WHERE u.focus = 'manufacturing' GROUP BY violation_month) as subquery;"}, {"query": "## sql context :\nCREATE TABLE farmers (id INT, name VARCHAR(50), age INT, location VARCHAR(50)); INSERT INTO farmers (id, name, age, location) VALUES (1, 'John Doe', 45, 'Ruralville'); INSERT INTO farmers (id, name, age, location) VALUES (2, 'Jane Smith', 50, 'Farmtown');\n\n## Query generation task:\nHow many farmers are there in each location?\n\n", "response": "SELECT location, COUNT(*) FROM farmers GROUP BY location;"}, {"query": "## sql context :\nCREATE TABLE shipments (shipment_id INT, revenue DECIMAL(10,2)); INSERT INTO shipments (shipment_id, revenue) VALUES (123, 2000.50);\n\n## Query generation task:\nWhat was the total revenue for a specific shipment with ID 123?\n\n", "response": "SELECT revenue FROM shipments WHERE shipment_id = 123;"}, {"query": "## sql context :\nCREATE TABLE explainable_ai (record_id INT, algorithm_name TEXT, fairness_score REAL); INSERT INTO explainable_ai VALUES (1, 'SHAP', 0.8), (2, 'LIME', 0.6), (3, 'Anchors', 0.9);\n\n## Query generation task:\nDelete all records from the explainable_ai table where the fairness_score is less than 0.7.\n\n", "response": "DELETE FROM explainable_ai WHERE fairness_score < 0.7;"}, {"query": "## sql context :\nCREATE TABLE investments (id INT, sector VARCHAR(20), amount FLOAT); INSERT INTO investments (id, sector, amount) VALUES (1, 'Education', 150000.00), (2, 'Healthcare', 120000.00), (3, 'Renewable Energy', 200000.00);\n\n## Query generation task:\nWhat's the total investment in all sectors?\n\n", "response": "SELECT SUM(amount) FROM investments;"}, {"query": "## sql context :\nCREATE TABLE Artworks (artwork_id INT, artist_name VARCHAR(50)); INSERT INTO Artworks (artwork_id, artist_name) VALUES (1, 'Vincent Van Gogh'), (2, 'Pablo Picasso'), (3, 'Claude Monet'), (4, 'Jackson Pollock'), (5, 'Francisco Goya');\n\n## Query generation task:\nWho are the top 3 artists with the most artworks in the database?\n\n", "response": "SELECT artist_name, COUNT(*) as artwork_count FROM Artworks GROUP BY artist_name ORDER BY artwork_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE drug_approvals (drug_name VARCHAR(255), approval_country VARCHAR(255)); INSERT INTO drug_approvals (drug_name, approval_country) VALUES ('Drug A', 'USA'), ('Drug A', 'Canada'), ('Drug B', 'USA'), ('Drug C', 'Canada');\n\n## Query generation task:\nFind the number of drug approvals in the USA and Canada for each drug, sorted by drug name.\n\n", "response": "SELECT drug_name, COUNT(*) as approval_count FROM drug_approvals WHERE approval_country IN ('USA', 'Canada') GROUP BY drug_name ORDER BY drug_name;"}, {"query": "## sql context :\nCREATE TABLE EventDates (EventID INT, EventDate DATE); INSERT INTO EventDates (EventID, EventDate) VALUES (1, '2022-01-01'), (2, '2022-02-01'), (3, '2022-01-15'); CREATE TABLE EventParticipation (EventID INT, PlayerID INT);\n\n## Query generation task:\nDetermine the number of unique games played by players who joined esports events in each country, per month, and the number of unique virtual reality devices they use.\n\n", "response": "SELECT E.EventCountry, EXTRACT(MONTH FROM E.EventDate) AS Month, COUNT(DISTINCT EP.PlayerID) AS PlayersJoined, COUNT(DISTINCT VR.VRDevice) AS VRDevices, COUNT(DISTINCT G.GameID) AS UniqueGames FROM Players P JOIN EventParticipation EP ON P.PlayerID = EP.PlayerID JOIN EventDates E ON EP.EventID = E.EventID JOIN GamePlay G ON P.PlayerID = G.PlayerID JOIN VRAdoption VR ON P.PlayerID = VR.PlayerID GROUP BY E.EventCountry, EXTRACT(MONTH FROM E.EventDate)"}, {"query": "## sql context :\nCREATE TABLE Skincare_Ingredients (ProductID int, ProductName varchar(100), IsVegan bit, SustainabilityRating int); INSERT INTO Skincare_Ingredients (ProductID, ProductName, IsVegan, SustainabilityRating) VALUES (1, 'Vegan Facial Cream', 1, 8); INSERT INTO Skincare_Ingredients (ProductID, ProductName, IsVegan, SustainabilityRating) VALUES (2, 'Natural Face Wash', 0, 6);\n\n## Query generation task:\nWhat is the average sustainability rating of vegan skincare products?\n\n", "response": "SELECT AVG(SustainabilityRating) FROM Skincare_Ingredients WHERE IsVegan = 1;"}, {"query": "## sql context :\nCREATE TABLE EmployeeDemographics (EmployeeID int, Gender varchar(10), Department varchar(20)); INSERT INTO EmployeeDemographics (EmployeeID, Gender, Department) VALUES (1, 'Female', 'Engineering'), (2, 'Male', 'IT'), (3, 'Non-binary', 'Engineering');\n\n## Query generation task:\nWhat is the percentage of female, male, and non-binary employees in the Engineering department?\n\n", "response": "SELECT Department, ROUND(COUNT(CASE WHEN Gender = 'Female' THEN 1 END) * 100.0 / COUNT(*), 1) AS FemalePercentage, ROUND(COUNT(CASE WHEN Gender = 'Male' THEN 1 END) * 100.0 / COUNT(*), 1) AS MalePercentage, ROUND(COUNT(CASE WHEN Gender = 'Non-binary' THEN 1 END) * 100.0 / COUNT(*), 1) AS NonBinaryPercentage FROM EmployeeDemographics GROUP BY Department;"}, {"query": "## sql context :\nCREATE TABLE inspections (id INT, restaurant_id INT, result VARCHAR(50)); INSERT INTO inspections (id, restaurant_id, result) VALUES (1, 1, 'critical violation'); INSERT INTO inspections (id, restaurant_id, result) VALUES (2, 1, 'no violation'); INSERT INTO inspections (id, restaurant_id, result) VALUES (3, 2, 'critical violation'); INSERT INTO inspections (id, restaurant_id, result) VALUES (4, 2, 'critical violation');\n\n## Query generation task:\nHow many food safety inspections resulted in critical violations for each restaurant?\n\n", "response": "SELECT restaurant_id, COUNT(*) as critical_violations FROM inspections WHERE result = 'critical violation' GROUP BY restaurant_id;"}, {"query": "## sql context :\nCREATE TABLE States (StateID INT, StateName VARCHAR(255), Population INT); CREATE TABLE Cities (CityID INT, CityName VARCHAR(255), StateID INT, Population INT);\n\n## Query generation task:\nIdentify the number of cities in each state with a population greater than 500,000.\n\n", "response": "SELECT States.StateName, COUNT(Cities.CityID) AS CityCount FROM States JOIN Cities ON States.StateID = Cities.StateID GROUP BY States.StateName HAVING SUM(Cities.Population) > 500000;"}, {"query": "## sql context :\nCREATE TABLE disaster_response (id INT, country VARCHAR(50), aid_type VARCHAR(50), amount FLOAT, date DATE); INSERT INTO disaster_response (id, country, aid_type, amount, date) VALUES (1, 'Syria', 'food', 1000000, '2017-01-01');\n\n## Query generation task:\nWhich countries have received the most humanitarian aid in the form of food assistance in the last 5 years?\n\n", "response": "SELECT country, SUM(amount) as total_food_aid FROM disaster_response WHERE aid_type = 'food' AND date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY country ORDER BY total_food_aid DESC;"}, {"query": "## sql context :\nCREATE TABLE menu_items (item VARCHAR(50), type VARCHAR(15), cost DECIMAL(10,2)); INSERT INTO menu_items (item, type, cost) VALUES ('Beef Burger', 'Meat', 10.00), ('Chicken Sandwich', 'Meat', 8.00); CREATE VIEW meat_menu_items AS SELECT item, cost FROM menu_items WHERE type = 'Meat';\n\n## Query generation task:\nWhat is the average cost of meat-based dishes?\n\n", "response": "SELECT AVG(cost) FROM meat_menu_items;"}, {"query": "## sql context :\nCREATE TABLE hr.employees (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO hr.employees (id, name, department) VALUES (1, 'John Doe', 'HR'); INSERT INTO hr.employees (id, name, department) VALUES (2, 'Jane Smith', 'IT'); INSERT INTO hr.employees (id, name, department) VALUES (3, 'Bob Brown', 'IT'); INSERT INTO hr.employees (id, name, department) VALUES (4, 'Alice Johnson', 'HR');\n\n## Query generation task:\nShow the number of employees in each department in the \"hr\" schema\n\n", "response": "SELECT department, COUNT(*) FROM hr.employees GROUP BY department;"}, {"query": "## sql context :\nCREATE TABLE TourismProviders (provider_id INT, provider_name TEXT, country TEXT); INSERT INTO TourismProviders (provider_id, provider_name, country) VALUES (1, 'Australia Sustainable Tours', 'Australia'); INSERT INTO TourismProviders (provider_id, provider_name, country) VALUES (2, 'Global Australia Tours', 'Australia'); CREATE TABLE Revenue (provider_id INT, annual_revenue INT); INSERT INTO Revenue (provider_id, annual_revenue) VALUES (1, 900000); INSERT INTO Revenue (provider_id, annual_revenue) VALUES (2, 1100000);\n\n## Query generation task:\nWhat is the average annual revenue generated by sustainable tourism providers in Australia?\n\n", "response": "SELECT AVG(annual_revenue) FROM TourismProviders JOIN Revenue ON TourismProviders.provider_id = Revenue.provider_id WHERE country = 'Australia' AND sustainability_focus = 'Sustainable Tourism';"}, {"query": "## sql context :\nCREATE TABLE military_personnel (region TEXT, personnel INTEGER); INSERT INTO military_personnel (region, personnel) VALUES ('Asia', 10000), ('Europe', 8000), ('North America', 12000);\n\n## Query generation task:\nGet the total number of military personnel in each region and order them by the highest number of personnel.\n\n", "response": "SELECT region, SUM(personnel) FROM military_personnel GROUP BY region ORDER BY SUM(personnel) DESC"}, {"query": "## sql context :\nCREATE VIEW ev_suvs AS SELECT * FROM green_vehicles WHERE type = 'Electric' AND category = 'SUV';\n\n## Query generation task:\nWhat is the maximum range for electric SUVs in the \"ev_suvs\" view?\n\n", "response": "SELECT MAX(range) FROM ev_suvs;"}, {"query": "## sql context :\nCREATE TABLE plots (id INT, size_ha FLOAT, type TEXT); INSERT INTO plots (id, size_ha, type) VALUES (1, 2.5, 'Urban'); INSERT INTO plots (id, size_ha, type) VALUES (2, 3.2, 'Agroforestry'); INSERT INTO plots (id, size_ha, type) VALUES (3, 1.9, 'Agroforestry');\n\n## Query generation task:\nWhat is the maximum size (in hectares) of a plot in the 'plots' table, where the plot is used for agroforestry?\n\n", "response": "SELECT MAX(size_ha) FROM plots WHERE type = 'Agroforestry';"}, {"query": "## sql context :\nCREATE TABLE cases (id INT, year INT, restorative_justice BOOLEAN);\n\n## Query generation task:\nWhat is the total number of cases resolved in the cases table in 2019 and 2020?\n\n", "response": "SELECT SUM(*) FROM cases WHERE year IN (2019, 2020);"}, {"query": "## sql context :\nCREATE TABLE lead_mines (id INT, name TEXT, location TEXT, depth FLOAT); INSERT INTO lead_mines (id, name, location, depth) VALUES (1, 'Lead Mine A', 'Country X', 350.5); INSERT INTO lead_mines (id, name, location, depth) VALUES (2, 'Lead Mine B', 'Country Y', 420.3); INSERT INTO lead_mines (id, name, location, depth) VALUES (3, 'Lead Mine C', 'Country Z', 200.1);\n\n## Query generation task:\nWhat is the average depth of all lead mines in the 'lead_mines' table?\n\n", "response": "SELECT AVG(depth) FROM lead_mines;"}, {"query": "## sql context :\nCREATE TABLE port (port_id INT, port_name TEXT);CREATE TABLE shipment (shipment_id INT, container_count INT, ship_date DATE, port_id INT); INSERT INTO port VALUES (1, 'Los Angeles'), (2, 'Tokyo'); INSERT INTO shipment VALUES (1, 500, '2018-01-01', 1), (2, 300, '2019-02-15', 2);\n\n## Query generation task:\nDelete all records with a shipment date before '2019-01-01' from the shipment table.\n\n", "response": "DELETE FROM shipment WHERE ship_date < '2019-01-01';"}, {"query": "## sql context :\nCREATE TABLE projects (id INT, name TEXT, country TEXT, cost FLOAT); INSERT INTO projects (id, name, country, cost) VALUES (1, 'Road', 'Cambodia', 200000), (2, 'Bridge', 'Cambodia', 500000);\n\n## Query generation task:\nWhat is the number of rural infrastructure projects in Cambodia and their average cost?\n\n", "response": "SELECT COUNT(*), AVG(cost) FROM projects WHERE country = 'Cambodia';"}, {"query": "## sql context :\nCREATE TABLE building_permits (permit_id INT, contractor VARCHAR(100));\n\n## Query generation task:\nUpdate the name of the contractor for permit ID 123 to 'New Constructor Inc.'\n\n", "response": "UPDATE building_permits SET contractor = 'New Constructor Inc.' WHERE permit_id = 123;"}, {"query": "## sql context :\nCREATE TABLE genetic_research (id INT, title VARCHAR(100), focus VARCHAR(100), community VARCHAR(50)); INSERT INTO genetic_research (id, title, focus, community) VALUES (1, 'Genetic Markers in Alzheimer''s Disease', 'neurodegenerative', 'European'); INSERT INTO genetic_research (id, title, focus, community) VALUES (2, 'Genomic Analysis of Parkinson''s Disease', 'neurodegenerative', 'African'); INSERT INTO genetic_research (id, title, focus, community) VALUES (3, 'Genetic Basis of Inherited Cancers in Indigenous Australians', 'children', 'Indigenous');\n\n## Query generation task:\nFind genetic research data related to rare genetic disorders in indigenous communities.\n\n", "response": "SELECT * FROM genetic_research WHERE community = 'Indigenous';"}, {"query": "## sql context :\nCREATE TABLE nasa_mars_program (program_id INT, name VARCHAR(100), start_year INT, end_year INT, total_cost FLOAT);\n\n## Query generation task:\nWhat is the total cost of NASA's Mars exploration program?\n\n", "response": "SELECT SUM(total_cost) FROM nasa_mars_program WHERE name = 'Mars Exploration Program';"}, {"query": "## sql context :\nCREATE TABLE tv_shows (id INT, name VARCHAR(100));\n\n## Query generation task:\nHow many TV shows in the \"tv_shows\" table have the word \"news\" in their name?\n\n", "response": "SELECT COUNT(*) FROM tv_shows WHERE name LIKE '%news%';"}, {"query": "## sql context :\nCREATE TABLE e_scooter_trips (id INT, trip_start_time TIMESTAMP, trip_end_time TIMESTAMP, trip_city VARCHAR(50));\n\n## Query generation task:\nFind the number of e-scooter trips per month for the year 2022 in New York\n\n", "response": "SELECT EXTRACT(MONTH FROM trip_start_time) AS month, COUNT(*) AS num_trips"}, {"query": "## sql context :\nCREATE TABLE restorative_justice_center (case_id INT, center_name VARCHAR(50), case_date DATE); INSERT INTO restorative_justice_center VALUES (1, 'Center A', '2021-01-01'), (2, 'Center B', '2021-01-05'), (3, 'Center A', '2021-02-02'), (4, 'Center C', '2021-02-06');\n\n## Query generation task:\nHow many cases were handled by each restorative justice center per month?\n\n", "response": "SELECT center_name, DATE_FORMAT(case_date, '%Y-%m') AS case_month, COUNT(*) AS cases_per_month FROM restorative_justice_center GROUP BY center_name, case_month;"}, {"query": "## sql context :\nCREATE TABLE users (id INT, age INT, gender TEXT);  INSERT INTO users (id, age, gender) VALUES   (1, 25, 'female'), (2, 35, 'male'), (3, 30, 'non-binary'), (4, 45, 'male'), (5, 50, 'female');\n\n## Query generation task:\nWhat is the percentage of female users?\n\n", "response": "SELECT (COUNT(CASE WHEN gender = 'female' THEN 1 END) * 100.0 / COUNT(*)) as female_percentage   FROM users;"}, {"query": "## sql context :\nCREATE TABLE concert_sales (id INT, artist VARCHAR(255), city VARCHAR(255), date DATE, tickets_sold INT); INSERT INTO concert_sales (id, artist, city, date, tickets_sold) VALUES (1, 'Rosal\u00eda', 'Barcelona', '2022-11-01', 20000);\n\n## Query generation task:\nWho is the artist with the most concert tickets sold in the month of 'November'?\n\n", "response": "SELECT artist, SUM(tickets_sold) AS total_tickets_sold FROM concert_sales WHERE date BETWEEN '2022-11-01' AND '2022-11-30' GROUP BY artist ORDER BY total_tickets_sold DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE departments (id INT, name VARCHAR(50)); CREATE TABLE employees (id INT, name VARCHAR(50), dept_id INT, salary DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the maximum salary in the 'technical_ops' department?\n\n", "response": "SELECT MAX(e.salary) FROM employees e JOIN departments d ON d.id = e.dept_id WHERE d.name = 'technical_ops';"}, {"query": "## sql context :\nCREATE TABLE exhibitions (id INT, city VARCHAR(50), visitor_count INT); INSERT INTO exhibitions (id, city, visitor_count) VALUES (1, 'Paris', 300), (2, 'London', 400), (3, 'Berlin', 500);\n\n## Query generation task:\nWhat is the number of unique visitors who attended exhibitions in each city?\n\n", "response": "SELECT city, COUNT(DISTINCT visitor_count) FROM exhibitions GROUP BY city;"}, {"query": "## sql context :\nCREATE TABLE org_climate_finance (org_size VARCHAR(20), amount FLOAT); INSERT INTO org_climate_finance (org_size, amount) VALUES ('small', 20000), ('medium', 50000), ('large', 75000), ('extra_large', 100000);\n\n## Query generation task:\nWhat is the average amount of climate finance spent by 'medium' and 'large' organizations?\n\n", "response": "SELECT AVG(amount) FROM org_climate_finance WHERE org_size IN ('medium', 'large');"}, {"query": "## sql context :\nCREATE TABLE teams (id INT, name VARCHAR(50), sport VARCHAR(50), location VARCHAR(50)); INSERT INTO teams (id, name, sport, location) VALUES (1, 'Warriors', 'Basketball', 'San Francisco'), (2, 'Real Madrid', 'Soccer', 'Madrid');\n\n## Query generation task:\nUpdate the location for the given team id\n\n", "response": "UPDATE teams SET location = 'New York' WHERE id = 2;"}, {"query": "## sql context :\nCREATE TABLE Members (MemberID INT, MemberName VARCHAR(50), State VARCHAR(50)); CREATE TABLE Workouts (WorkoutID INT, WorkoutName VARCHAR(50), WorkoutType VARCHAR(50), Duration INT, WorkoutDate DATE, MemberID INT);\n\n## Query generation task:\nList the top 3 most active members in Canada based on the total number of workout minutes in the last year.\n\n", "response": "SELECT m.MemberName, SUM(w.Duration) AS TotalMinutes FROM Members m INNER JOIN Workouts w ON m.MemberID = w.MemberID WHERE m.State = 'Canada' AND w.WorkoutDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY m.MemberName ORDER BY TotalMinutes DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE sales (salesperson VARCHAR(255), revenue FLOAT); INSERT INTO sales (salesperson, revenue) VALUES ('John', 5000), ('Jane', 7000), ('Doe', 6000);\n\n## Query generation task:\nWhat was the total revenue for each salesperson in the month of January 2022?\n\n", "response": "SELECT salesperson, SUM(revenue) FROM sales WHERE revenue IS NOT NULL AND salesperson IS NOT NULL AND STR_TO_DATE(CONCAT('01-', MONTH(NOW())), '%d-%m-%Y') = STR_TO_DATE('01-2022', '%d-%m-%Y') GROUP BY salesperson;"}, {"query": "## sql context :\nCREATE TABLE exhibitions (id INT, name TEXT, pieces INT, visitors INT); INSERT INTO exhibitions (id, name, pieces, visitors) VALUES (1, 'Impressionist Art', 180, 1600);\n\n## Query generation task:\nWhat is the average number of pieces in an art exhibition that had over 1500 visitors?\n\n", "response": "SELECT AVG(pieces) FROM exhibitions WHERE visitors > 1500;"}, {"query": "## sql context :\nCREATE TABLE animal_population (animal_id INT, animal_name VARCHAR(50), program VARCHAR(50), added_date DATE); INSERT INTO animal_population (animal_id, animal_name, program, added_date) VALUES (1, 'Grizzly Bear', 'habitat_preservation', '2022-01-01'), (2, 'Gray Wolf', 'community_education', '2022-02-01'), (3, 'Bald Eagle', 'habitat_preservation', '2022-03-01'), (4, 'Red Fox', 'community_education', '2022-04-01');\n\n## Query generation task:\nAdd a new animal 'Jaguar' to the 'habitat_preservation' program\n\n", "response": "INSERT INTO animal_population (animal_name, program, added_date) VALUES ('Jaguar', 'habitat_preservation', CURRENT_TIMESTAMP);"}, {"query": "## sql context :\nCREATE TABLE Volunteers (VolunteerID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Skills VARCHAR(100), Hours INT, LastVolunteer DATE);\n\n## Query generation task:\nUpdate records of volunteers with the last name 'Williams' and add 10 hours of volunteering on Jan 15, 2023\n\n", "response": "UPDATE Volunteers SET Hours = Hours + 10, LastVolunteer = '2023-01-15' WHERE LastName = 'Williams';"}, {"query": "## sql context :\nCREATE SCHEMA if not exists higher_ed;CREATE TABLE if not exists higher_ed.students(id INT, name VARCHAR(255), department VARCHAR(255));CREATE TABLE if not exists higher_ed.publications(id INT, title VARCHAR(255), author_id INT);\n\n## Query generation task:\nWhat is the average number of papers published by graduate students in the English department?\n\n", "response": "SELECT AVG(pub_count) FROM (SELECT author_id, COUNT(*) as pub_count FROM higher_ed.publications GROUP BY author_id) p JOIN higher_ed.students s ON p.author_id = s.id WHERE s.department = 'English';"}, {"query": "## sql context :\nCREATE TABLE Cybersecurity_Incidents (id INT, incident_type VARCHAR(255), region VARCHAR(255), incident_date DATE); INSERT INTO Cybersecurity_Incidents (id, incident_type, region, incident_date) VALUES (1, 'Data Breach', 'APAC', '2021-07-12'); INSERT INTO Cybersecurity_Incidents (id, incident_type, region, incident_date) VALUES (2, 'Phishing Attack', 'APAC', '2021-10-03');\n\n## Query generation task:\nIdentify the number of cybersecurity incidents in the APAC region in Q3 2021\n\n", "response": "SELECT COUNT(*) FROM Cybersecurity_Incidents WHERE region = 'APAC' AND QUARTER(incident_date) = 3 AND incident_date >= '2021-07-01' AND incident_date <= '2021-09-30';"}, {"query": "## sql context :\nCREATE TABLE Volunteers (id INT, name VARCHAR(50), registered_date DATE); INSERT INTO Volunteers (id, name, registered_date) VALUES (1, 'John Doe', '2021-01-01'), (2, 'Jane Smith', '2021-02-01');\n\n## Query generation task:\nHow many volunteers are registered in the 'Volunteers' table?\n\n", "response": "SELECT COUNT(*) FROM Volunteers"}, {"query": "## sql context :\nCREATE TABLE trees (id INT PRIMARY KEY, species VARCHAR(255), diameter FLOAT);\n\n## Query generation task:\nDelete all trees with a diameter greater than 60 inches from the trees table\n\n", "response": "DELETE FROM trees WHERE diameter > 60;"}, {"query": "## sql context :\nCREATE TABLE Artwork (artwork_id INT, artwork_name VARCHAR(255), artist_gender VARCHAR(10), artist_id INT); INSERT INTO Artwork (artwork_id, artwork_name, artist_gender, artist_id) VALUES (1, 'The Starry Night', 'Male', 1), (2, 'The Scream', 'Male', 2);\n\n## Query generation task:\nShow artworks by female artists from the 'Artwork' table.\n\n", "response": "SELECT artwork_name, artist_id FROM Artwork WHERE artist_gender = 'Female';"}, {"query": "## sql context :\nCREATE TABLE disinformation_detection (detection_id INT, detection_date DATE, is_false BOOLEAN);\n\n## Query generation task:\nHow many false disinformation stories were detected per month?\n\n", "response": "SELECT DATE_TRUNC('month', detection_date) AS month, COUNT(*) FROM disinformation_detection WHERE is_false = TRUE GROUP BY month;"}, {"query": "## sql context :\nCREATE TABLE mining_sites (site_id INT, site_name VARCHAR(50), state VARCHAR(20));\n\n## Query generation task:\nHow many mining sites are located in 'Utah'?\n\n", "response": "SELECT COUNT(*) FROM mining_sites WHERE state = 'Utah';"}, {"query": "## sql context :\nCREATE SCHEMA hr; CREATE TABLE departments (id INT, name VARCHAR); INSERT INTO departments VALUES (1, 'Marketing'); CREATE TABLE employees (id INT, name VARCHAR, department_id INT); INSERT INTO employees VALUES (1, 'John Doe', 1);\n\n## Query generation task:\nHow many employees are there in each department in the 'hr' schema, grouped by department and sorted by the number of employees in descending order?\n\n", "response": "SELECT departments.name, COUNT(*) AS num_employees FROM hr.departments JOIN hr.employees ON departments.id = employees.department_id GROUP BY departments.name ORDER BY num_employees DESC;"}, {"query": "## sql context :\nCREATE TABLE recycling_rates_state (state VARCHAR(20), year INT, recycling_rate DECIMAL(3,2)); INSERT INTO recycling_rates_state (state, year, recycling_rate) VALUES ('Texas', 2015, 0.30), ('Texas', 2015, 0.35), ('Texas', 2015, 0.40);\n\n## Query generation task:\nWhat was the total recycling rate in the state of Texas in 2015?\n\n", "response": "SELECT SUM(recycling_rate) AS total_recycling_rate FROM recycling_rates_state WHERE state = 'Texas' AND year = 2015;"}, {"query": "## sql context :\nCREATE TABLE GameSales (GameID INT, GameName VARCHAR(50), Genre VARCHAR(50), Revenue DECIMAL(10, 2)); INSERT INTO GameSales (GameID, GameName, Genre, Revenue) VALUES (1, 'Fortnite', 'Battle Royale', 1000.00), (2, 'Minecraft', 'Sandbox', 500.00), (3, 'Call of Duty', 'FPS', 800.00), (4, 'The Sims', 'Life Simulation', 700.00);\n\n## Query generation task:\nWhat is the total revenue generated by each game genre?\n\n", "response": "SELECT Genre, SUM(Revenue) as TotalRevenue FROM GameSales GROUP BY Genre;"}, {"query": "## sql context :\nCREATE TABLE user_genre (user_id INT, user_name VARCHAR(255), genre VARCHAR(255)); CREATE TABLE user (user_id INT, user_name VARCHAR(255));\n\n## Query generation task:\nWhich users have streamed music from more than one genre?\n\n", "response": "SELECT user_name FROM user_genre GROUP BY user_name HAVING COUNT(DISTINCT genre) > 1;"}, {"query": "## sql context :\nCREATE TABLE transactions (transaction_id INT, transaction_date DATE);\n\n## Query generation task:\nWhat is the number of transactions by day for the month of January 2022?\n\n", "response": "SELECT DATE(transaction_date) as transaction_day, COUNT(transaction_id) as number_of_transactions FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-01-31' GROUP BY transaction_day;"}, {"query": "## sql context :\nCREATE TABLE energy_production (country VARCHAR(20), population INT, renewable_energy_production INT); INSERT INTO energy_production (country, population, renewable_energy_production) VALUES ('Canada', 38000000, 616000), ('Germany', 83000000, 355000), ('France', 67000000, 229000), ('Spain', 47000, 228000), ('Brazil', 212000000, 465000), ('Australia', 25000000, 183000);\n\n## Query generation task:\nIdentify the top 2 countries with the highest renewable energy production per capita, excluding countries with a population less than 10 million.\n\n", "response": "SELECT country, renewable_energy_production/population AS production_per_capita FROM energy_production WHERE population >= 10000000 GROUP BY country ORDER BY production_per_capita DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE Levees(id INT, name TEXT, location TEXT, built DATE); INSERT INTO Levees(id, name, location, built) VALUES (1, 'New Orleans East Levee', 'Louisiana', '2006-01-01');\n\n## Query generation task:\nWhich levees in Louisiana were built before 2000?\n\n", "response": "SELECT name FROM Levees WHERE location = 'Louisiana' AND built < '2000-01-01';"}, {"query": "## sql context :\nCREATE TABLE heart_rate_data (id INT, user_id INT, heart_rate INT, shoe_brand VARCHAR(20), measurement_date DATE); INSERT INTO heart_rate_data (id, user_id, heart_rate, shoe_brand, measurement_date) VALUES (1, 1, 120, 'Nike', '2022-08-01'), (2, 2, 110, 'Adidas', '2022-07-15'), (3, 3, 130, 'Nike', '2022-08-10'), (4, 4, 90, 'Yeezy', '2022-07-28');\n\n## Query generation task:\nWhat is the minimum heart rate recorded for users wearing brand Y?\n\n", "response": "SELECT MIN(heart_rate) FROM heart_rate_data WHERE shoe_brand = 'Yeezy';"}, {"query": "## sql context :\nCREATE TABLE sustainable_practices_2 (practice_id INT, building_type VARCHAR(20), state VARCHAR(20), description TEXT); INSERT INTO sustainable_practices_2 (practice_id, building_type, state, description) VALUES (1, 'Residential', 'OR', 'Use of renewable energy sources'), (2, 'Commercial', 'OR', 'Green roofs');\n\n## Query generation task:\nList all sustainable building practices in the state of Oregon\n\n", "response": "SELECT * FROM sustainable_practices_2 WHERE state = 'OR';"}, {"query": "## sql context :\nCREATE TABLE dates (date DATE PRIMARY KEY);\n\n## Query generation task:\nWhat is the number of crimes committed daily in each location?\n\n", "response": "SELECT location, incident_date, COUNT(*) as daily_crimes FROM crimes JOIN dates ON crimes.incident_date = dates.date GROUP BY location, incident_date;"}, {"query": "## sql context :\nCREATE TABLE student_courses (student_id INT, course_type VARCHAR(10), mental_health_score INT); INSERT INTO student_courses (student_id, course_type, mental_health_score) VALUES (1, 'Open', 75), (2, 'Traditional', 80), (3, 'Open', 70), (4, 'Traditional', 85);\n\n## Query generation task:\nWhat is the average mental health score for students in open pedagogy courses, compared to traditional courses?\n\n", "response": "SELECT AVG( mental_health_score ) as avg_open, 'Open' as course_type FROM student_courses WHERE course_type = 'Open' UNION ALL SELECT AVG( mental_health_score ) as avg_traditional, 'Traditional' as course_type FROM student_courses WHERE course_type = 'Traditional';"}, {"query": "## sql context :\nCREATE TABLE FabricData (FabricID INT, SupplierID INT, FabricType TEXT, Quantity FLOAT, Recycled BOOLEAN); INSERT INTO FabricData (FabricID, SupplierID, FabricType, Quantity, Recycled) VALUES (1001, 1, 'Recycled Polyester', 500, true), (1002, 1, 'Polyester', 700, false), (1003, 2, 'Hemp', 800, false);\n\n## Query generation task:\nWhat is the total quantity of recycled fabric used by each textile supplier in the past year?\n\n", "response": "SELECT SupplierID, SUM(Quantity) FROM FabricData WHERE Recycled = true AND FabricDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY SupplierID;"}, {"query": "## sql context :\nCREATE TABLE Vessels (ID INT, Name VARCHAR(50), Type VARCHAR(50), Engine_Capacity INT); INSERT INTO Vessels (ID, Name, Type, Engine_Capacity) VALUES (1, 'MV Orient', 'Cargo Ship', 4500), (2, 'MV Odyssey', 'Cargo Ship', 2500);\n\n## Query generation task:\nList the vessel names, their types, and engine capacities for cargo ships with an engine capacity between 3000 and 5000?\n\n", "response": "SELECT Name, Type, Engine_Capacity FROM Vessels WHERE Type = 'Cargo Ship' AND Engine_Capacity BETWEEN 3000 AND 5000;"}, {"query": "## sql context :\nCREATE TABLE union_members (member_id INT, name VARCHAR(50), age INT, union_id INT); CREATE TABLE unions (union_id INT, union_name VARCHAR(50), focus VARCHAR(50)); INSERT INTO union_members (member_id, name, age, union_id) VALUES (1, 'John Doe', 35, 1), (2, 'Jane Smith', 40, 1), (3, 'Mike Johnson', 30, 2); INSERT INTO unions (union_id, union_name, focus) VALUES (1, 'Healthcare Workers Union', 'healthcare'), (2, 'Teachers Union', 'education');\n\n## Query generation task:\nWhat is the maximum age of members in unions that have a focus on education?\n\n", "response": "SELECT MAX(um.age) FROM union_members um INNER JOIN unions u ON um.union_id = u.union_id WHERE u.focus = 'education';"}, {"query": "## sql context :\nCREATE TABLE Cultivators (CultivatorID int, CultivatorName varchar(255), LicenseNumber varchar(255), State varchar(255)); INSERT INTO Cultivators (CultivatorID, CultivatorName, LicenseNumber, State) VALUES (1, 'California Green', 'CA001', 'California'); INSERT INTO Cultivators (CultivatorID, CultivatorName, LicenseNumber, State) VALUES (2, 'Emerald Fields', 'CA002', 'California'); CREATE TABLE Production (ProductionID int, CultivatorID int, Quantity int); INSERT INTO Production (ProductionID, CultivatorID, Quantity) VALUES (1, 1, 1200); INSERT INTO Production (ProductionID, CultivatorID, Quantity) VALUES (2, 2, 800);\n\n## Query generation task:\nWhat is the total quantity of cannabis produced by each cultivator, for cultivators operating in the state of California with more than 1000 units produced?\n\n", "response": "SELECT Cultivators.CultivatorName, SUM(Production.Quantity) AS TotalQuantity FROM Cultivators INNER JOIN Production ON Cultivators.CultivatorID = Production.CultivatorID WHERE Cultivators.State = 'California' GROUP BY Cultivators.CultivatorName HAVING TotalQuantity > 1000;"}, {"query": "## sql context :\nCREATE TABLE HealthyDelights (menu_item VARCHAR(50), quantity INT, purchase_price DECIMAL(5,2)); INSERT INTO HealthyDelights (menu_item, quantity, purchase_price) VALUES ('Fruit Salad', 10, 5.50), ('Veggie Wrap', 15, 7.00), ('Tofu Scramble', 20, 6.50);\n\n## Query generation task:\nWhat is the total inventory value of the 'Healthy Delights' menu?\n\n", "response": "SELECT SUM(quantity * purchase_price) as total_inventory_value FROM HealthyDelights;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists biosensors; USE biosensors; CREATE TABLE if not exists projects (id INT, name VARCHAR(100), location VARCHAR(100), start_date DATE); CREATE TABLE if not exists funding_sources (id INT, project_id INT, source VARCHAR(100), amount DECIMAL(10,2)); INSERT INTO projects (id, name, location, start_date) VALUES (1, 'ProjectA', 'California', '2015-01-01'), (2, 'ProjectB', 'Texas', '2016-02-02'), (3, 'ProjectC', 'California', '2017-03-03'), (4, 'ProjectD', 'New York', '2018-04-04'); INSERT INTO funding_sources (id, project_id, source, amount) VALUES (1, 1, 'Private - Firm A', 5000000.00), (2, 1, 'Private - Firm B', 3000000.00), (3, 3, 'Private - Firm A', 7000000.00), (4, 4, 'Government - Agency C', 4000000.00);\n\n## Query generation task:\nList all biosensor projects that have received funding from private sources based in the US, along with the funding amounts and project start dates.\n\n", "response": "SELECT projects.name, funding_sources.source, SUM(funding_sources.amount), projects.start_date FROM biosensors.projects INNER JOIN biosensors.funding_sources ON projects.id = funding_sources.project_id WHERE projects.location = 'California' AND funding_sources.source LIKE 'Private%' GROUP BY projects.name, funding_sources.source, projects.start_date;"}, {"query": "## sql context :\nCREATE TABLE TrainMaintenance (TaskID INT, TaskDate DATE, TaskType VARCHAR(20)); INSERT INTO TrainMaintenance (TaskID, TaskDate, TaskType) VALUES (1, '2022-01-05', 'Oil Change'), (2, '2022-01-10', 'Inspection'), (3, '2022-02-03', 'Tire Rotation'), (4, '2022-01-15', 'Brake Adjustment'), (5, '2022-02-12', 'Oil Change');\n\n## Query generation task:\nWhat is the total number of maintenance tasks performed on trains in the last month?\n\n", "response": "SELECT COUNT(*) FROM TrainMaintenance WHERE TaskDate >= '2022-01-01' AND TaskDate < '2022-02-01';"}, {"query": "## sql context :\nCREATE TABLE traditional_arts (id INT, art VARCHAR(50), country VARCHAR(50), practitioners INT); INSERT INTO traditional_arts (id, art, country, practitioners) VALUES (1, 'Inuit carving', 'Canada', 700); INSERT INTO traditional_arts (id, art, country, practitioners) VALUES (2, 'M\u0101ori tattooing', 'New Zealand', 300);\n\n## Query generation task:\nWhich traditional arts have more than 500 practitioners in Canada?\n\n", "response": "SELECT art FROM traditional_arts WHERE country = 'Canada' AND practitioners > 500;"}, {"query": "## sql context :\nCREATE TABLE sustainable_urban_properties_2 (id INT, city VARCHAR(255), neighborhood VARCHAR(255), property_type VARCHAR(255)); INSERT INTO sustainable_urban_properties_2 (id, city, neighborhood, property_type) VALUES (1, 'Boston', 'Back Bay', 'Apartment'), (2, 'Boston', 'Beacon Hill', 'Condo'), (3, 'Boston', 'Back Bay', 'Condo');\n\n## Query generation task:\nList the unique neighborhood names in the city of Boston, Massachusetts, that have more than 200 sustainable urban properties.\n\n", "response": "SELECT DISTINCT neighborhood FROM sustainable_urban_properties_2 WHERE city = 'Boston' GROUP BY neighborhood HAVING COUNT(*) > 200;"}, {"query": "## sql context :\nCREATE TABLE ThreatIntelligence (EntryID INT, EntryDate DATE); INSERT INTO ThreatIntelligence (EntryID, EntryDate) VALUES (3, '2022-06-10'); INSERT INTO ThreatIntelligence (EntryID, EntryDate) VALUES (4, '2022-01-19');\n\n## Query generation task:\nWhat is the total number of threat intelligence entries for the last 6 months?\n\n", "response": "SELECT COUNT(*) FROM ThreatIntelligence WHERE EntryDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"}, {"query": "## sql context :\nCREATE TABLE investments(id INT, startup_id INT, round_number INT, investment_amount INT); INSERT INTO investments VALUES (1, 1, 1, 1000000); INSERT INTO investments VALUES (2, 1, 2, 5000000); INSERT INTO investments VALUES (3, 2, 1, 2000000);\n\n## Query generation task:\nWhat is the maximum number of investment rounds for startups founded by individuals who identify as LGBTQ+?\n\n", "response": "SELECT MAX(round_number) FROM investments JOIN startups ON investments.startup_id = startups.id WHERE startups.founder_identity = 'LGBTQ+';"}, {"query": "## sql context :\nCREATE TABLE donors (donor_id INT, donor_name TEXT, donor_category TEXT); INSERT INTO donors (donor_id, donor_name, donor_category) VALUES (1, 'Jane Smith', 'Individual'), (2, 'XYZ Foundation', 'Foundation'), (3, 'Greenpeace', 'Nonprofit'); CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount DECIMAL, donation_date DATE); INSERT INTO donations (donation_id, donor_id, donation_amount, donation_date) VALUES (1, 1, 150, '2022-07-05'), (2, 2, 3000, '2022-07-10'), (3, 3, 500, '2022-09-15'), (4, 1, 200, '2022-08-12'), (5, 2, 6500, '2022-08-20'), (6, 3, 900, '2022-10-01');\n\n## Query generation task:\nWhich non-profit organizations received the highest total donation amounts in Q3 2022, segmented by donor category?\n\n", "response": "SELECT donor_category, p.program_name, SUM(d.donation_amount) as total_donation_amount FROM donations d JOIN donors don ON d.donor_id = don.donor_id JOIN programs p ON don.donor_category = p.program_name WHERE d.donation_date BETWEEN '2022-07-01' AND '2022-09-30' GROUP BY donor_category, p.program_name;"}, {"query": "## sql context :\nCREATE TABLE suppliers (supplier_id INT, name VARCHAR(255), total_spent DECIMAL(10, 2), region VARCHAR(255), organic_purchases BOOLEAN); INSERT INTO suppliers (supplier_id, name, total_spent, region, organic_purchases) VALUES (1, 'Supplier A', 12000, 'Europe', true), (2, 'Supplier B', 10000, 'Europe', true), (3, 'Supplier C', 15000, 'Asia', true), (4, 'Supplier D', 8000, 'America', true), (5, 'Supplier E', 10000, 'Spain', false);\n\n## Query generation task:\nWhat is the percentage of organic ingredient purchases for each supplier in the Asia region?\n\n", "response": "SELECT region, 100.0 * AVG(CASE WHEN organic_purchases = true THEN 1.0 ELSE 0.0 END) AS pct_organic FROM suppliers WHERE region = 'Asia' GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE WaterTreatmentPlants (id INT, state VARCHAR(20), monthly_budget FLOAT, monthly_expenses FLOAT); INSERT INTO WaterTreatmentPlants (id, state, monthly_budget, monthly_expenses) VALUES (1, 'New York', 12000.0, 13000.0), (2, 'New York', 11000.0, 10500.0), (3, 'California', 15000.0, 14500.0);\n\n## Query generation task:\nHow many water treatment plants in the state of New York have exceeded their monthly budget?\n\n", "response": "SELECT COUNT(*) FROM WaterTreatmentPlants WHERE state = 'New York' AND monthly_expenses > monthly_budget;"}, {"query": "## sql context :\nCREATE TABLE displaced_people (id INT, country VARCHAR(255), food_assistance_given BOOLEAN); INSERT INTO displaced_people (id, country, food_assistance_given) VALUES (1, 'Yemen', TRUE), (2, 'Yemen', FALSE), (3, 'Syria', TRUE); CREATE TABLE food_assistance (id INT, country VARCHAR(255), amount FLOAT); INSERT INTO food_assistance (id, country, amount) VALUES (1, 'Yemen', 500), (2, 'Yemen', 700), (3, 'Syria', 900);\n\n## Query generation task:\nWhat is the total amount of food assistance provided to displaced people in Yemen?\n\n", "response": "SELECT SUM(amount) FROM food_assistance fa JOIN displaced_people d ON fa.country = d.country WHERE d.food_assistance_given = TRUE;"}, {"query": "## sql context :\nCREATE TABLE ocean_acidification (measurement_date DATE, location TEXT, level FLOAT); INSERT INTO ocean_acidification (measurement_date, location, level) VALUES ('2021-01-01', 'Hawaii Ocean Observatory', 7.4); INSERT INTO ocean_acidification (measurement_date, location, level) VALUES ('2021-01-02', 'Monterey Bay Aquarium Research Institute', 7.3);\n\n## Query generation task:\nWhat is the minimum ocean acidification level recorded in the Pacific Ocean, and which research station had this level?\n\n", "response": "SELECT research_station.station_name, oa.level AS min_level FROM ocean_acidification oa JOIN (SELECT location, MIN(level) AS min_level FROM ocean_acidification WHERE region = 'Pacific Ocean' GROUP BY location) oa_min ON oa.level = oa_min.min_level JOIN research_stations research_station ON oa.location = research_station.station_name;"}, {"query": "## sql context :\nCREATE TABLE renewable_projects (id INT, country VARCHAR(50), year INT, project_status VARCHAR(50));\n\n## Query generation task:\nHow many renewable energy projects were completed in Canada between 2015 and 2020?\n\n", "response": "SELECT COUNT(*) FROM renewable_projects WHERE country = 'Canada' AND project_status = 'completed' AND year BETWEEN 2015 AND 2020;"}, {"query": "## sql context :\nCREATE TABLE textile_sourcing(id INT PRIMARY KEY, material VARCHAR(50), country VARCHAR(50), price DECIMAL(10,2)); INSERT INTO textile_sourcing(id, material, country, price) VALUES (1, 'cotton', 'Brazil', 3.50), (2, 'silk', 'China', 15.00), (3, 'wool', 'Australia', 7.00), (4, 'polyester', 'India', 2.00), (5, 'silk', 'China', 17.00);\n\n## Query generation task:\nWhat is the maximum price of silk textiles sourced from China?\n\n", "response": "SELECT MAX(price) FROM textile_sourcing WHERE material = 'silk' AND country = 'China';"}, {"query": "## sql context :\nCREATE TABLE contracts (contract_id INT, contract_value FLOAT, contract_date DATE, business_zone VARCHAR(20)); INSERT INTO contracts (contract_id, contract_value, contract_date, business_zone) VALUES (1, 1000000, '2021-05-01', 'HUBZone'), (2, 750000, '2021-10-20', 'Non-HUBZone');\n\n## Query generation task:\nDetermine the total value of contracts awarded to Historically Underutilized Business Zones (HUBZones) in the past year\n\n", "response": "SELECT SUM(contract_value) FROM contracts WHERE business_zone = 'HUBZone' AND contract_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}, {"query": "## sql context :\nCREATE TABLE sponsorship_donations (id INT, donor_name TEXT, program TEXT, donation_amount DECIMAL); INSERT INTO sponsorship_donations (id, donor_name, program, donation_amount) VALUES (1, 'Eva', 'Sponsorship', 500.00); INSERT INTO sponsorship_donations (id, donor_name, program, donation_amount) VALUES (2, 'Frank', 'Sponsorship', 1000.00);\n\n## Query generation task:\nWhat is the maximum donation amount for the 'Sponsorship' program?\n\n", "response": "SELECT MAX(donation_amount) FROM sponsorship_donations WHERE program = 'Sponsorship';"}, {"query": "## sql context :\nCREATE TABLE Volunteers (VolunteerID int, Name varchar(50)); INSERT INTO Volunteers (VolunteerID, Name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Mike Johnson'); CREATE TABLE VolunteerPrograms (VolunteerID int, ProgramID int); INSERT INTO VolunteerPrograms (VolunteerID, ProgramID) VALUES (1, 1), (2, 1), (3, 2); CREATE TABLE Donations (DonationID int, DonorID int, ProgramID int, Amount decimal(10,2)); INSERT INTO Donations (DonationID, DonorID, ProgramID, Amount) VALUES (1, 1, 1, 100.00), (2, 2, 1, 200.00), (3, 3, 2, 50.00);\n\n## Query generation task:\nWhat is the total donation amount for each volunteer's preferred program?\n\n", "response": "SELECT V.Name, SUM(D.Amount) as TotalDonations FROM Volunteers V JOIN VolunteerPrograms VP ON V.VolunteerID = VP.VolunteerID JOIN Donations D ON VP.ProgramID = D.ProgramID GROUP BY V.Name"}, {"query": "## sql context :\nCREATE TABLE Movies (MovieID INT, Title VARCHAR(255), Genre VARCHAR(50), ReleaseYear INT, ProductionBudget DECIMAL(10,2), Country VARCHAR(50), IMDbRating DECIMAL(3,2)); CREATE TABLE TVShows (ShowID INT, Title VARCHAR(255), Genre VARCHAR(50), ReleaseYear INT, ProductionBudget DECIMAL(10,2), Country VARCHAR(50), IMDbRating DECIMAL(3,2));\n\n## Query generation task:\nWhat is the average IMDb rating for movies and TV shows produced in Japan, and their respective total production budgets?\n\n", "response": "SELECT AVG(Movies.IMDbRating) AS Avg_Movie_Rating, AVG(TVShows.IMDbRating) AS Avg_TVShow_Rating, SUM(Movies.ProductionBudget) AS Total_Movie_Budget, SUM(TVShows.ProductionBudget) AS Total_TVShow_Budget FROM Movies INNER JOIN TVShows ON 1=1 WHERE Movies.Country = 'Japan' AND TVShows.Country = 'Japan';"}, {"query": "## sql context :\nCREATE TABLE DisabilitySupportPrograms (year INT, budget DECIMAL(5,2)); INSERT INTO DisabilitySupportPrograms (year, budget) VALUES (2019, 120000.00), (2020, 150000.00), (2021, 180000.00), (2022, 210000.00); CREATE TABLE DisabilityAdvocacy (year INT, budget DECIMAL(5,2)); INSERT INTO DisabilityAdvocacy (year, budget) VALUES (2019, 125000.00), (2020, 160000.00), (2021, 190000.00), (2022, 225000.00);\n\n## Query generation task:\nWhat is the total budget allocated for disability support programs and advocacy efforts in '2022'?\n\n", "response": "SELECT SUM(DisabilitySupportPrograms.budget) + SUM(DisabilityAdvocacy.budget) FROM DisabilitySupportPrograms, DisabilityAdvocacy WHERE DisabilitySupportPrograms.year = 2022 AND DisabilityAdvocacy.year = 2022;"}, {"query": "## sql context :\nCREATE TABLE faculty (faculty_id INT, name TEXT, gender TEXT, department TEXT); CREATE TABLE research_grants (grant_id INT, faculty_id INT, amount DECIMAL(10,2), date DATE);\n\n## Query generation task:\nWhat is the total amount of research grants awarded to each faculty member in the past 5 years?\n\n", "response": "SELECT f.name, SUM(rg.amount) FROM research_grants rg INNER JOIN faculty f ON rg.faculty_id = f.faculty_id WHERE rg.date >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY f.name;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists defense; CREATE TABLE if not exists russia_nato_diplomacy (id INT PRIMARY KEY, year INT, meeting_count INT); INSERT INTO russia_nato_diplomacy (id, year, meeting_count) VALUES (1, 2020, 3), (2, 2021, 5);\n\n## Query generation task:\nHow many defense diplomacy meetings were held by Russia with NATO countries in the last 2 years?\n\n", "response": "SELECT SUM(meeting_count) FROM defense.russia_nato_diplomacy WHERE year BETWEEN 2020 AND 2021 AND country IN ('NATO', 'Russia');"}, {"query": "## sql context :\nCREATE TABLE lawyers (lawyer_name VARCHAR(50), cases_heard INT); INSERT INTO lawyers VALUES ('John Smith', 500), ('Jane Doe', 400), ('Robert Johnson', 300), ('Mary Williams', 200);\n\n## Query generation task:\nWho are the top 3 most active lawyers in terms of cases heard, and what is the total number of cases heard for each?\n\n", "response": "SELECT lawyer_name, SUM(cases_heard) AS total_cases_heard FROM lawyers GROUP BY lawyer_name ORDER BY total_cases_heard DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE workers (worker_id INT, sector VARCHAR(255), job_title VARCHAR(255), region VARCHAR(255), salary DECIMAL(10,2)); INSERT INTO workers (worker_id, sector, job_title, region, salary) VALUES (1, 'Workforce Development', 'Engineer', 'North America', 80000.00), (2, 'Workforce Development', 'Technician', 'North America', 50000.00), (3, 'Workforce Development', 'Manager', 'Europe', 90000.00);\n\n## Query generation task:\nWhat is the average salary of workers in the workforce development sector, grouped by their job title and region?\n\n", "response": "SELECT job_title, region, AVG(salary) FROM workers WHERE sector = 'Workforce Development' GROUP BY job_title, region;"}, {"query": "## sql context :\nCREATE TABLE buildings (id INT, region VARCHAR(20), year INT, type VARCHAR(20)); INSERT INTO buildings (id, region, year, type) VALUES (1, 'Southern', 2020, 'Green'); INSERT INTO buildings (id, region, year, type) VALUES (2, 'Northern', 2019, 'Green');\n\n## Query generation task:\nHow many green buildings were constructed in the Southern region in 2020?\n\n", "response": "SELECT COUNT(*) FROM buildings WHERE region = 'Southern' AND year = 2020 AND type = 'Green';"}, {"query": "## sql context :\nCREATE TABLE sustainable_fabrics (id INT, name TEXT, price DECIMAL); INSERT INTO sustainable_fabrics (id, name, price) VALUES (1, 'Organic Cotton', 2.5), (2, 'Recycled Polyester', 3.2), (3, 'Hemp', 2.8);\n\n## Query generation task:\nWhat is the average price of sustainable fabrics?\n\n", "response": "SELECT AVG(price) FROM sustainable_fabrics;"}, {"query": "## sql context :\nCREATE TABLE algorithmic_fairness (model_name TEXT, dataset TEXT, fairness_score INTEGER); INSERT INTO algorithmic_fairness (model_name, dataset, fairness_score) VALUES ('model1', 'algorithmic_fairness', 85), ('model2', 'algorithmic_fairness', 92);\n\n## Query generation task:\nWhat is the maximum fairness score for models trained on the 'algorithmic_fairness' dataset?\n\n", "response": "SELECT MAX(fairness_score) FROM algorithmic_fairness WHERE dataset = 'algorithmic_fairness';"}, {"query": "## sql context :\nCREATE TABLE Port (port_id INT, port_name TEXT, country TEXT); INSERT INTO Port (port_id, port_name, country) VALUES (1, 'Port of Shanghai', 'China'); INSERT INTO Port (port_id, port_name, country) VALUES (2, 'Port of Singapore', 'Singapore'); CREATE TABLE Cargo (cargo_id INT, port_id INT, weight FLOAT, handling_date DATE); INSERT INTO Cargo (cargo_id, port_id, weight, handling_date) VALUES (1, 1, 150000.0, '2022-01-01');\n\n## Query generation task:\nWhich are the top 5 ports with the most cargo weight handled in 2022?\n\n", "response": "SELECT p.port_name, SUM(c.weight) as total_weight FROM Port p JOIN Cargo c ON p.port_id = c.port_id WHERE handling_date >= '2022-01-01' AND handling_date < '2023-01-01' GROUP BY p.port_name ORDER BY total_weight DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE departments (dept_id INT, name VARCHAR(255), budget DECIMAL(10, 2)); INSERT INTO departments (dept_id, name, budget) VALUES (1, 'Education', 500000), (2, 'Transportation', 750000), (3, 'Health', 800000), (4, 'Housing', 650000), (5, 'Public Safety', 400000);\n\n## Query generation task:\nWhat is the average budget for all departments?\n\n", "response": "SELECT AVG(budget) AS average_budget FROM departments;"}, {"query": "## sql context :\nCREATE TABLE LanguagesAtRisk (id INT, language TEXT, status TEXT); INSERT INTO LanguagesAtRisk (id, language, status) VALUES (1, 'Ainu Language', 'Endangered'); CREATE TABLE AssociatedHeritages (id INT, language_id INT, heritage_site TEXT); INSERT INTO AssociatedHeritages (id, language_id, heritage_site) VALUES (1, 1, 'Ainu Cultural Heritage');\n\n## Query generation task:\nWhich languages are at risk of disappearing and their associated heritage sites?\n\n", "response": "SELECT L.language, AH.heritage_site FROM LanguagesAtRisk L INNER JOIN AssociatedHeritages AH ON L.id = AH.language_id;"}, {"query": "## sql context :\nCREATE TABLE City (id INT, name VARCHAR(255), country VARCHAR(255), population INT, sustainable_rating FLOAT); CREATE TABLE Property (id INT, city VARCHAR(255), price FLOAT);\n\n## Query generation task:\nWhat is the total price of properties in cities with a sustainable rating above 80 and a population greater than 500,000, that are higher than the overall average property price?\n\n", "response": "SELECT City.name, SUM(Property.price) as total_price FROM City INNER JOIN Property ON City.name = Property.city WHERE City.sustainable_rating > 80 AND City.population > 500000 GROUP BY City.name HAVING SUM(Property.price) > (SELECT AVG(Property.price) FROM Property)"}, {"query": "## sql context :\nCREATE TABLE students (id INT, name VARCHAR(50), disability_type VARCHAR(50), accommodation_provided VARCHAR(50), accommodation_date DATE); INSERT INTO students (id, name, disability_type, accommodation_provided, accommodation_date) VALUES (1, 'Jane Smith', 'Mobility Impairment', 'Wheelchair', '2020-01-01');\n\n## Query generation task:\nHow many students with mobility impairments received assistive devices in 2020?\n\n", "response": "SELECT COUNT(*) FROM students WHERE disability_type = 'Mobility Impairment' AND YEAR(accommodation_date) = 2020 AND accommodation_provided IN ('Wheelchair', 'Mobility Scooter');"}, {"query": "## sql context :\nCREATE TABLE EsportsEvents (EventID INT, Location VARCHAR(20), Year INT); INSERT INTO EsportsEvents (EventID, Location, Year) VALUES (1, 'North America', 2019), (2, 'Europe', 2020), (3, 'Asia', 2019), (4, 'South America', 2019), (5, 'Europe', 2019), (6, 'North America', 2020), (7, 'Asia', 2020), (8, 'Oceania', 2018), (9, 'Oceania', 2019);\n\n## Query generation task:\nHow many esports events were held in Oceania in 2018 and 2019?\n\n", "response": "SELECT Location, Year, COUNT(*) as NumEvents FROM EsportsEvents GROUP BY Location, Year"}, {"query": "## sql context :\nCREATE TABLE waste_data (waste_id INT, category VARCHAR(255), waste_date DATE, quantity INT); INSERT INTO waste_data (waste_id, category, waste_date, quantity) VALUES (1, 'Solvents', '2020-01-01', 150), (2, 'Acids', '2020-01-01', 200), (3, 'Gases', '2020-01-01', 250);\n\n## Query generation task:\nWhat is the sum of chemical waste generated monthly for each category?\n\n", "response": "SELECT category, DATE_FORMAT(waste_date, '%Y-%m') AS Month, SUM(quantity) FROM waste_data GROUP BY Month, category;"}, {"query": "## sql context :\nCREATE TABLE transactions (transaction_id INT, customer_id INT, transaction_amount DECIMAL, transaction_date DATE); INSERT INTO transactions (transaction_id, customer_id, transaction_amount, transaction_date) VALUES (1, 1, 50.00, '2022-01-01'), (2, 2, 1500.00, '2022-02-15'); CREATE TABLE customers (customer_id INT, name TEXT); INSERT INTO customers (customer_id, name) VALUES (1, 'John Doe'), (2, 'Jane Smith');\n\n## Query generation task:\nWhat is the maximum transaction amount for each customer in the past year?\n\n", "response": "SELECT c.name, MAX(t.transaction_amount) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_date >= DATEADD(year, -1, GETDATE()) GROUP BY c.name;"}, {"query": "## sql context :\nCREATE TABLE project_timelines (id INT, project_id INT, project_type TEXT, completion_date DATE); INSERT INTO project_timelines (id, project_id, project_type, completion_date) VALUES (1, 111, 'Sustainable', '2022-10-01'), (2, 222, 'Sustainable', '2022-11-15'), (3, 333, 'Conventional', '2022-09-30');\n\n## Query generation task:\nWhat is the average completion time for sustainable building projects in Washington?\n\n", "response": "SELECT AVG(DATEDIFF(completion_date, issue_date)) FROM building_permits bp JOIN project_timelines pt ON bp.permit_number = pt.project_id WHERE bp.project_state = 'Washington' AND pt.project_type = 'Sustainable';"}, {"query": "## sql context :\nCREATE TABLE regions (id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO regions (id, name, country) VALUES (1, 'Arusha', 'Tanzania'); CREATE TABLE rural_feeder_roads (id INT, cost FLOAT, length INT, region_id INT); INSERT INTO rural_feeder_roads (id, cost, length, region_id) VALUES (1, 50000.0, 10, 1);\n\n## Query generation task:\nWhat is the average cost of constructing rural feeder roads in each region of Tanzania, and what is the total length of roads constructed in each region?\n\n", "response": "SELECT r.name, AVG(rfr.cost) as avg_cost, SUM(rfr.length) as total_length FROM rural_feeder_roads rfr INNER JOIN regions r ON rfr.region_id = r.id GROUP BY r.name;"}, {"query": "## sql context :\nCREATE TABLE materials (material_id INT, site_id INT, quantity INT, material_date DATE);\n\n## Query generation task:\nCalculate the total quantity of materials used at each manufacturing site, per month.\n\n", "response": "SELECT site_id, material_date, SUM(quantity) OVER (PARTITION BY site_id ORDER BY material_date) as total_quantity FROM materials;"}, {"query": "## sql context :\nCREATE TABLE Menu_Item (menu_item_id INT, menu_category VARCHAR(255), is_organic BOOLEAN, revenue INT); INSERT INTO Menu_Item (menu_item_id, menu_category, is_organic, revenue) VALUES (1, 'Appetizers', true, 2000), (2, 'Entrees', false, 8000), (3, 'Desserts', true, 3000);\n\n## Query generation task:\nWhat is the total revenue generated by organic menu items?\n\n", "response": "SELECT SUM(revenue) FROM Menu_Item WHERE is_organic = true;"}, {"query": "## sql context :\nCREATE TABLE mining_companies (company_id INT, company_name TEXT); INSERT INTO mining_companies (company_id, company_name) VALUES (1001, 'Mining Corp A'), (1002, 'Mining Corp B'), (1003, 'Mining Corp C'); CREATE TABLE mining_operations (operation_id INT, operation_name TEXT, country TEXT, energy_consumption FLOAT, company_id INT); INSERT INTO mining_operations (operation_id, operation_name, country, energy_consumption, company_id) VALUES (1, 'Porgera Mine', 'Papua New Guinea', 20000, 1001), (2, 'Cerro Verde Mine', 'Peru', 30000, 1001), (3, 'Gruyere Mine', 'Australia', 40000, 1002), (4, 'Veladero Mine', 'Argentina', 50000, 1002), (5, 'Kidd Mine', 'Canada', 60000, 1003), (6, 'Ducktown Mine', 'USA', 70000, 1003);\n\n## Query generation task:\nWhat is the total energy consumption per mining company, and the average energy consumption per mining operation?\n\n", "response": "SELECT mining_companies.company_name, SUM(mining_operations.energy_consumption) AS total_energy_consumption FROM mining_companies JOIN mining_operations ON mining_companies.company_id = mining_operations.company_id GROUP BY mining_companies.company_name; SELECT AVG(energy_consumption) AS average_energy_consumption FROM mining_operations;"}, {"query": "## sql context :\nCREATE TABLE healthcare_providers (id INT, county VARCHAR(20), provider_type VARCHAR(20)); INSERT INTO healthcare_providers (id, county, provider_type) VALUES (1, 'Autauga County', 'Physician'); CREATE TABLE counties (county VARCHAR(20), state VARCHAR(2), population INT); INSERT INTO counties (county, state, population) VALUES ('Autauga County', 'AL', 55000);\n\n## Query generation task:\nList the number of healthcare providers in each county, for counties with a population greater than 15,000.\n\n", "response": "SELECT h.county, COUNT(h.id) FROM healthcare_providers h JOIN counties c ON h.county = c.county WHERE c.population > 15000 GROUP BY h.county;"}, {"query": "## sql context :\nCREATE TABLE NailPolishSales (sale_id INT, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2), quantity INT, sale_date DATE, country VARCHAR(50));\n\n## Query generation task:\nDelete all records of nail polish sales in Canada before 2020.\n\n", "response": "DELETE FROM NailPolishSales WHERE category = 'Nail Polish' AND country = 'Canada' AND sale_date < '2020-01-01';"}, {"query": "## sql context :\nCREATE TABLE songs (song_id INT, genre VARCHAR(20), album VARCHAR(30), artist VARCHAR(30), length FLOAT); CREATE TABLE genres (genre VARCHAR(20)); INSERT INTO genres (genre) VALUES ('pop'), ('rock'), ('jazz'), ('hip-hop'); ALTER TABLE songs ADD CONSTRAINT fk_genre FOREIGN KEY (genre) REFERENCES genres(genre);\n\n## Query generation task:\nWhat is the total length of songs in the pop genre?\n\n", "response": "SELECT SUM(length) as total_length FROM songs WHERE genre = (SELECT genre FROM genres WHERE genre = 'pop');"}, {"query": "## sql context :\nCREATE TABLE military_personnel (division TEXT, personnel INT); INSERT INTO military_personnel (division, personnel) VALUES ('Africa', 3500); INSERT INTO military_personnel (division, personnel) VALUES ('Americas', 4500);\n\n## Query generation task:\nWhat is the minimum number of military personnel in the 'Africa' division?\n\n", "response": "SELECT MIN(personnel) FROM military_personnel WHERE division = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE investments (id INT, sector VARCHAR(20), amount DECIMAL(10,2)); INSERT INTO investments (id, sector, amount) VALUES (1, 'renewable energy', 35000.00), (2, 'renewable energy', 40000.00), (3, 'education', 22000.00);\n\n## Query generation task:\nWhat is the maximum investment made in the renewable energy sector?\n\n", "response": "SELECT MAX(amount) FROM investments WHERE sector = 'renewable energy';"}, {"query": "## sql context :\nCREATE TABLE threat_severity (id INT, threat_type VARCHAR(255), severity INT, threat_time TIMESTAMP);\n\n## Query generation task:\nWhat is the maximum severity of threats related to 'ransomware' in the last quarter?\n\n", "response": "SELECT MAX(severity) as max_severity FROM threat_severity WHERE threat_type = 'ransomware' AND threat_time >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 3 MONTH);"}, {"query": "## sql context :\nCREATE TABLE midwest_region (region VARCHAR(20), account_type VARCHAR(30), account_balance DECIMAL(10,2)); INSERT INTO midwest_region (region, account_type, account_balance) VALUES ('Midwest', 'Socially Responsible Lending', 5000.00), ('Midwest', 'Socially Responsible Lending', 6000.00), ('Midwest', 'Traditional Lending', 4000.00);\n\n## Query generation task:\nWhat is the minimum account balance for traditional lending accounts in the Midwest region?\n\n", "response": "SELECT MIN(account_balance) FROM midwest_region WHERE account_type = 'Traditional Lending';"}, {"query": "## sql context :\nCREATE TABLE eco_accommodations (id INT, region VARCHAR(255), type VARCHAR(255)); INSERT INTO eco_accommodations (id, region, type) VALUES (1, 'North America', 'Eco Lodge'), (2, 'Europe', 'Green Hotel'), (3, 'Asia', 'Eco Hotel');\n\n## Query generation task:\nHow many eco-friendly accommodations are there in each region?\n\n", "response": "SELECT region, COUNT(*) FROM eco_accommodations GROUP BY region;"}, {"query": "## sql context :\nCREATE SCHEMA if not exists biosensors; CREATE TABLE if not exists biosensors.patents (id INT, name VARCHAR(100), country VARCHAR(50), technology VARCHAR(50)); INSERT INTO biosensors.patents (id, name, country, technology) VALUES (1, 'Biosensor A', 'USA', 'Optical'), (2, 'Biosensor B', 'China', 'Electrochemical'), (3, 'Biosensor C', 'USA', 'Mass Spectrometry'), (4, 'Biosensor D', 'China', 'Optical');\n\n## Query generation task:\nShow the number of biosensor technology patents filed in the USA and China, pivoted to display technology type as columns.\n\n", "response": "SELECT country, SUM(CASE WHEN technology = 'Optical' THEN 1 ELSE 0 END) as optical, SUM(CASE WHEN technology = 'Electrochemical' THEN 1 ELSE 0 END) as electrochemical, SUM(CASE WHEN technology = 'Mass Spectrometry' THEN 1 ELSE 0 END) as mass_spectrometry FROM biosensors.patents WHERE country IN ('USA', 'China') GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE erc20_transactions (transaction_id INT, to_address VARCHAR(42), gas_limit INT, timestamp BIGINT);\n\n## Query generation task:\nWhat is the maximum gas limit set for transactions involving the smart contract with the address '0x1234567890123456789012345678901234567890'?\n\n", "response": "SELECT MAX(gas_limit) FROM erc20_transactions WHERE to_address = '0x1234567890123456789012345678901234567890';"}, {"query": "## sql context :\nCREATE TABLE ports (port_code CHAR(3), port_name VARCHAR(20)); INSERT INTO ports (port_code, port_name) VALUES ('LA', 'Los Angeles'), ('NY', 'New York'); CREATE TABLE cargo_handling (port_code CHAR(3), waiting_time INT); INSERT INTO cargo_handling (port_code, waiting_time) VALUES ('LA', 2), ('LA', 3), ('NY', 1), ('NY', 2), ('NY', 3);\n\n## Query generation task:\nWhat are the average waiting times for cargo handling at port 'NY'?\n\n", "response": "SELECT AVG(cargo_handling.waiting_time) as avg_waiting_time FROM cargo_handling WHERE cargo_handling.port_code = 'NY';"}, {"query": "## sql context :\nCREATE TABLE defense_contracts (contract_id INT, contract_amount FLOAT, award_date DATE);\n\n## Query generation task:\nUpdate the 'contract_amount' field in the 'defense_contracts' table, increasing it by 10% for contracts awarded in Q2 2021\n\n", "response": "UPDATE defense_contracts SET contract_amount = contract_amount * 1.1 WHERE award_date BETWEEN '2021-04-01' AND '2021-06-30';"}, {"query": "## sql context :\nCREATE TABLE marine_species (id INT PRIMARY KEY, species_name VARCHAR(255), conservation_status VARCHAR(50));\n\n## Query generation task:\nDelete records of species that are 'Extinct' in the 'marine_species' table\n\n", "response": "DELETE FROM marine_species WHERE conservation_status = 'Extinct';"}, {"query": "## sql context :\nCREATE TABLE city (id INT, name TEXT); CREATE TABLE disaster_zones (id INT, city_id INT, zone TEXT); CREATE TABLE crime_stats (id INT, zone_id INT, crime_type TEXT, frequency INT);\n\n## Query generation task:\nWhat is the distribution of crime types across different disaster preparedness zones?\n\n", "response": "SELECT dz.zone, cs.crime_type, cs.frequency FROM disaster_zones dz JOIN crime_stats cs ON dz.id = cs.zone_id;"}, {"query": "## sql context :\nCREATE TABLE artists (artist_id INT, genre VARCHAR(20)); INSERT INTO artists (artist_id, genre) VALUES (1, 'Latin'), (2, 'Pop'), (3, 'Rock'); CREATE TABLE streams (stream_id INT, artist_id INT, revenue DECIMAL(10,2)); INSERT INTO streams (stream_id, artist_id, revenue) VALUES (1, 1, 10.50), (2, 1, 12.25), (3, 2, 9.99), (4, 3, 15.00);\n\n## Query generation task:\nWhat is the total revenue generated by Latin music artists from digital streaming platforms?\n\n", "response": "SELECT SUM(streams.revenue) FROM streams INNER JOIN artists ON streams.artist_id = artists.artist_id WHERE artists.genre = 'Latin';"}, {"query": "## sql context :\nCREATE TABLE Budget (Year INT, Country VARCHAR(255), SpendingAmount DECIMAL(10,2));\n\n## Query generation task:\nWhat are the total defense spending amounts for each country in the past 5 years?\n\n", "response": "SELECT Country, SUM(SpendingAmount) as TotalSpending FROM Budget WHERE Year BETWEEN EXTRACT(YEAR FROM CURRENT_DATE)-5 AND EXTRACT(YEAR FROM CURRENT_DATE) GROUP BY Country;"}, {"query": "## sql context :\nCREATE TABLE Artworks (ArtworkID INT, Title VARCHAR(50), Gallery VARCHAR(50)); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (1, 'Starry Night', 'ImpressionistGallery'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (2, 'Sunflowers', 'ImpressionistGallery'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (3, 'Untitled', 'ContemporaryArt'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (4, 'Untitled2', 'ContemporaryArt'); INSERT INTO Artworks (ArtworkID, Title, Gallery) VALUES (5, 'Untitled3', 'ContemporaryArt');\n\n## Query generation task:\nWhat is the name of the artwork with ID 3?\n\n", "response": "SELECT Title FROM Artworks WHERE ArtworkID = 3;"}, {"query": "## sql context :\nCREATE TABLE States (StateID INT, State VARCHAR(255)); CREATE TABLE FireStations (StationID INT, StationName VARCHAR(255), StateID INT, StationAddress VARCHAR(255)); CREATE TABLE FireIncidents (IncidentID INT, IncidentType VARCHAR(255), StationID INT, IncidentDate DATE);\n\n## Query generation task:\nObtain the number of fire stations and the number of fire incidents in each state in the country in the last year.\n\n", "response": "SELECT s.State, COUNT(DISTINCT f.StationID) as StationCount, COUNT(DISTINCT fi.IncidentID) as IncidentCount FROM States s JOIN FireStations f ON s.StateID = f.StateID LEFT JOIN FireIncidents fi ON f.StationID = fi.StationID WHERE fi.IncidentDate >= DATEADD(year, -1, GETDATE()) GROUP BY s.State;"}, {"query": "## sql context :\nCREATE TABLE ticket_sales (id INT, team VARCHAR(50), season INT, tickets_sold INT); INSERT INTO ticket_sales (id, team, season, tickets_sold) VALUES (1, 'Red Sox', 2022, 1000000), (2, 'Patriots', 2022, 2000000);\n\n## Query generation task:\nWhat is the total number of tickets sold for each team in the last season?\n\n", "response": "SELECT team, SUM(tickets_sold) as total_tickets_sold FROM ticket_sales WHERE season = 2022 GROUP BY team;"}, {"query": "## sql context :\nCREATE TABLE SecurityIncidents (id INT, incident_category VARCHAR(255), incident_count INT); INSERT INTO SecurityIncidents (id, incident_category, incident_count) VALUES (1, 'Malware', 30), (2, 'Phishing', 25), (3, 'Network Intrusion', 18), (4, 'Unauthorized Access', 15), (5, 'Data Exfiltration', 12), (6, 'Insider Threat', 8), (7, 'Denial of Service', 5), (8, 'Social Engineering', 3);\n\n## Query generation task:\nIdentify the number of security incidents for each category in the SecurityIncidents table, ordered by count.\n\n", "response": "SELECT incident_category, incident_count FROM SecurityIncidents ORDER BY incident_count DESC;"}, {"query": "## sql context :\nCREATE TABLE military_equipment(id INT, name VARCHAR(50), quantity INT); INSERT INTO military_equipment VALUES (1, 'Tank A1', 15), (2, 'Tank A2', 5), (3, 'Tank A3', 12);\n\n## Query generation task:\nDelete military equipment records where the quantity is less than 10\n\n", "response": "DELETE FROM military_equipment WHERE quantity < 10;"}, {"query": "## sql context :\nCREATE TABLE warehouses (id INT, name TEXT, region TEXT); INSERT INTO warehouses (id, name, region) VALUES (1, 'Delhi Warehouse', 'east'), (2, 'Kolkata Warehouse', 'east'); CREATE TABLE packages (id INT, warehouse_id INT, weight FLOAT, state TEXT); INSERT INTO packages (id, warehouse_id, weight, state) VALUES (1, 1, 10.5, 'India'), (2, 1, 12.3, 'Bangladesh'), (3, 2, 9.8, 'Nepal');\n\n## Query generation task:\nWhat is the lowest average weight of packages shipped to each state from the 'east' region?\n\n", "response": "SELECT state, MIN(avg_weight) FROM (SELECT state, AVG(weight) as avg_weight FROM packages p JOIN warehouses w ON p.warehouse_id = w.id WHERE w.region = 'east' GROUP BY state) sub GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE articles (title VARCHAR(255), publication_date DATE);\n\n## Query generation task:\nList the number of articles published per day of the week in the 'articles' table for the year 2022.\n\n", "response": "SELECT EXTRACT(DOW FROM publication_date) AS day_of_week, COUNT(*) AS count FROM articles WHERE EXTRACT(YEAR FROM publication_date) = 2022 GROUP BY day_of_week;"}, {"query": "## sql context :\nCREATE TABLE vendors (vendor_id INT, vendor_name VARCHAR(50), state VARCHAR(50)); INSERT INTO vendors VALUES (1, 'VendorA', 'Illinois'); INSERT INTO vendors VALUES (2, 'VendorB', 'Texas'); CREATE TABLE products (product_id INT, product_name VARCHAR(50), vendor_id INT, price DECIMAL(5,2)); INSERT INTO products VALUES (1, 'Product1', 1, 150); INSERT INTO products VALUES (2, 'Product2', 1, 75); INSERT INTO products VALUES (3, 'Product3', 2, 100); INSERT INTO products VALUES (4, 'Product4', 1, 200);\n\n## Query generation task:\nWho are the vendors in Illinois selling the most expensive product?\n\n", "response": "SELECT vendors.vendor_name FROM vendors JOIN products ON vendors.vendor_id = products.vendor_id WHERE vendors.state = 'Illinois' AND products.price = (SELECT MAX(price) FROM products WHERE products.vendor_id = vendors.vendor_id);"}, {"query": "## sql context :\nCREATE TABLE transactions (transaction_id INT, account_number INT, amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (transaction_id, account_number, amount, transaction_date) VALUES (1, 987654321, 100.00, '2022-02-01'), (2, 987654321, 150.00, '2022-02-05');\n\n## Query generation task:\nWhat is the earliest transaction date for account number 987654321?\n\n", "response": "SELECT MIN(transaction_date) FROM transactions WHERE account_number = 987654321;"}, {"query": "## sql context :\nCREATE TABLE CommunityEngagement (id INT, artist VARCHAR(255), num_activities INT); INSERT INTO CommunityEngagement (id, artist, num_activities) VALUES (1, 'Jose Hernandez', 10), (2, 'Maria Garcia', 8), (3, 'Carlos Lopez', 6), (4, 'Ana Sanchez', 4), (5, 'Pedro Rodriguez', 2);\n\n## Query generation task:\nWho are the top 2 artists with the most community engagement activities?\n\n", "response": "SELECT artist, ROW_NUMBER() OVER(ORDER BY num_activities DESC) as rank FROM CommunityEngagement WHERE rank <= 2;"}, {"query": "## sql context :\nCREATE TABLE faculty (faculty_id INT PRIMARY KEY, name VARCHAR(50), department VARCHAR(50), journal_reviewer BOOLEAN); INSERT INTO faculty (faculty_id, name, department, journal_reviewer) VALUES (1, 'Eve', 'Physics', TRUE); CREATE TABLE grants (grant_id INT PRIMARY KEY, faculty_id INT, amount FLOAT); INSERT INTO grants (grant_id, faculty_id, amount) VALUES (1, 1, 50000);\n\n## Query generation task:\nWhat is the total research grant amount awarded to faculty members in the Physics department who are also reviewers of academic journals?\n\n", "response": "SELECT SUM(g.amount) FROM grants g INNER JOIN faculty f ON g.faculty_id = f.faculty_id WHERE f.department = 'Physics' AND f.journal_reviewer = TRUE;"}, {"query": "## sql context :\nCREATE TABLE automation_tech (tech_id INT, tech_type VARCHAR(255), last_update_date DATE); INSERT INTO automation_tech (tech_id, tech_type, last_update_date) VALUES (1, 'autonomous tractors', '2022-01-01'), (2, 'drone spraying', '2021-12-15'), (3, 'precision seeding', '2022-03-03'), (4, 'autonomous tractors', '2022-04-01');\n\n## Query generation task:\nHow many times has each type of agricultural automation technology been updated in the database?\n\n", "response": "SELECT automation_tech.tech_type, COUNT(automation_tech.tech_id) FROM automation_tech GROUP BY automation_tech.tech_type;"}, {"query": "## sql context :\nCREATE TABLE restaurants (restaurant_id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE inspections (inspection_id INT, restaurant_id INT, violation_count INT);\n\n## Query generation task:\nShow the number of food safety violations for restaurants located in 'Downtown' area.\n\n", "response": "SELECT r.name, SUM(i.violation_count) as total_violations FROM inspections i JOIN restaurants r ON i.restaurant_id = r.restaurant_id WHERE r.location = 'Downtown' GROUP BY r.name;"}, {"query": "## sql context :\nCREATE TABLE sustainable_urbanism (id INT, state VARCHAR, development_type VARCHAR, num_developments INT); INSERT INTO sustainable_urbanism (id, state, development_type, num_developments) VALUES (1, 'NY', 'Green Roofs', 150), (2, 'CA', 'Solar Farms', 200), (3, 'IL', 'Urban Gardens', 100), (4, 'TX', 'Public Transportation', 180), (5, 'AZ', 'Bike Lanes', 120);\n\n## Query generation task:\nWhat is the total number of sustainable urban developments in each state, grouped by development type?\n\n", "response": "SELECT state, development_type, SUM(num_developments) FROM sustainable_urbanism GROUP BY state, development_type;"}, {"query": "## sql context :\nCREATE TABLE Artworks (Artist VARCHAR(50), Artwork VARCHAR(50), Year INT); INSERT INTO Artworks\n\n## Query generation task:\nDelete artists who have less than 2 artworks in the 'Artworks' table\n\n", "response": "DELETE FROM Artworks WHERE Artist IN (SELECT Artist FROM Artworks GROUP BY Artist HAVING COUNT(Artwork) < 2)"}, {"query": "## sql context :\nCREATE TABLE programs (program_id INT, program_name VARCHAR(50), program_category VARCHAR(50), funding_sources VARCHAR(50)); INSERT INTO programs (program_id, program_name, program_category, funding_sources) VALUES (1, 'Art Education', 'Education', 'Private Donation, Corporate Sponsorship'), (2, 'Music Program', 'Performance', 'Private Donation'), (3, 'Theater Workshop', 'Performance', 'Corporate Sponsorship');\n\n## Query generation task:\nIdentify the number of programs in each category that received funding from both private donations and corporate sponsorships.\n\n", "response": "SELECT program_category, COUNT(*) FROM programs WHERE funding_sources LIKE '%Private Donation%' AND funding_sources LIKE '%Corporate Sponsorship%' GROUP BY program_category;"}, {"query": "## sql context :\nCREATE TABLE bookings (booking_id INT, ota_id INT, region TEXT, revenue FLOAT);\n\n## Query generation task:\nShow the total revenue generated by online travel agencies for hotel bookings in the region of Africa\n\n", "response": "SELECT ota_id, SUM(revenue) as total_revenue FROM bookings WHERE region = 'Africa' GROUP BY ota_id;"}, {"query": "## sql context :\nCREATE TABLE scores (id INT, player TEXT, team TEXT, goals INT, year INT); INSERT INTO scores (id, player, team, goals, year) VALUES (1, 'Mia Jones', 'Sapphires', 45, 2022); INSERT INTO scores (id, player, team, goals, year) VALUES (2, 'Liam Brown', 'Thunder', 38, 2022);\n\n## Query generation task:\nHow many goals were scored by the top scorer in 2022?\n\n", "response": "SELECT player, SUM(goals) FROM scores WHERE year = 2022 GROUP BY player ORDER BY SUM(goals) DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE meals (user_id INT, meal_date DATE); INSERT INTO meals (user_id, meal_date) VALUES (1, '2022-01-01'), (1, '2022-01-02'), (1, '2022-01-03'), (2, '2022-01-01'), (2, '2022-01-04'); CREATE TABLE users (user_id INT, country VARCHAR(255)); INSERT INTO users (user_id, country) VALUES (1, 'Japan'), (2, 'USA'), (3, 'Japan');\n\n## Query generation task:\nIdentify users who had meals on consecutive days in Japan.\n\n", "response": "SELECT user_id FROM (SELECT user_id, meal_date, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY meal_date) - ROW_NUMBER() OVER (ORDER BY user_id, meal_date) AS grp FROM meals JOIN users ON meals.user_id = users.user_id WHERE users.country = 'Japan') t GROUP BY grp, user_id HAVING COUNT(*) > 1;"}, {"query": "## sql context :\nCREATE TABLE users (user_id INT, age INT, gender VARCHAR(50)); INSERT INTO users (user_id, age, gender) VALUES (1, 25, 'male'), (2, 35, NULL);\n\n## Query generation task:\nUpdate the gender of all users who have not specified their gender to 'non-binary'.\n\n", "response": "UPDATE users SET gender = 'non-binary' WHERE gender IS NULL;"}, {"query": "## sql context :\nCREATE TABLE DomesticConferences (ConferenceID INT, ConferenceName VARCHAR(50), Location VARCHAR(50));\n\n## Query generation task:\nDetermine the number of unique countries represented in the DomesticConferences table.\n\n", "response": "SELECT COUNT(DISTINCT Location) FROM DomesticConferences;"}, {"query": "## sql context :\nCREATE SCHEMA Airbus; CREATE TABLE Airbus.FlightSafetyRecords (safety_record DECIMAL(5,4), year INT); INSERT INTO Airbus.FlightSafetyRecords (safety_record, year) VALUES (0.9876, 2019), (0.9887, 2018), (0.9898, 2017);\n\n## Query generation task:\nWhat was the average flight safety record for aircrafts manufactured by 'Airbus' in the year 2019?\n\n", "response": "SELECT AVG(safety_record) FROM Airbus.FlightSafetyRecords WHERE year = 2019;"}, {"query": "## sql context :\nCREATE TABLE accommodations (id INT, student_id INT, accommodation_type VARCHAR(50), cost FLOAT, accommodation_date DATE); INSERT INTO accommodations (id, student_id, accommodation_type, cost, accommodation_date) VALUES (1, 2, 'Sign Language Interpreter', 50.00, '2021-01-01'), (2, 3, 'Assistive Listening Devices', 300.00, '2023-04-01'), (3, 10, 'Braille Materials', 150.00, '2023-02-01');\n\n## Query generation task:\nDelete records of accommodations provided to student 10 in 2023\n\n", "response": "DELETE FROM accommodations WHERE student_id = 10 AND YEAR(accommodation_date) = 2023;"}, {"query": "## sql context :\nCREATE TABLE nba (player_id INT, player_name VARCHAR(255), team VARCHAR(255), points INT); INSERT INTO nba (player_id, player_name, team, points) VALUES (1, 'James Harden', 'Nets', 2000), (2, 'Kevin Durant', 'Nets', 1500), (3, 'Joel Embiid', '76ers', 1800);\n\n## Query generation task:\nWhich players scored the most points in the 2020 NBA season?\n\n", "response": "SELECT player_name, points FROM nba ORDER BY points DESC;"}, {"query": "## sql context :\nCREATE TABLE landfills (name TEXT, country TEXT, capacity INTEGER); INSERT INTO landfills (name, country, capacity) VALUES ('Landfill A', 'Japan', 100000), ('Landfill B', 'Japan', 110000), ('Landfill C', 'Japan', 130000);\n\n## Query generation task:\nWhat is the total capacity of all landfills in Japan?\n\n", "response": "SELECT SUM(capacity) FROM landfills WHERE country = 'Japan';"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Salary INT);\n\n## Query generation task:\nDelete records in the 'Employees' table with salaries less than 50000\n\n", "response": "DELETE FROM Employees WHERE Salary < 50000;"}, {"query": "## sql context :\nCREATE TABLE farmers(farmer_id INT, name VARCHAR(255)); INSERT INTO farmers(farmer_id, name) VALUES (1, 'John'), (2, 'Jane'); CREATE TABLE organic_farms(farmer_id INT, crop VARCHAR(255), production INT); INSERT INTO organic_farms(farmer_id, crop, production) VALUES (1, 'Quinoa', 200), (1, 'Rice', 300), (2, 'Corn', 400), (2, 'Quinoa', 500);\n\n## Query generation task:\nWhat is the total production of 'Quinoa' by each farmer in the 'organic_farms' table, joined with 'farmers' table?\n\n", "response": "SELECT f.name, OF.production FROM farmers f INNER JOIN organic_farms OF ON f.farmer_id = OF.farmer_id WHERE OF.crop = 'Quinoa';"}, {"query": "## sql context :\nCREATE TABLE virtual_tours (tour_id INT, hotel_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255), duration INT); INSERT INTO virtual_tours (tour_id, hotel_name, city, country, duration) VALUES (1, 'Hotel Savoy', 'London', 'UK', 240), (2, 'Hotel Dorchester', 'London', 'UK', 300);\n\n## Query generation task:\nWhat is the maximum virtual tour engagement duration in London, UK?\n\n", "response": "SELECT MAX(duration) FROM virtual_tours WHERE city = 'London' AND country = 'UK';"}, {"query": "## sql context :\nCREATE TABLE member_workouts (workout_id INT, member_id INT, workout_date DATE); INSERT INTO member_workouts (workout_id, member_id, workout_date) VALUES (1, 1, '2022-01-01'), (2, 2, '2022-01-02'), (3, 3, '2022-01-03'), (4, 4, '2022-01-04'), (5, 5, '2022-01-05'); CREATE TABLE member_demographics (member_id INT, last_workout_date DATE); INSERT INTO member_demographics (member_id, last_workout_date) VALUES (1, '2022-01-01'), (2, '2022-01-06'), (3, '2022-01-05'), (4, '2022-01-02'), (5, '2022-01-03');\n\n## Query generation task:\nHow many workouts were completed by members in the last 7 days?\n\n", "response": "SELECT COUNT(*) FROM member_workouts WHERE workout_date >= CURDATE() - INTERVAL 7 DAY;"}, {"query": "## sql context :\nCREATE TABLE chemicals (id INT, name TEXT, production_volume INT); INSERT INTO chemicals (id, name, production_volume) VALUES (1, 'Chemical A', 500), (2, 'Chemical B', 300), (3, 'Chemical C', 700);\n\n## Query generation task:\nWhich chemicals have a production volume lower than 400?\n\n", "response": "SELECT * FROM chemicals WHERE production_volume < 400;"}, {"query": "## sql context :\nCREATE TABLE customer (customer_id INT, primary_advisor VARCHAR(255)); CREATE TABLE transaction (transaction_date DATE, customer_id INT, transaction_volume DECIMAL(10,2));\n\n## Query generation task:\nWhat is the average daily transaction volume for each customer in the past month, along with their primary investment advisor's name?\n\n", "response": "SELECT c.customer_id, c.primary_advisor, AVG(t.transaction_volume) as avg_daily_volume FROM customer c JOIN transaction t ON c.customer_id = t.customer_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY c.customer_id, c.primary_advisor;"}, {"query": "## sql context :\nSELECT p.name, c.claim_date, c.claim_amount FROM claims c JOIN policyholders p ON c.policyholder_id = p.policyholder_id WHERE c.status = 'Approved';\n\n## Query generation task:\nWrite a SQL query to retrieve the names, claim dates, and claim amounts for claims with a status of 'Approved'\n\n", "response": "SELECT p.name, c.claim_date, c.claim_amount FROM claims c JOIN policyholders p ON c.policyholder_id = p.policyholder_id WHERE c.status = 'Approved';"}, {"query": "## sql context :\nCREATE TABLE fleet ( id INT PRIMARY KEY, name VARCHAR(255), max_cargo_capacity INT );\n\n## Query generation task:\nList the vessel names and their maximum cargo capacity for the vessels in the fleet table.\n\n", "response": "SELECT name, max_cargo_capacity FROM fleet;"}, {"query": "## sql context :\nCREATE TABLE Green_Building_Materials (Material_ID INT, Material_Type VARCHAR(50), Cost FLOAT, City VARCHAR(50), Year INT); INSERT INTO Green_Building_Materials (Material_ID, Material_Type, Cost, City, Year) VALUES (1, 'Solar Panels', 2000, 'Los Angeles', 2020), (2, 'Energy-efficient Windows', 1000, 'Los Angeles', 2020);\n\n## Query generation task:\nWhat is the total cost of green building materials used in Los Angeles in 2020?\n\n", "response": "SELECT SUM(Cost) FROM Green_Building_Materials WHERE City = 'Los Angeles' AND Year = 2020 AND Material_Type IN ('Solar Panels', 'Energy-efficient Windows');"}, {"query": "## sql context :\nCREATE TABLE sales (garment VARCHAR(50), category VARCHAR(50), quantity INT, sale_date DATE); INSERT INTO sales (garment, category, quantity, sale_date) VALUES ('Shirt', 'Tops', 15, '2021-01-05'), ('Pants', 'Bottoms', 20, '2021-01-05'), ('Dress', 'Tops', 30, '2021-01-10');\n\n## Query generation task:\nDetermine the percentage of total sales for each garment, partitioned by category and ordered by percentage.\n\n", "response": "SELECT garment, category, quantity, 100.0 * quantity / SUM(quantity) OVER (PARTITION BY category) as percentage FROM sales ORDER BY percentage DESC;"}, {"query": "## sql context :\nCREATE TABLE Archaeologists (ArchaeologistID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), Specialty TEXT, Country VARCHAR(255));\n\n## Query generation task:\nCreate a table to store information about archaeologists\n\n", "response": "CREATE TABLE Archaeologists (ArchaeologistID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), Specialty TEXT, Country VARCHAR(255));"}, {"query": "## sql context :\nCREATE TABLE community_policing (id INT, event_date DATE, event_type VARCHAR(255)); INSERT INTO community_policing (id, event_date, event_type) VALUES (1, '2023-01-01', 'Meeting'), (2, '2023-01-15', 'Training');\n\n## Query generation task:\nInsert new community policing events for the last month\n\n", "response": "INSERT INTO community_policing (id, event_date, event_type) VALUES (3, CURRENT_DATE - INTERVAL '2 weeks', 'Workshop'), (4, CURRENT_DATE, 'Meeting');"}, {"query": "## sql context :\nCREATE TABLE GameData (GameID INT, GameName VARCHAR(50), Genre VARCHAR(50), AvgHoursPlayed DECIMAL(5,2)); INSERT INTO GameData (GameID, GameName, Genre, AvgHoursPlayed) VALUES (1, 'Game1', 'FPS', 12.5), (2, 'Game2', 'RPG', 10.3), (3, 'Game3', 'Sports', 15.6), (4, 'Game4', 'Simulation', 17.2);\n\n## Query generation task:\nIdentify the top 3 most played games in each country, and their respective genres, ordered by the total number of hours played.\n\n", "response": "SELECT E.EventCountry, GD.GameName, GD.Genre, SUM(GD.AvgHoursPlayed) AS TotalHoursPlayed, ROW_NUMBER() OVER (PARTITION BY E.EventCountry ORDER BY SUM(GD.AvgHoursPlayed) DESC) AS Rank FROM Players P JOIN EventParticipation EP ON P.PlayerID = EP.PlayerID JOIN EventDates E ON EP.EventID = E.EventID JOIN GameData GD ON P.PlayerID = GD.GameID GROUP BY E.EventCountry, GD.GameName, GD.Genre HAVING COUNT(DISTINCT P.PlayerID) > 1 ORDER BY E.EventCountry, TotalHoursPlayed DESC"}, {"query": "## sql context :\nCREATE TABLE Restaurants (RestaurantID int, Name varchar(50));CREATE TABLE Menus (MenuID int, RestaurantID int, MenuCategory varchar(50), TotalRevenue decimal(10,2));\n\n## Query generation task:\nWhat is the total revenue for each menu category in restaurant H for the month of July 2021?\n\n", "response": "SELECT M.MenuCategory, SUM(M.TotalRevenue) as TotalRevenuePerCategory FROM Menus M INNER JOIN Restaurants R ON M.RestaurantID = R.RestaurantID WHERE R.Name = 'H' AND MONTH(M.OrderDate) = 7 AND YEAR(M.OrderDate) = 2021 GROUP BY M.MenuCategory;"}, {"query": "## sql context :\nCREATE TABLE cases (id INT, attorney_id INT, billing_amount INT); INSERT INTO cases (id, attorney_id, billing_amount) VALUES (1, 1, 4000); CREATE TABLE attorneys (id INT, name TEXT, title TEXT); INSERT INTO attorneys (id, name, title) VALUES (1, 'Alicia Alvarez', 'Of Counsel');\n\n## Query generation task:\nWhat is the number of cases handled by attorneys with the title 'Of Counsel'?\n\n", "response": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.id WHERE attorneys.title = 'Of Counsel';"}, {"query": "## sql context :\nCREATE TABLE SoilMoistureData (moisture FLOAT, time DATETIME, crop VARCHAR(255));\n\n## Query generation task:\nWhat is the average soil moisture level for each crop type in the past month?\n\n", "response": "SELECT crop, AVG(moisture) FROM SoilMoistureData WHERE time > DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 MONTH) GROUP BY crop;"}, {"query": "## sql context :\nCREATE TABLE hotels (id INT, name TEXT, country TEXT, reviews INT); INSERT INTO hotels (id, name, country, reviews) VALUES (1, 'Hotel A', 'Africa', 120), (2, 'Hotel B', 'Africa', 80), (3, 'Hotel C', 'Europe', 150);\n\n## Query generation task:\nWhat is the maximum number of reviews for hotels in Africa?\n\n", "response": "SELECT MAX(reviews) FROM hotels WHERE country = 'Africa';"}, {"query": "## sql context :\nCREATE TABLE factories (factory_id INT, factory_name VARCHAR(50), location VARCHAR(50), fair_trade_certified BOOLEAN); INSERT INTO factories (factory_id, factory_name, location, fair_trade_certified) VALUES (1, 'Green Factory', 'Asia', true), (2, 'Eco Factory', 'US', false), (3, 'Sustainable Factory', 'Europe', true);\n\n## Query generation task:\nHow many fair trade certified factories are located in Asia?\n\n", "response": "SELECT COUNT(*) FROM factories WHERE location = 'Asia' AND fair_trade_certified = true;"}, {"query": "## sql context :\nCREATE TABLE factories_africa (factory_id INT, country VARCHAR(50), certification_1 VARCHAR(50), certification_2 VARCHAR(50), certification_3 VARCHAR(50)); INSERT INTO factories_africa (factory_id, country, certification_1, certification_2, certification_3) VALUES (1, 'Kenya', 'Fair Trade', 'SA8000', 'BSCI'), (2, 'Tanzania', 'GOTS', 'SA8000', ''), (3, 'Uganda', 'Fair Trade', '', ''), (4, 'Ethiopia', 'Fair Trade', 'SA8000', 'BSCI'), (5, 'Morocco', 'GOTS', 'SA8000', '');\n\n## Query generation task:\nWho are the top 3 countries in Africa with the highest number of fair labor practice certifications in their factories?\n\n", "response": "SELECT country, COUNT(*) as certifications_count FROM factories_africa WHERE country IN ('Kenya', 'Tanzania', 'Uganda', 'Ethiopia', 'Morocco') GROUP BY country ORDER BY certifications_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE SpaceMissions (MissionID INT, Year INT, Country VARCHAR(50), SatelliteID INT); INSERT INTO SpaceMissions (MissionID, Year, Country, SatelliteID) VALUES (1, 2010, 'USA', 101), (2, 2012, 'Russia', 201), (3, 2015, 'China', 301), (4, 2018, 'India', 401), (5, 2020, 'Japan', 501);\n\n## Query generation task:\nHow many satellites were launched in a specific year, based on the SpaceMissions table?\n\n", "response": "SELECT Year, COUNT(SatelliteID) AS TotalSatellites FROM SpaceMissions WHERE Year = 2015 GROUP BY Year;"}, {"query": "## sql context :\nCREATE TABLE RiskAssessments (AssessmentID INT, AssessmentName VARCHAR(50), AssessmentDate DATE, Region VARCHAR(50), RiskLevel VARCHAR(50)); INSERT INTO RiskAssessments (AssessmentID, AssessmentName, AssessmentDate, Region, RiskLevel) VALUES (1, 'Assessment 1', '2022-02-15', 'Middle East', 'High'), (2, 'Assessment 2', '2022-03-30', 'Africa', 'Medium'), (3, 'Assessment 3', '2022-07-15', 'Middle East', 'Medium'), (4, 'Assessment 4', '2022-10-01', 'Americas', 'Low');\n\n## Query generation task:\nWhat are the geopolitical risk assessments for the Middle East in the last 6 months?\n\n", "response": "SELECT AssessmentName, Region, RiskLevel FROM RiskAssessments WHERE Region = 'Middle East' AND AssessmentDate >= DATEADD(month, -6, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE marine_protected_areas (location TEXT, area_size FLOAT); INSERT INTO marine_protected_areas (location, area_size) VALUES ('Southern Hemisphere', 5678900), ('Northern Hemisphere', 3456000);\n\n## Query generation task:\nWhat is the total area of all marine protected areas in the Southern Hemisphere?\n\n", "response": "SELECT SUM(area_size) FROM marine_protected_areas WHERE location = 'Southern Hemisphere';"}, {"query": "## sql context :\nCREATE TABLE MilitaryBases (id INT, name VARCHAR(255), location VARCHAR(255), country VARCHAR(255)); INSERT INTO MilitaryBases (id, name, location, country) VALUES (1, 'Fort Bragg', 'Fayetteville, NC', 'USA'), (2, 'Camp Pendleton', 'Oceanside, CA', 'USA'), (3, 'CFB Petawawa', 'Petawawa, ON', 'Canada');\n\n## Query generation task:\nWhat is the total number of military bases and their locations in the United States and Canada?\n\n", "response": "SELECT SUM(CASE WHEN country IN ('USA', 'Canada') THEN 1 ELSE 0 END) as total_bases, STRING_AGG(location, ', ') as base_locations FROM MilitaryBases WHERE country IN ('USA', 'Canada');"}, {"query": "## sql context :\nCREATE TABLE students (student_id INT, district VARCHAR(20), participated_in_llp BOOLEAN, year INT); INSERT INTO students (student_id, district, participated_in_llp, year) VALUES (1, 'Hillside', TRUE, 2021), (2, 'Hillside', FALSE, 2021), (3, 'Townside', TRUE, 2021);\n\n## Query generation task:\nWhat is the percentage of students in the \"Hillside\" school district who did not participate in lifelong learning programs last year?\n\n", "response": "SELECT (COUNT(*) FILTER (WHERE NOT participated_in_llp)) * 100.0 / COUNT(*) FROM students WHERE district = 'Hillside' AND year = 2021;"}, {"query": "## sql context :\nCREATE TABLE Users (ID INT PRIMARY KEY, Name VARCHAR(50), RestingHeartRate INT);   CREATE TABLE Workouts (ID INT PRIMARY KEY, UserID INT, HeartRate INT, Duration DECIMAL(10,2), Date DATE);\n\n## Query generation task:\nWhat is the average heart rate recorded for each user during their workouts in the past month, and how does this compare to their resting heart rate?\n\n", "response": "SELECT Users.Name, AVG(Workouts.HeartRate) AS AvgWorkoutHeartRate, Users.RestingHeartRate FROM Users JOIN Workouts ON Users.ID = Workouts.UserID WHERE Workouts.Date >= DATEADD(month, -1, GETDATE()) GROUP BY Users.Name, Users.RestingHeartRate;"}, {"query": "## sql context :\nCREATE TABLE customers (customer_id INT, name VARCHAR(50), region VARCHAR(20), account_balance DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the average account balance for customers in the Southeast region?\n\n", "response": "SELECT AVG(account_balance) FROM customers WHERE region = 'Southeast';"}, {"query": "## sql context :\nCREATE TABLE policies (id INT, policyholder_id INT, issue_date DATE); INSERT INTO policies (id, policyholder_id, issue_date) VALUES (1, 1, '2021-05-15'); CREATE TABLE policyholders (id INT, address TEXT, dob DATE); INSERT INTO policyholders (id, address, dob) VALUES (1, '456 Oak St, New York, NY 10001', '1990-05-01'); CREATE TABLE zipcodes (zipcode INT, city TEXT, area_type TEXT); INSERT INTO zipcodes (zipcode, city, area_type) VALUES (10001, 'New York', 'Urban');\n\n## Query generation task:\nWhat is the percentage of policies issued in 'Q2 2021' to policyholders residing in rural areas?\n\n", "response": "SELECT (COUNT(policies.id) * 100.0 / (SELECT COUNT(*) FROM policies WHERE issue_date BETWEEN '2021-04-01' AND '2021-06-30')) FROM policies JOIN policyholders ON policies.policyholder_id = policyholders.id JOIN zipcodes ON SUBSTRING(policyholders.address FROM 14 FOR 5) = zipcodes.zipcode WHERE zipcodes.area_type = 'Rural' AND policies.issue_date BETWEEN '2021-04-01' AND '2021-06-30';"}, {"query": "## sql context :\nCREATE TABLE item_prices (item_name VARCHAR(255), material VARCHAR(255), price DECIMAL(10,2)); INSERT INTO item_prices (item_name, material, price) VALUES ('T-Shirt', 'Organic Cotton', 25.00), ('Shirt', 'Organic Cotton', 30.00), ('Pants', 'Organic Cotton', 35.00), ('T-Shirt', 'Hemp', 28.00), ('Shirt', 'Hemp', 33.00), ('Pants', 'Hemp', 38.00);\n\n## Query generation task:\nWhat is the average price of items made from hemp?\n\n", "response": "SELECT AVG(price) FROM item_prices WHERE material = 'Hemp';"}, {"query": "## sql context :\nCREATE TABLE Visitors (id INT, city VARCHAR(50), repeat_visitor BOOLEAN, exhibition_type VARCHAR(50)); INSERT INTO Visitors (id, city, repeat_visitor, exhibition_type) VALUES (1, 'Beijing', TRUE, 'permanent');\n\n## Query generation task:\nCount the number of visitors that attended permanent exhibitions in Beijing and were repeat visitors.\n\n", "response": "SELECT COUNT(*) FROM Visitors WHERE city = 'Beijing' AND repeat_visitor = TRUE AND exhibition_type = 'permanent';"}, {"query": "## sql context :\nCREATE TABLE australian_states (id INT, state TEXT); INSERT INTO australian_states (id, state) VALUES (1, 'Queensland'), (2, 'New South Wales'), (3, 'Western Australia'), (4, 'South Australia'), (5, 'Victoria'); CREATE TABLE mines (id INT, state TEXT, ei_category TEXT, ei_value FLOAT); INSERT INTO mines (id, state, ei_category, ei_value) VALUES (1, 'Queensland', 'Air pollution', 12.5), (2, 'New South Wales', 'Water pollution', 15.0), (3, 'Western Australia', 'Soil contamination', 18.0), (4, 'South Australia', 'Noise pollution', 10.0), (5, 'Victoria', 'Hazardous waste', 20.0);\n\n## Query generation task:\nIdentify the top 5 mining states in Australia with the highest environmental impact scores, and show the associated environmental impact categories and values.\n\n", "response": "SELECT a.state, m.ei_category, AVG(m.ei_value) AS avg_ei_value FROM australian_states a JOIN mines m ON a.state = m.state GROUP BY a.state, m.ei_category ORDER BY avg_ei_value DESC LIMIT 5;"}, {"query": "## sql context :\nCREATE TABLE company (id INT, name TEXT, founding_date DATE, founder_identity TEXT); CREATE TABLE exit_strategy (id INT, company_id INT, exit_date DATE);\n\n## Query generation task:\nWhat is the average time to exit for companies founded by individuals who identify as LGBTQ+?\n\n", "response": "SELECT AVG(DATEDIFF(exit_strategy.exit_date, company.founding_date)) FROM company JOIN exit_strategy ON company.id = exit_strategy.company_id WHERE company.founder_identity = 'LGBTQ+';"}, {"query": "## sql context :\nCREATE TABLE arctic_research (project_name VARCHAR(100), budget DECIMAL(10,2));\n\n## Query generation task:\nWhat is the total number of research projects in the 'arctic_research' table, with a budget greater than $100,000?\n\n", "response": "SELECT COUNT(*) FROM arctic_research WHERE budget > 100000;"}, {"query": "## sql context :\nCREATE TABLE Ytterbium_Supply (id INT, year INT, supplier_id INT, supply_volume INT);\n\n## Query generation task:\nHow many suppliers provided Ytterbium to South Korea in 2021?\n\n", "response": "SELECT COUNT(DISTINCT supplier_id) FROM Ytterbium_Supply WHERE country = 'South Korea' AND year = 2021;"}, {"query": "## sql context :\nCREATE TABLE phishing_attempts (id INT, ip_address VARCHAR(15), region VARCHAR(100), attack_date DATE); INSERT INTO phishing_attempts (id, ip_address, region, attack_date) VALUES (1, '192.168.1.1', 'Africa', '2021-11-01'), (2, '10.0.0.1', 'Europe', '2021-12-05'), (3, '192.168.1.1', 'Africa', '2021-12-12');\n\n## Query generation task:\nDelete all records of phishing attempts originating from the 'Africa' region in the past week.\n\n", "response": "DELETE FROM phishing_attempts WHERE region = 'Africa' AND attack_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK);"}, {"query": "## sql context :\nCREATE TABLE digital_assets (id INT, name VARCHAR(255), type VARCHAR(255)); INSERT INTO digital_assets (id, name, type) VALUES (1, 'Asset 1', 'Type A'), (2, 'Asset 2', 'Type B'), (3, 'Asset 3', 'Type A');\n\n## Query generation task:\nWhat's the total number of digital assets by type?\n\n", "response": "SELECT type, COUNT(*) FROM digital_assets GROUP BY type;"}, {"query": "## sql context :\nCREATE TABLE climate_finance (country VARCHAR(50), year INT, amount INT, sector VARCHAR(50)); INSERT INTO climate_finance (country, year, amount, sector) VALUES ('USA', 2020, 5000000, 'Mitigation'), ('Canada', 2020, 6000000, 'Adaptation');\n\n## Query generation task:\nWhat is the count of climate finance records for each sector in North America?\n\n", "response": "SELECT sector, COUNT(*) FROM climate_finance WHERE location IN ('North America') GROUP BY sector;"}, {"query": "## sql context :\nCREATE TABLE port (port_id INT, name TEXT, created_at DATETIME);CREATE TABLE crane (crane_id INT, port_id INT, name TEXT);CREATE TABLE container (container_id INT, crane_id INT, weight INT, created_at DATETIME);INSERT INTO port VALUES (6, 'Dubai', '2022-01-01');\n\n## Query generation task:\nWhat is the maximum weight of containers handled per day by a single crane in 'Dubai'?\n\n", "response": "SELECT crane.name, MAX(container.weight) FROM crane JOIN port ON crane.port_id = port.port_id JOIN container ON crane.crane_id = container.crane_id WHERE port.name = 'Dubai' GROUP BY crane.name, DATE(container.created_at);"}, {"query": "## sql context :\nCREATE TABLE landfill_capacity (country VARCHAR(50), region VARCHAR(50), landfill_capacity FLOAT, year INT); INSERT INTO landfill_capacity (country, region, landfill_capacity, year) VALUES ('India', 'South Asia', 11.2, 2018), ('Pakistan', 'South Asia', 7.8, 2018), ('Bangladesh', 'South Asia', 5.3, 2018);\n\n## Query generation task:\nWhat was the maximum landfill capacity in South Asia in 2018?'\n\n", "response": "SELECT MAX(landfill_capacity) FROM landfill_capacity WHERE region = 'South Asia' AND year = 2018;"}, {"query": "## sql context :\nCREATE TABLE CommunityEngagementMetrics (EventID INT, EventType VARCHAR(50), TotalAttendees INT, AverageDuration FLOAT);\n\n## Query generation task:\nDelete all records from the CommunityEngagementMetrics table where the EventType is 'Panel Discussion'.\n\n", "response": "DELETE FROM CommunityEngagementMetrics WHERE EventType = 'Panel Discussion';"}, {"query": "## sql context :\nCREATE TABLE PolicyImpact (CityName VARCHAR(50), Policy VARCHAR(50), Impact INT); INSERT INTO PolicyImpact (CityName, Policy, Impact) VALUES ('CityA', 'Waste Management', 7), ('CityA', 'Transportation', 8), ('CityB', 'Waste Management', 9), ('CityB', 'Transportation', 6), ('CityC', 'Waste Management', 10), ('CityC', 'Transportation', 5);\n\n## Query generation task:\nWhich policy had the highest impact in CityA and CityC?\n\n", "response": "SELECT CityName, Policy, MAX(Impact) FROM PolicyImpact GROUP BY CityName HAVING COUNT(DISTINCT Policy) = 2;"}, {"query": "## sql context :\nCREATE TABLE sector (id INT, name TEXT, location TEXT); INSERT INTO sector (id, name, location) VALUES (1, 'Sector A', 'Downtown'), (2, 'Sector B', 'Uptown'); CREATE TABLE incidents (id INT, sector_id INT, type TEXT, timestamp DATETIME); INSERT INTO incidents (id, sector_id, type, timestamp) VALUES (1, 1, 'Theft', '2022-01-01 10:00:00');\n\n## Query generation task:\nList all community policing sectors that have no crime incidents reported in the last month.\n\n", "response": "SELECT sector.name FROM sector LEFT JOIN incidents ON sector.id = incidents.sector_id WHERE incidents.timestamp < DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) IS NULL;"}, {"query": "## sql context :\nCREATE TABLE ArtSales (GalleryName TEXT, SaleDate DATE, NumPieces INTEGER); INSERT INTO ArtSales (GalleryName, SaleDate, NumPieces) VALUES ('Metropolitan Art Gallery', '2021-01-01', 12), ('Metropolitan Art Gallery', '2021-02-15', 15), ('Metropolitan Art Gallery', '2021-04-20', 18);\n\n## Query generation task:\nHow many art pieces were sold at the \"Metropolitan Art Gallery\" in 2021?\n\n", "response": "SELECT SUM(NumPieces) FROM ArtSales WHERE GalleryName = 'Metropolitan Art Gallery' AND YEAR(SaleDate) = 2021;"}, {"query": "## sql context :\nCREATE TABLE ProjectTimeline (ProjectID int, Region varchar(20), Year int, OnTime bit); INSERT INTO ProjectTimeline (ProjectID, Region, Year, OnTime) VALUES (1, 'Central', 2021, 1), (2, 'Northeast', 2021, 0), (3, 'Central', 2021, 1);\n\n## Query generation task:\nCalculate the percentage of projects that are on time, in the Central region, for the year 2021.\n\n", "response": "SELECT Region, PERCENTAGE(SUM(OnTime) OVER (PARTITION BY Region) / COUNT(*) OVER (PARTITION BY Region)) as PercentageOnTime FROM ProjectTimeline WHERE Region = 'Central' AND Year = 2021;"}, {"query": "## sql context :\nCREATE TABLE Menu (menu_item VARCHAR(50), cuisine VARCHAR(20), type VARCHAR(20), price DECIMAL(5,2)); INSERT INTO Menu (menu_item, cuisine, type, price) VALUES ('Vegan Pizza', 'Italian', 'Vegan', 12.99), ('Eggplant Parmesan', 'Italian', 'Vegetarian', 13.99), ('Spaghetti Bolognese', 'Italian', 'Non-vegetarian', 14.99), ('Tofu Alfredo', 'Italian', 'Vegan', 15.99);\n\n## Query generation task:\nWhat is the average price of vegan dishes in the Italian cuisine category?\n\n", "response": "SELECT AVG(price) FROM Menu WHERE cuisine = 'Italian' AND type = 'Vegan';"}, {"query": "## sql context :\nCREATE TABLE product (product_id INT, name VARCHAR(255), quantity INT, material VARCHAR(255)); INSERT INTO product (product_id, name, quantity, material) VALUES (1, 'Organic Cotton T-Shirt', 30, 'organic cotton'), (2, 'Polyester Hoodie', 20, 'polyester'), (3, 'Bamboo Socks', 50, 'bamboo');\n\n## Query generation task:\nList the total quantity of products for each material category.\n\n", "response": "SELECT material, SUM(quantity) FROM product GROUP BY material;"}, {"query": "## sql context :\nCREATE TABLE Volunteers (id INT, volunteer_id INT, age INT, hours INT, program TEXT); INSERT INTO Volunteers (id, volunteer_id, age, hours, program) VALUES (1, 1, 16, 20, 'Education');\n\n## Query generation task:\nWhat is the average number of hours volunteered by teenagers?\n\n", "response": "SELECT AVG(hours) as avg_hours FROM Volunteers WHERE age BETWEEN 13 AND 19;"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(50), LastName VARCHAR(50), Position VARCHAR(50), Department VARCHAR(50)); INSERT INTO Employees (EmployeeID, FirstName, LastName, Position, Department) VALUES (1, 'Jane', 'Doe', 'Avionics Engineer', 'Avionics');\n\n## Query generation task:\nDisplay the names and positions of all engineers in the Avionics department.\n\n", "response": "SELECT EmployeeID, FirstName, LastName, (CASE WHEN Position = 'Avionics Engineer' THEN 'Senior Avionics Engineer' ELSE Position END) AS NewPosition, Department FROM Employees WHERE Department = 'Avionics';"}, {"query": "## sql context :\nCREATE TABLE mexico_regions (id INT, name VARCHAR(255)); CREATE TABLE flu_vaccinations (id INT, region_id INT, month INT, vaccinations INT); INSERT INTO mexico_regions (id, name) VALUES (1, 'North'), (2, 'Central'), (3, 'South'), (4, 'Gulf Coast'), (5, 'Baja California');\n\n## Query generation task:\nWhat is the average number of flu vaccinations administered per month in each region of Mexico?\n\n", "response": "SELECT r.name, AVG(fv.vaccinations) FROM flu_vaccinations fv JOIN mexico_regions r ON fv.region_id = r.id GROUP BY r.name;"}, {"query": "## sql context :\nCREATE TABLE Concerts (id INT, state VARCHAR(20), price FLOAT, tickets_sold INT); INSERT INTO Concerts (id, state, price, tickets_sold) VALUES (1, 'California', 100.0, 200), (2, 'California', 120.0, 150);\n\n## Query generation task:\nWhat was the average ticket price for a concert in California?\n\n", "response": "SELECT AVG(price) FROM Concerts WHERE state = 'California';"}, {"query": "## sql context :\nCREATE TABLE carbon_offset_initiatives ( id INT PRIMARY KEY, project_name VARCHAR(255), total_offset INT, state VARCHAR(255) );\n\n## Query generation task:\nWhat is the minimum total offset of any carbon offset initiative project in the state of California?\n\n", "response": "SELECT MIN(total_offset) FROM carbon_offset_initiatives WHERE state = 'California';"}, {"query": "## sql context :\nCREATE TABLE City (id INT, name VARCHAR(50), population INT, population_density INT); INSERT INTO City (id, name, population, population_density) VALUES (1, 'CityA', 50000, 6000); INSERT INTO City (id, name, population, population_density) VALUES (2, 'CityB', 75000, 4000); INSERT INTO City (id, name, population, population_density) VALUES (3, 'CityC', 65000, 5500);\n\n## Query generation task:\nWhat is the total population of cities with a population density greater than 5000?\n\n", "response": "SELECT SUM(population) FROM City WHERE population_density > 5000;"}, {"query": "## sql context :\nCREATE TABLE Menu (Restaurant VARCHAR(255), Item VARCHAR(255), Vegan BOOLEAN); INSERT INTO Menu (Restaurant, Item, Vegan) VALUES ('Sushi S', 'Salmon Roll', FALSE), ('Sushi S', 'Vegetable Roll', TRUE), ('Sushi S', 'Tuna Roll', FALSE), ('Sushi S', 'Avocado Roll', TRUE);\n\n## Query generation task:\nHow many vegetarian options are available in 'Sushi S'?\n\n", "response": "SELECT COUNT(*) FROM Menu WHERE Restaurant = 'Sushi S' AND Vegan = TRUE;"}, {"query": "## sql context :\nCREATE TABLE public.police_calls (id SERIAL PRIMARY KEY, city VARCHAR(255), response_time INTEGER); INSERT INTO public.police_calls (city, response_time) VALUES ('Los Angeles', 120), ('Los Angeles', 150), ('Los Angeles', 90);\n\n## Query generation task:\nWhat is the average response time for police calls in the city of Los Angeles?\n\n", "response": "SELECT AVG(response_time) FROM public.police_calls WHERE city = 'Los Angeles';"}, {"query": "## sql context :\nCREATE TABLE PolicyAdvocacyEvents (EventID INT, EventName VARCHAR(50), Cost DECIMAL(5,2), EventDate DATE); INSERT INTO PolicyAdvocacyEvents VALUES (1, 'Accessible Education Rally', 5000.00, '2020-02-29'), (2, 'Inclusive Hiring Summit', 8000.00, '2020-11-15'), (3, 'Disability Discrimination Conference', 10000.00, '2020-07-04'), (4, 'Policy Advocacy Kickoff', 3000.00, '2020-01-01');\n\n## Query generation task:\nWhat is the minimum and maximum cost of policy advocacy events in 2020?\n\n", "response": "SELECT MIN(Cost) AS 'Minimum Cost', MAX(Cost) AS 'Maximum Cost' FROM PolicyAdvocacyEvents WHERE YEAR(EventDate) = 2020;"}, {"query": "## sql context :\nCREATE TABLE spending (id INT, department VARCHAR(50), year INT, amount FLOAT); INSERT INTO spending (id, department, year, amount) VALUES (1, 'Education', 2021, 1000000), (2, 'Education', 2021, 2000000), (3, 'Transportation', 2021, 1500000);\n\n## Query generation task:\nWhat is the total amount of government spending on education by state in 2021?\n\n", "response": "SELECT department, state, SUM(amount) as total_spending FROM spending WHERE year = 2021 AND department = 'Education' GROUP BY department, state;"}, {"query": "## sql context :\nCREATE TABLE districts (district_id INT, district_name TEXT); INSERT INTO districts (district_id, district_name) VALUES (1, 'Downtown'), (2, 'Uptown'), (3, 'Suburbs'); CREATE TABLE students (student_id INT, student_name TEXT, district_id INT, mental_health_score INT); INSERT INTO students (student_id, student_name, district_id, mental_health_score) VALUES (1, 'John Doe', 1, 75), (2, 'Jane Smith', 2, 80), (3, 'Alice Johnson', 3, 85), (4, 'Bob Brown', 2, 90), (5, 'Charlie Davis', 1, 95), (6, 'Eva White', 3, 70);\n\n## Query generation task:\nWhat is the average mental health score of students in each district, ordered by average score?\n\n", "response": "SELECT d.district_name, AVG(s.mental_health_score) as avg_score FROM students s JOIN districts d ON s.district_id = d.district_id GROUP BY s.district_id ORDER BY avg_score DESC;"}, {"query": "## sql context :\nCREATE TABLE marathons (location TEXT, country TEXT, running_time FLOAT);\n\n## Query generation task:\nFind the top 3 fastest marathon times in Germany.\n\n", "response": "SELECT location, running_time FROM marathons WHERE country = 'Germany' ORDER BY running_time ASC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE train_lines (line_id INT, line_name VARCHAR(255), stations INT); INSERT INTO train_lines (line_id, line_name, stations) VALUES (1, 'Red Line', 15), (2, 'Blue Line', 12), (3, 'Green Line', 18), (4, 'Orange Line', 10);\n\n## Query generation task:\nWhich train lines have the highest and lowest number of stations?\n\n", "response": "SELECT line_name, stations AS highest_stations FROM train_lines ORDER BY stations DESC LIMIT 1; SELECT line_name, stations AS lowest_stations FROM train_lines ORDER BY stations ASC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE treatment (patient_id INT, treatment_name VARCHAR(50), treatment_center VARCHAR(50)); INSERT INTO treatment (patient_id, treatment_name, treatment_center) VALUES (1, 'Cognitive Behavioral Therapy', 'clinic_b');\n\n## Query generation task:\nHow many patients were treated with cognitive behavioral therapy (CBT) in 'clinic_b'?\n\n", "response": "SELECT COUNT(*) FROM treatment WHERE treatment_name = 'Cognitive Behavioral Therapy' AND treatment_center = 'clinic_b';"}, {"query": "## sql context :\nCREATE TABLE SmartCityInitiatives (InitiativeID INT, InitiativeName VARCHAR(50));CREATE TABLE SmartCityCosts (CostID INT, InitiativeID INT, Cost FLOAT);CREATE TABLE SmartCitySavings (SavingsID INT, InitiativeID INT, Savings FLOAT);\n\n## Query generation task:\nShow the total cost and total savings for each smart city initiative.\n\n", "response": "SELECT SmartCityInitiatives.InitiativeName, SUM(SmartCityCosts.Cost) AS TotalCost, SUM(SmartCitySavings.Savings) AS TotalSavings FROM SmartCityInitiatives INNER JOIN SmartCityCosts ON SmartCityInitiatives.InitiativeID = SmartCityCosts.InitiativeID INNER JOIN SmartCitySavings ON SmartCityInitiatives.InitiativeID = SmartCitySavings.InitiativeID GROUP BY SmartCityInitiatives.InitiativeName;"}, {"query": "## sql context :\nCREATE TABLE cultural_tourists (id INT, name VARCHAR(50), nationality VARCHAR(50), destination VARCHAR(50)); INSERT INTO cultural_tourists (id, name, nationality, destination) VALUES (1, 'Jane Doe', 'USA', 'Paris'), (2, 'Jim Brown', 'USA', 'Rome'), (3, 'Jake White', 'USA', 'Tokyo');\n\n## Query generation task:\nList the top 3 destinations for US tourists interested in cultural tourism?\n\n", "response": "SELECT destination, COUNT(*) as tourist_count FROM cultural_tourists WHERE nationality = 'USA' GROUP BY destination ORDER BY tourist_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE workers (id INT, name VARCHAR(50), industry VARCHAR(50), salary FLOAT, country VARCHAR(50)); INSERT INTO workers (id, name, industry, salary, country) VALUES (1, 'John Doe', 'oil', 60000, 'Canada'); INSERT INTO workers (id, name, industry, salary, country) VALUES (2, 'Jane Smith', 'gas', 65000, 'Canada'); INSERT INTO workers (id, name, industry, salary, country) VALUES (3, 'Mike Johnson', 'gas', 70000, 'Canada'); INSERT INTO workers (id, name, industry, salary, country) VALUES (4, 'Peter Lee', 'oil', 80000, 'Canada');\n\n## Query generation task:\nDelete the record of 'John Doe' from the 'workers' table.\n\n", "response": "DELETE FROM workers WHERE name = 'John Doe';"}, {"query": "## sql context :\nCREATE TABLE farmland (farmland_id INT, country VARCHAR(255), precision_agriculture BOOLEAN); INSERT INTO farmland (farmland_id, country, precision_agriculture) VALUES (1, 'France', TRUE), (2, 'Germany', FALSE), (3, 'China', TRUE), (4, 'Japan', TRUE);\n\n## Query generation task:\nInsert a new record into the farmland table for a farmland in Brazil with a precision agriculture value of true\n\n", "response": "INSERT INTO farmland (farmland_id, country, precision_agriculture) VALUES (5, 'Brazil', TRUE);"}, {"query": "## sql context :\nCREATE TABLE participation (id INT, country TEXT, region TEXT, event_count INT); INSERT INTO participation (id, country, region, event_count) VALUES (1, 'Canada', 'American', 5), (2, 'Mexico', 'American', 8), (3, 'Brazil', 'American', 10), (4, 'Argentina', 'American', 12);\n\n## Query generation task:\nWhat is the average number of public participation events per country in the American region?\n\n", "response": "SELECT AVG(event_count) FROM participation WHERE region = 'American';"}, {"query": "## sql context :\nCREATE TABLE Members (ID INT); CREATE TABLE Yoga (MemberID INT); CREATE TABLE Cycling (MemberID INT); INSERT INTO Members (ID) VALUES (1), (2); INSERT INTO Yoga (MemberID) VALUES (1), (2); INSERT INTO Cycling (MemberID) VALUES (1), (2);\n\n## Query generation task:\nFind the number of members who do both yoga and cycling.\n\n", "response": "SELECT COUNT(*) FROM Members WHERE ID IN (SELECT MemberID FROM Yoga INTERSECT SELECT MemberID FROM Cycling);"}, {"query": "## sql context :\nCREATE TABLE manufacturer_sales (id INT, manufacturer VARCHAR(50), vehicle_type VARCHAR(20), sale_year INT, quantity INT); INSERT INTO manufacturer_sales (id, manufacturer, vehicle_type, sale_year, quantity) VALUES (1, 'Tesla', 'EV', 2021, 30000), (2, 'Tesla', 'EV', 2022, 50000), (3, 'Toyota', 'Hybrid', 2021, 20000), (4, 'Toyota', 'Hybrid', 2022, 25000), (5, 'Ford', 'EV', 2022, 10000);\n\n## Query generation task:\nList the number of electric vehicles sold by each manufacturer\n\n", "response": "SELECT manufacturer, SUM(quantity) FROM manufacturer_sales WHERE vehicle_type = 'EV' GROUP BY manufacturer;"}, {"query": "## sql context :\nCREATE TABLE landfill_capacity ( country VARCHAR(50), year INT, capacity INT);\n\n## Query generation task:\nShow landfill capacity for India for the year 2022\n\n", "response": "SELECT capacity FROM landfill_capacity WHERE country = 'India' AND year = 2022;"}, {"query": "## sql context :\nCREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationAmount DECIMAL); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationAmount) VALUES (1, 1, '2021-07-01', 500.00), (2, 2, '2021-07-15', 250.00), (3, 3, '2021-06-01', 1000.00);\n\n## Query generation task:\nWhat is the maximum donation amount received in the month of July?\n\n", "response": "SELECT MAX(DonationAmount) FROM Donations WHERE MONTH(DonationDate) = 7;"}, {"query": "## sql context :\nCREATE TABLE impact_investments (id INT PRIMARY KEY, name VARCHAR(100), amount INT, sector VARCHAR(20));\n\n## Query generation task:\nUpdate the amount of impact_investment with id 1 to 1000000\n\n", "response": "UPDATE impact_investments SET amount = 1000000 WHERE id = 1;"}, {"query": "## sql context :\nCREATE TABLE shipments (shipment_id INT, shipment_date DATE, shipping_mode VARCHAR(20)); INSERT INTO shipments (shipment_id, shipment_date, shipping_mode) VALUES (1, '2021-01-01', 'Air'), (2, '2021-02-05', 'Ocean'), (3, '2021-03-03', 'Rail'), (4, '2021-01-10', 'Air'), (5, '2021-12-31', 'Air');\n\n## Query generation task:\nWhich were the top 3 most frequently used shipping modes in the year 2021?\n\n", "response": "SELECT shipping_mode, COUNT(shipping_mode) AS count FROM shipments WHERE shipment_date BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY shipping_mode ORDER BY count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE farm_soil_moisture (farm_id INT, timestamp TIMESTAMP, soil_moisture INT);\n\n## Query generation task:\nIdentify the top three farms with the highest average soil moisture for the past year.\n\n", "response": "SELECT farm_id, AVG(soil_moisture) AS avg_moisture FROM farm_soil_moisture WHERE timestamp >= NOW() - INTERVAL '1 year' GROUP BY farm_id ORDER BY avg_moisture DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE Workouts (WorkoutID INT, MemberID INT, WorkoutDate DATE, Duration INT); INSERT INTO Workouts (WorkoutID, MemberID, WorkoutDate, Duration) VALUES (1, 2, '2020-01-01', 60), (2, 2, '2020-02-01', 75);\n\n## Query generation task:\nWhat is the total duration of workouts for member 2 in 2020?\n\n", "response": "SELECT SUM(Duration) FROM Workouts WHERE MemberID = 2 AND YEAR(WorkoutDate) = 2020;"}, {"query": "## sql context :\nCREATE TABLE climate_adaptation (year INT, region VARCHAR(50), project VARCHAR(50), cost FLOAT); INSERT INTO climate_adaptation (year, region, project, cost) VALUES (2017, 'Southeast Asia', 'Adaptation Project 1', 150000);\n\n## Query generation task:\nWhich climate adaptation projects were completed in Southeast Asia in 2017 and what was their combined cost?\n\n", "response": "SELECT region, SUM(cost) FROM climate_adaptation WHERE year = 2017 AND region = 'Southeast Asia' GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE ArtPieces (id INT, title VARCHAR(50), galleryId INT, year INT, value INT); INSERT INTO ArtPieces (id, title, galleryId, year, value) VALUES (1, 'Piece 1', 1, 2000, 10000), (2, 'Piece 2', 1, 2010, 15000), (3, 'Piece 3', 2, 2020, 20000), (4, 'Piece 4', 3, 1990, 5000), (5, 'Piece 5', NULL, 1874, 25000);\n\n## Query generation task:\nWhat is the total value of impressionist art pieces?\n\n", "response": "SELECT SUM(value) FROM ArtPieces WHERE style = 'Impressionism';"}, {"query": "## sql context :\nCREATE TABLE Warehouse (id INT, location VARCHAR(255), capacity INT); INSERT INTO Warehouse (id, location, capacity) VALUES (1, 'New York', 500), (2, 'Toronto', 700), (3, 'Montreal', 600); CREATE TABLE Shipment (id INT, warehouse_id INT, delivery_time INT); INSERT INTO Shipment (id, warehouse_id, delivery_time) VALUES (1, 1, 5), (2, 2, 3), (3, 3, 4), (4, 1, 6), (5, 2, 7), (6, 3, 8), (7, 1, 9);\n\n## Query generation task:\nWhat is the difference in delivery time between the first and last shipments for each warehouse?\n\n", "response": "SELECT warehouse_id, MAX(delivery_time) - MIN(delivery_time) FROM Shipment GROUP BY warehouse_id;"}, {"query": "## sql context :\nCREATE TABLE green_building_projects (project_id INT, project_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); INSERT INTO green_building_projects (project_id, project_name, city, country) VALUES (1, 'Toronto Green Tower', 'Toronto', 'CA'); INSERT INTO green_building_projects (project_id, project_name, city, country) VALUES (2, 'Canadian Eco-Skyscraper', 'Toronto', 'CA');\n\n## Query generation task:\nWhat are the names of all green building projects in the city of Toronto?\n\n", "response": "SELECT project_name FROM green_building_projects WHERE city = 'Toronto';"}, {"query": "## sql context :\nCREATE TABLE Travel_Advisory (id INT PRIMARY KEY, country VARCHAR(50), region VARCHAR(50), advisory_level INT, description TEXT);CREATE TABLE Traveler (id INT PRIMARY KEY, traveler_id INT, nationality VARCHAR(50), age INT);CREATE VIEW High_Risk_Travel_Advisories AS SELECT Travel_Advisory.country, COUNT(Travel_Advisory.id) AS advisory_count FROM Travel_Advisory WHERE Travel_Advisory.advisory_level >= 3 GROUP BY Travel_Advisory.country ORDER BY advisory_count DESC;\n\n## Query generation task:\nHow many high-risk travel advisories have been issued for Canada?\n\n", "response": "SELECT * FROM High_Risk_Travel_Advisories WHERE country = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE member_workouts (workout_id INT, member_id INT, workout_date DATE, heart_rate INT); INSERT INTO member_workouts (workout_id, member_id, workout_date, heart_rate) VALUES (1, 1, '2022-01-01', 120), (2, 2, '2022-01-02', 110), (3, 3, '2022-01-03', 130), (4, 4, '2022-01-04', 105), (5, 5, '2022-01-05', 140);\n\n## Query generation task:\nWhat is the minimum heart rate recorded in the last 30 days?\n\n", "response": "SELECT MIN(heart_rate) FROM member_workouts WHERE workout_date >= CURDATE() - INTERVAL 30 DAY;"}, {"query": "## sql context :\nCREATE TABLE products (product_id INT, product_name TEXT, category TEXT, is_organic BOOLEAN); INSERT INTO products (product_id, product_name, category, is_organic) VALUES (1, 'Nourishing Cream', 'skincare', true), (2, 'Revitalizing Serum', 'skincare', false), (3, 'Gentle Cleanser', 'skincare', true), (4, 'Volumizing Mascara', 'makeup', false); CREATE TABLE sales (sale_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 500, 'FR'), (2, 2, 600, 'US'), (3, 3, 700, 'DE'), (4, 1, 400, 'UK'), (5, 4, 800, 'CA');\n\n## Query generation task:\nWhat are the total sales of organic skincare products in France and Germany?\n\n", "response": "SELECT SUM(s.sale_quantity) as total_sales_of_organic_skincare FROM sales s JOIN products p ON s.product_id = p.product_id WHERE p.category = 'skincare' AND p.is_organic = true AND s.sale_country IN ('FR', 'DE');"}, {"query": "## sql context :\nCREATE TABLE models (model_id INT, model_name VARCHAR(50), model_type VARCHAR(50), country VARCHAR(50), safety_score DECIMAL(5,2)); INSERT INTO models (model_id, model_name, model_type, country, safety_score) VALUES (1, 'ModelA', 'Recommender', 'Australia', 85.00), (2, 'ModelB', 'Classifier', 'Japan', 92.50), (3, 'ModelC', 'Generative', 'USA', 87.50), (4, 'ModelD', 'Recommender', 'Japan', 90.00), (5, 'ModelE', 'Classifier', 'USA', 88.50), (6, 'ModelF', 'Recommender', 'New Zealand', 91.00);\n\n## Query generation task:\nDelete all records from the models table for models developed in Australia and New Zealand.\n\n", "response": "DELETE FROM models WHERE country IN ('Australia', 'New Zealand');"}, {"query": "## sql context :\nCREATE TABLE companies (id INT, name TEXT, industry TEXT, founding_date DATE, funding_amount INT); INSERT INTO companies (id, name, industry, founding_date, funding_amount) VALUES (1, 'DataMate', 'Technology', '2012-06-25', 600000); INSERT INTO companies (id, name, industry, founding_date, funding_amount) VALUES (2, 'PowerHub', 'Energy', '2008-11-10', 900000);\n\n## Query generation task:\nWhat is the average funding amount for companies in the technology sector, excluding companies founded before 2010?\n\n", "response": "SELECT AVG(funding_amount) FROM companies WHERE industry = 'Technology' AND founding_date > '2010-01-01';"}, {"query": "## sql context :\nCREATE TABLE defense_contracts_v2 (contract_id INT, agency VARCHAR(255), value DECIMAL(10,2));INSERT INTO defense_contracts_v2 (contract_id, agency, value) VALUES (1, 'DoD', 1000000.00), (2, 'DoD', 0.00), (3, 'VA', 500000.00), (4, 'DoD', 250000.00);\n\n## Query generation task:\nFind the total number of defense contracts awarded to each contracting agency, excluding contracts with a value of $0 and display the results in descending order by the total contract value.\n\n", "response": "SELECT agency, SUM(value) as total_contract_value FROM defense_contracts_v2 WHERE value > 0 GROUP BY agency ORDER BY total_contract_value DESC;"}, {"query": "## sql context :\nCREATE TABLE weights (id INT, member_id INT, weight FLOAT); INSERT INTO weights (id, member_id, weight) VALUES (1, 101, 120.5), (2, 102, 150.3), (3, 103, 90.7), (4, 104, 110.2), (5, 107, 135.6); CREATE TABLE members (id INT, gender VARCHAR(10)); INSERT INTO members (id, gender) VALUES (101, 'female'), (102, 'male'), (103, 'non-binary'), (104, 'non-binary'), (105, 'male'), (106, 'female'), (107, 'non-binary');\n\n## Query generation task:\nWhat is the distribution of weights lifted by members who identify as non-binary?\n\n", "response": "SELECT gender, AVG(weight) as avg_weight, STDDEV(weight) as stddev_weight FROM weights JOIN members ON weights.member_id = members.id WHERE members.gender = 'non-binary' GROUP BY gender;"}, {"query": "## sql context :\nCREATE TABLE vehicle_counts (region VARCHAR(10), vehicle_type VARCHAR(10), count INT); INSERT INTO vehicle_counts (region, vehicle_type, count) VALUES ('east', 'buses', 100), ('west', 'buses', 120), ('north', 'buses', 150), ('south', 'buses', 80), ('east', 'trams', 20), ('west', 'trams', 30), ('north', 'trams', 40), ('south', 'trams', 50);\n\n## Query generation task:\nWhat is the total number of buses and trams in the 'south' region?\n\n", "response": "SELECT SUM(count) FROM vehicle_counts WHERE region = 'south' AND (vehicle_type = 'buses' OR vehicle_type = 'trams');"}, {"query": "## sql context :\nCREATE TABLE genres (genre_id INT, genre VARCHAR(50)); INSERT INTO genres (genre_id, genre) VALUES (1, 'Pop'), (2, 'Rock'), (3, 'Hip Hop'), (4, 'Jazz'); CREATE TABLE songs (song_id INT, song_name VARCHAR(100), release_year INT, genre_id INT); INSERT INTO songs (song_id, song_name, release_year, genre_id) VALUES (1, 'Shape of You', 2017, 1), (2, 'Thinking Out Loud', 2014, 1), (3, 'Bohemian Rhapsody', 1975, 2), (4, 'Smells Like Teen Spirit', 1991, 2), (5, 'No Woman No Cry', 1974, 4), (6, 'November Rain', 1991, 2);\n\n## Query generation task:\nHow many songs are in the 'Rock' genre that were released between 1990 and 2000?\n\n", "response": "SELECT COUNT(*) FROM songs WHERE genre_id = (SELECT genre_id FROM genres WHERE genre = 'Rock') AND release_year BETWEEN 1990 AND 2000;"}, {"query": "## sql context :\nCREATE TABLE DefenseSpending (id INT, year INT, country TEXT, spending FLOAT); INSERT INTO DefenseSpending (id, year, country, spending) VALUES (1, 2022, 'USA', 7500000000), (2, 2022, 'UK', 5500000000);\n\n## Query generation task:\nWhat is the total defense spending for NATO countries in 2022 and their respective military budgets as a percentage of the total defense spending?\n\n", "response": "SELECT DefenseSpending.country, DefenseSpending.spending, (DefenseSpending.spending / (SELECT SUM(spending) FROM DefenseSpending WHERE DefenseSpending.year = 2022 AND DefenseSpending.country IN ('USA', 'UK', 'France', 'Germany', 'Italy'))) * 100 as percentage FROM DefenseSpending WHERE DefenseSpending.year = 2022 AND DefenseSpending.country IN ('USA', 'UK', 'France', 'Germany', 'Italy');"}, {"query": "## sql context :\nCREATE TABLE Exhibitions (ExhibitionID INT, ExhibitionName TEXT, Year INT, Region TEXT); INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, Year, Region) VALUES (1, 'Van Gogh Alive', 2015, 'Asia'); INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, Year, Region) VALUES (2, 'Picasso in Paris', 2018, 'Europe');\n\n## Query generation task:\nHow many art exhibitions were held in Asia by year?\n\n", "response": "SELECT Year, COUNT(*) as NumExhibitions FROM Exhibitions WHERE Region = 'Asia' GROUP BY Year;"}, {"query": "## sql context :\nCREATE TABLE clinical_trials(trial_id TEXT, category TEXT, approval_date DATE); INSERT INTO clinical_trials (trial_id, category, approval_date) VALUES ('Trial1', 'Cardiovascular', '2020-03-15'), ('Trial2', 'Neurology', '2019-12-20'), ('Trial3', 'Cardiovascular', '2020-06-30');\n\n## Query generation task:\nHow many clinical trials were approved in H1 of 2020 for drugs in the 'Cardiovascular' category?\n\n", "response": "SELECT COUNT(*) FROM clinical_trials WHERE category = 'Cardiovascular' AND EXTRACT(MONTH FROM approval_date) BETWEEN 1 AND 6 AND EXTRACT(YEAR FROM approval_date) = 2020;"}, {"query": "## sql context :\nCREATE TABLE Inventory (item_id INT, item_size INT, item_price DECIMAL(5,2), quantity INT); CREATE TABLE Orders (order_id INT, order_date DATE, item_id INT, customer_country VARCHAR(20)); INSERT INTO Inventory VALUES (1, 16, 50.00, 200), (2, 18, 55.00, 300), (3, 14, 45.00, 150); INSERT INTO Orders VALUES (1, '2022-01-01', 1, 'USA'), (2, '2022-02-01', 3, 'Canada'), (3, '2022-03-01', 2, 'USA');\n\n## Query generation task:\nWhat is the total quantity of size 16 clothing items sold in the US and Canada?\n\n", "response": "SELECT SUM(Inventory.quantity) FROM Inventory JOIN Orders ON Inventory.item_id = Orders.item_id WHERE (Orders.customer_country = 'USA' OR Orders.customer_country = 'Canada') AND Inventory.item_size = 16;"}, {"query": "## sql context :\nCREATE TABLE Dams (id INT, country VARCHAR(20), continent VARCHAR(20), year INT, cost FLOAT); INSERT INTO Dams (id, country, continent, year, cost) VALUES (1, 'China', 'Asia', 2008, 8000000); INSERT INTO Dams (id, country, continent, year, cost) VALUES (2, 'India', 'Asia', 2012, 7000000); INSERT INTO Dams (id, country, continent, year, cost) VALUES (3, 'China', 'Asia', 2015, 9000000);\n\n## Query generation task:\nIdentify the top 3 most expensive dams built in 'Asia' and their construction dates, if available.\n\n", "response": "SELECT country, year, cost FROM (SELECT country, year, cost, RANK() OVER (PARTITION BY continent ORDER BY cost DESC) as dam_rank FROM Dams WHERE continent = 'Asia') tmp WHERE dam_rank <= 3;"}, {"query": "## sql context :\nCREATE TABLE restaurants (name TEXT, revenue FLOAT); INSERT INTO restaurants (name, revenue) VALUES ('Pizzeria Spumoni', 15000.0), ('Pizzeria Yum', 18000.0);\n\n## Query generation task:\nWhat is the maximum revenue of any restaurant?\n\n", "response": "SELECT MAX(revenue) FROM restaurants;"}, {"query": "## sql context :\nCREATE TABLE mining_sites (site_id INT, country VARCHAR(50), num_employees INT); INSERT INTO mining_sites (site_id, country, num_employees) VALUES (1, 'Canada', 200), (2, 'USA', 300), (3, 'Mexico', 150);\n\n## Query generation task:\nFind the number of employees at each mining site, grouped by country.\n\n", "response": "SELECT country, SUM(num_employees) FROM mining_sites GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE landfill_capacity(region VARCHAR(10), year INT, capacity INT); INSERT INTO landfill_capacity VALUES('eastern', 2021, 500000), ('eastern', 2022, 550000), ('western', 2021, 600000), ('western', 2022, 650000);\n\n## Query generation task:\nWhat is the total landfill capacity (in cubic meters) for the 'eastern' region in 2022?\n\n", "response": "SELECT capacity FROM landfill_capacity WHERE region = 'eastern' AND year = 2022;"}, {"query": "## sql context :\nCREATE TABLE donations (id INT, donor_name TEXT, country TEXT, donation_amount DECIMAL, donation_date DATE); INSERT INTO donations (id, donor_name, country, donation_amount, donation_date) VALUES (1, 'Ramesh Kumar', 'India', 25.00, '2019-12-15'); INSERT INTO donations (id, donor_name, country, donation_amount, donation_date) VALUES (2, 'Sita Patel', 'India', 50.00, '2019-07-23');\n\n## Query generation task:\nWhat is the minimum donation amount made in India in 2019?\n\n", "response": "SELECT MIN(donation_amount) FROM donations WHERE country = 'India' AND YEAR(donation_date) = 2019;"}, {"query": "## sql context :\nCREATE TABLE Farmers (id INT PRIMARY KEY, name VARCHAR(100), age INT, location VARCHAR(100)); INSERT INTO Farmers (id, name, age, location) VALUES (1, 'Juan Rodriguez', 55, 'Texas'); INSERT INTO Farmers (id, name, age, location) VALUES (2, 'Alice Johnson', 48, 'California'); CREATE TABLE Plots (id INT PRIMARY KEY, farmer_id INT, size FLOAT, crop VARCHAR(50)); INSERT INTO Plots (id, farmer_id, size, crop) VALUES (1, 1, 0.5, 'Cotton'); INSERT INTO Plots (id, farmer_id, size, crop) VALUES (2, 2, 0.75, 'Wheat'); CREATE TABLE Crops (id INT PRIMARY KEY, name VARCHAR(50), growth_season VARCHAR(50)); INSERT INTO Crops (id, name, growth_season) VALUES (1, 'Cotton', 'Summer'); INSERT INTO Crops (id, name, growth_season) VALUES (2, 'Wheat', 'Winter');\n\n## Query generation task:\nWhat are the names and crops of farmers who grow crops in Texas?\n\n", "response": "SELECT f.name, p.crop FROM Farmers f INNER JOIN Plots p ON f.id = p.farmer_id INNER JOIN Crops c ON p.crop = c.name WHERE f.location = 'Texas';"}, {"query": "## sql context :\nCREATE TABLE players (player_id INT, name VARCHAR(50), position VARCHAR(50), height FLOAT, weight INT, team_id INT, league VARCHAR(50)); INSERT INTO players (player_id, name, position, height, weight, team_id, league) VALUES (1, 'Alice', 'Guard', 1.75, 70, 101, 'NBA');\n\n## Query generation task:\nWhat is the average height of female basketball players in the players table?\n\n", "response": "SELECT AVG(height) FROM players WHERE position = 'Guard' AND league = 'NBA' AND gender = 'Female';"}, {"query": "## sql context :\nCREATE TABLE ai_adoption (hotel_id INT, hotel_name TEXT, region TEXT, ai_adoption_date DATE); INSERT INTO ai_adoption (hotel_id, hotel_name, region, ai_adoption_date) VALUES (1, 'HotelA', 'EMEA', '2021-01-01'), (2, 'HotelB', 'EMEA', '2021-03-15'), (3, 'HotelC', 'EMEA', '2021-02-05');\n\n## Query generation task:\nIdentify the hotels in the 'EMEA' region that have an adoption date for AI-powered services earlier than their competitors.\n\n", "response": "SELECT hotel_name FROM ai_adoption WHERE region = 'EMEA' AND ai_adoption_date = (SELECT MIN(ai_adoption_date) FROM ai_adoption WHERE region = 'EMEA');"}, {"query": "## sql context :\nCREATE TABLE ArcticWildlifeReserve(species VARCHAR(50), temperature FLOAT);INSERT INTO ArcticWildlifeReserve(species, temperature) VALUES('Polar Bear', -20.0), ('Arctic Fox', -30.0), ('Reindeer', -10.0);\n\n## Query generation task:\nWhat is the average temperature recorded for each species in the Arctic Wildlife Reserve?\n\n", "response": "SELECT species, AVG(temperature) FROM ArcticWildlifeReserve GROUP BY species;"}, {"query": "## sql context :\nCREATE TABLE ImmunizationRates (Disease VARCHAR(50), Country VARCHAR(50), Year INT, ImmunizationRate FLOAT); INSERT INTO ImmunizationRates (Disease, Country, Year, ImmunizationRate) VALUES ('Measles', 'Brazil', 2018, 95.0), ('Measles', 'Argentina', 2018, 97.5), ('Measles', 'Colombia', 2018, 96.2);\n\n## Query generation task:\nWhat is the immunization rate for measles in South American countries in 2018?\n\n", "response": "SELECT Country, ImmunizationRate FROM ImmunizationRates WHERE Disease = 'Measles' AND Year = 2018;"}, {"query": "## sql context :\nCREATE TABLE artworks (id INT, artwork VARCHAR(50), medium VARCHAR(50), value INT); INSERT INTO artworks (id, artwork, medium, value) VALUES (1, 'Painting', 'Oil', 10000), (2, 'Sculpture', 'Bronze', 15000), (3, 'Print', 'Lithograph', 5000);\n\n## Query generation task:\nWhat is the total value of artworks by medium?\n\n", "response": "SELECT medium, SUM(value) as total_value FROM artworks GROUP BY medium;"}, {"query": "## sql context :\nCREATE TABLE investments (id INT, company_id INT, investment_round TEXT, amount INT, date DATE); INSERT INTO investments (id, company_id, investment_round, amount, date) VALUES (1, 1, 'Seed', 1000000, '2020-01-01'), (2, 2, 'Series A', 5000000, '2021-01-01'), (3, 3, 'Seed', 2000000, '2019-01-01');\n\n## Query generation task:\nWhat is the total number of Series A rounds raised by female-founded startups in Latin America?\n\n", "response": "SELECT SUM(amount) FROM investments JOIN companies ON investments.company_id = companies.id WHERE investments.investment_round = 'Series A' AND companies.founder_gender = 'Female' AND companies.location = 'Latin America';"}, {"query": "## sql context :\nCREATE TABLE reo_production (id INT PRIMARY KEY, reo_type VARCHAR(50), production_year INT, impurity_level FLOAT, mine_name VARCHAR(50)); CREATE TABLE mines (id INT PRIMARY KEY, mine_name VARCHAR(50), location VARCHAR(50)); INSERT INTO mines (id, mine_name, location) VALUES (1, 'Brazil rare earths', 'Brazil');\n\n## Query generation task:\nInsert new records for REO production in 2023 with no impurities from the mine 'Brazil rare earths' into the reo_production table\n\n", "response": "INSERT INTO reo_production (id, reo_type, production_year, impurity_level, mine_name) SELECT NULL, 'Neodymium Oxide', 2023, 0, m.name FROM mines m WHERE m.name = 'Brazil rare earths';"}, {"query": "## sql context :\nCREATE TABLE climate_communication_projects (project_id INT, location VARCHAR(50), investment_amount FLOAT, investment_year INT); INSERT INTO climate_communication_projects (project_id, location, investment_amount, investment_year) VALUES (1, 'Guatemala', 1000000, 2019), (2, 'Nicaragua', 1200000, 2019), (3, 'Honduras', 1500000, 2019), (4, 'Costa Rica', 900000, 2019), (5, 'El Salvador', 800000, 2019), (6, 'Belize', 1100000, 2020), (7, 'Guatemala', 1300000, 2020), (8, 'Nicaragua', 1400000, 2020), (9, 'Honduras', 1700000, 2020), (10, 'Costa Rica', 1200000, 2020), (11, 'El Salvador', 1000000, 2020);\n\n## Query generation task:\nWhat is the total investment in climate communication initiatives in Central America in 2019 and 2020?\n\n", "response": "SELECT SUM(investment_amount) FROM climate_communication_projects WHERE location LIKE 'Central America' AND investment_year IN (2019, 2020);"}, {"query": "## sql context :\nCREATE TABLE ShariahFinance (bank_name VARCHAR(50), product_type VARCHAR(50), amount DECIMAL(10,2), issue_date DATE);\n\n## Query generation task:\nWhich Shariah-compliant financing products were offered by banks in the Middle East with a total financing amount over $1,000,000 in 2021?\n\n", "response": "SELECT product_type, SUM(amount) as total_financing FROM ShariahFinance WHERE bank_name LIKE '%Middle East%' AND YEAR(issue_date) = 2021 GROUP BY product_type HAVING SUM(amount) > 1000000;"}, {"query": "## sql context :\nCREATE TABLE clinical_trials (country VARCHAR(255), drug VARCHAR(255), year INT); INSERT INTO clinical_trials (country, drug, year) VALUES ('Canada', 'DrugA', 2018), ('USA', 'DrugA', 2018), ('Canada', 'DrugB', 2019), ('USA', 'DrugB', 2019), ('Canada', 'DrugC', 2020), ('USA', 'DrugC', 2020);\n\n## Query generation task:\nInsert a new clinical trial for DrugE in Mexico in 2024.\n\n", "response": "INSERT INTO clinical_trials (country, drug, year) VALUES ('Mexico', 'DrugE', 2024);"}, {"query": "## sql context :\nCREATE TABLE peacekeeping_units (unit_id INT, commanding_officer VARCHAR(20));\n\n## Query generation task:\nUpdate the \"commanding_officer\" field in the \"peacekeeping_units\" table for units with \"unit_id\" 101, 102, and 103 with the values \"Officer A\", \"Officer B\", and \"Officer C\" respectively\n\n", "response": "UPDATE peacekeeping_units SET commanding_officer = CASE unit_id WHEN 101 THEN 'Officer A' WHEN 102 THEN 'Officer B' WHEN 103 THEN 'Officer C' ELSE commanding_officer END WHERE unit_id IN (101, 102, 103);"}, {"query": "## sql context :\nCREATE TABLE monthly_temp (region VARCHAR(255), temperature INT, month INT); INSERT INTO monthly_temp (region, temperature, month) VALUES ('North', 25, 1), ('South', 30, 1), ('East', 28, 1), ('West', 22, 1), ('North', 27, 2), ('South', 29, 2), ('East', 31, 2), ('West', 24, 2);\n\n## Query generation task:\nWhat is the percentage change in average temperature for each region compared to the previous month?\n\n", "response": "SELECT region, ((current_temp - prev_temp) * 100.0 / prev_temp) as pct_change FROM (SELECT region, temperature as current_temp, LAG(temperature) OVER (PARTITION BY region ORDER BY month) as prev_temp FROM monthly_temp) subquery;"}, {"query": "## sql context :\nCREATE TABLE Properties (id INT, price INT, state TEXT); INSERT INTO Properties (id, price, state) VALUES (1, 600000, 'Washington'), (2, 500000, 'California'), (3, 800000, 'Washington'), (4, 700000, 'Colorado');\n\n## Query generation task:\nWhat is the total number of properties and the average price in the state of Washington?\n\n", "response": "SELECT COUNT(*) AS total_properties, AVG(price) AS avg_price FROM Properties WHERE state = 'Washington';"}, {"query": "## sql context :\nCREATE TABLE MOVIES (id INT, title VARCHAR(100), production_studio VARCHAR(100), rating DECIMAL(3,2)); INSERT INTO MOVIES (id, title, production_studio, rating) VALUES (1, 'Spirited Away', 'Studio Ghibli', 8.5), (2, 'My Neighbor Totoro', 'Studio Ghibli', 8.2), (3, 'Princess Mononoke', 'Studio Ghibli', 8.4);\n\n## Query generation task:\nWhat's the average rating for movies produced by Studio Ghibli?\n\n", "response": "SELECT AVG(rating) as avg_rating FROM MOVIES WHERE production_studio = 'Studio Ghibli';"}, {"query": "## sql context :\nCREATE TABLE Neighborhoods (NeighborhoodID INT, NeighborhoodName VARCHAR(255)); CREATE TABLE Properties (PropertyID INT, NeighborhoodID INT, InclusiveHousing BOOLEAN);\n\n## Query generation task:\nFind the number of properties with inclusive housing policies in each neighborhood.\n\n", "response": "SELECT NeighborhoodName, COUNT(*) AS InclusivePropertiesCount FROM Properties JOIN Neighborhoods ON Properties.NeighborhoodID = Neighborhoods.NeighborhoodID WHERE InclusiveHousing = 1 GROUP BY NeighborhoodName;"}, {"query": "## sql context :\nCREATE TABLE restaurant_revenue(menu_category VARCHAR(20), revenue DECIMAL(10, 2), order_date DATE); INSERT INTO restaurant_revenue(menu_category, revenue, order_date) VALUES ('Desserts', 1500, '2021-04-01'), ('Desserts', 1800, '2021-05-03'), ('Desserts', 2000, '2021-06-01');\n\n## Query generation task:\nWhat was the total revenue for the 'Desserts' menu category in the second quarter of 2021?\n\n", "response": "SELECT SUM(revenue) FROM restaurant_revenue WHERE menu_category = 'Desserts' AND order_date >= '2021-04-01' AND order_date <= '2021-06-30';"}, {"query": "## sql context :\nCREATE TABLE bank (id INT, name VARCHAR(50)); INSERT INTO bank (id, name) VALUES (1, 'ABC Islamic Bank'), (2, 'Islamic Finance Co.'), (3, 'Shariah Compliant Ltd'), (4, 'Standard Bank'); CREATE TABLE loans (id INT, bank_id INT); INSERT INTO loans (id, bank_id) VALUES (1, 1), (2, 2), (3, 3), (4, 3), (5, 1), (6, 4);\n\n## Query generation task:\nWho are the top 3 banks with the most Shariah-compliant loans?\n\n", "response": "SELECT b.name, COUNT(l.id) as loan_count FROM bank b JOIN loans l ON b.id = l.bank_id GROUP BY b.name ORDER BY loan_count DESC LIMIT 3;"}, {"query": "## sql context :\nCREATE TABLE plankton (species TEXT, ocean TEXT, biomass INT); INSERT INTO plankton (species, ocean, biomass) VALUES ('Krill', 'Atlantic', 50), ('Jellyfish', 'Atlantic', 30), ('Zooplankton', 'Atlantic', 150), ('Phytoplankton', 'Atlantic', 200);\n\n## Query generation task:\nWhat is the total biomass of plankton in the Atlantic Ocean?\n\n", "response": "SELECT SUM(biomass) FROM plankton WHERE ocean = 'Atlantic';"}, {"query": "## sql context :\nCREATE TABLE smart_grids (id INT, name VARCHAR(255), capacity FLOAT);\n\n## Query generation task:\nWhat's the max capacity for a single smart grid project?\n\n", "response": "SELECT MAX(capacity) FROM smart_grids;"}, {"query": "## sql context :\nCREATE TABLE Regional_Archaeologists (id INT, archaeologist_name VARCHAR(50), region VARCHAR(50), num_discoveries INT); INSERT INTO Regional_Archaeologists (id, archaeologist_name, region, num_discoveries) VALUES (1, 'Archaeologist E', 'Africa', 30), (2, 'Archaeologist F', 'Asia', 40), (3, 'Archaeologist G', 'Europe', 50);\n\n## Query generation task:\nWho has discovered the most artifacts by region in the 'Regional_Archaeologists' table?\n\n", "response": "SELECT archaeologist_name, region, MAX(num_discoveries) FROM Regional_Archaeologists GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE mental_health_parity (id INT PRIMARY KEY, state VARCHAR(20), mental_health_coverage VARCHAR(20), substance_use_coverage VARCHAR(20)); INSERT INTO mental_health_parity (id, state, mental_health_coverage, substance_use_coverage) VALUES (1, 'California', 'Yes', 'Yes'), (2, 'Texas', 'Yes', 'No'), (3, 'New York', 'Yes', 'Yes'); CREATE TABLE cultural_competency (id INT PRIMARY KEY, state VARCHAR(20), cultural_competency_training VARCHAR(20)); INSERT INTO cultural_competency (id, state, cultural_competency_training) VALUES (1, 'California', 'Yes'), (2, 'Texas', 'No'), (3, 'New York', 'Yes');\n\n## Query generation task:\nCreate a view for mental health parity data\n\n", "response": "CREATE VIEW mental_health_parity_view AS SELECT m.state, m.mental_health_coverage, m.substance_use_coverage, c.cultural_competency_training FROM mental_health_parity m JOIN cultural_competency c ON m.state = c.state; WITH summary AS (SELECT state, mental_health_coverage, substance_use_coverage, cultural_competency_training, CASE WHEN mental_health_coverage = 'Yes' AND substance_use_coverage = 'Yes' AND cultural_competency_training = 'Yes' THEN 'Parity and Competency' ELSE 'No Parity or Competency' END as result FROM mental_health_parity_view) SELECT * FROM summary;"}, {"query": "## sql context :\nCREATE TABLE InclusiveHousingPolicies (PolicyID INT, PolicyName VARCHAR(50), ImplementationDate DATE); INSERT INTO InclusiveHousingPolicies (PolicyID, PolicyName, ImplementationDate) VALUES (1, 'Policy A', '2008-01-01'), (2, 'Policy B', '2011-01-01'), (3, 'Policy C', '2009-06-15');\n\n## Query generation task:\nDelete inclusive housing policies implemented before 2010.\n\n", "response": "DELETE FROM InclusiveHousingPolicies WHERE ImplementationDate < '2010-01-01';"}, {"query": "## sql context :\nCREATE TABLE daily_articles_by_category (id INT, publication_date DATE, category VARCHAR(30), articles INT); INSERT INTO daily_articles_by_category (id, publication_date, category, articles) VALUES (1, '2022-01-01', 'politics', 2), (2, '2022-01-02', 'politics', 3), (3, '2022-01-03', 'politics', 4), (4, '2022-01-04', 'politics', 5);\n\n## Query generation task:\nWhat is the maximum number of articles published in a day for 'politics' category?\n\n", "response": "SELECT MAX(articles) FROM daily_articles_by_category WHERE category = 'politics';"}, {"query": "## sql context :\nCREATE TABLE player_sessions (id INT, player_id INT, playtime INT, uses_vr BOOLEAN, game_genre VARCHAR(20)); INSERT INTO player_sessions (id, player_id, playtime, uses_vr, game_genre) VALUES (1, 1, 120, true, 'racing'), (2, 2, 90, false, 'adventure'), (3, 3, 150, true, 'racing');\n\n## Query generation task:\nWhat is the average playtime for players who use VR technology and play racing games?\n\n", "response": "SELECT AVG(playtime) FROM player_sessions WHERE uses_vr = true AND game_genre = 'racing';"}, {"query": "## sql context :\nCREATE TABLE Employees (EmployeeID INT, Department VARCHAR(20), Salary FLOAT); INSERT INTO Employees (EmployeeID, Department, Salary) VALUES (1, 'IT', 75000), (2, 'Marketing', 60000), (3, 'IT', 80000), (4, 'HR', 70000), (5, 'IT', 85000);\n\n## Query generation task:\nCalculate the average salary of employees in the IT department.\n\n", "response": "SELECT AVG(Salary) FROM Employees WHERE Department = 'IT';"}, {"query": "## sql context :\nCREATE TABLE states (id INT, name VARCHAR(255)); INSERT INTO states (id, name) VALUES (1, 'Alabama'), (2, 'Alaska'), (3, 'Arizona'), (4, 'Arkansas'), (5, 'California'); CREATE TABLE tb_reports (state_id INT, year INT, cases INT); INSERT INTO tb_reports (state_id, year, cases) VALUES (1, 2020, 123), (2, 2020, 45), (3, 2020, 78), (4, 2020, 90), (5, 2020, 150);\n\n## Query generation task:\nHow many cases of tuberculosis were reported in each state of the United States in 2020?\n\n", "response": "SELECT s.name AS state_name, r.cases AS tb_cases FROM states s INNER JOIN tb_reports r ON s.id = r.state_id WHERE r.year = 2020 GROUP BY s.name;"}, {"query": "## sql context :\nCREATE TABLE mental_health_parity (id INT, regulation VARCHAR(100), state VARCHAR(20), implementation_date DATE); INSERT INTO mental_health_parity (id, regulation, state, implementation_date) VALUES (1, 'Regulation 1', 'New York', '2011-01-01'), (2, 'Regulation 2', 'Florida', '2012-01-01'), (3, 'Regulation 4', 'California', NULL);\n\n## Query generation task:\nUpdate the implementation date of 'Regulation 4' to '2015-01-01'.\n\n", "response": "UPDATE mental_health_parity SET implementation_date = '2015-01-01' WHERE regulation = 'Regulation 4';"}, {"query": "## sql context :\nCREATE SCHEMA if not exists public_health; USE public_health; DROP TABLE if exists life_expectancy; CREATE TABLE life_expectancy (country varchar(50), continent varchar(50), life_expectancy float); INSERT INTO life_expectancy (country, continent, life_expectancy) VALUES ('Afghanistan', 'Asia', 65.0), ('Albania', 'Europe', 78.5), ('Algeria', 'Africa', 76.3);\n\n## Query generation task:\nWhat is the average life expectancy by continent?\n\n", "response": "SELECT continent, AVG(life_expectancy) FROM life_expectancy GROUP BY continent;"}, {"query": "## sql context :\nCREATE TABLE shrimp_farms (id INT, name TEXT, region TEXT); CREATE TABLE salinity_readings (id INT, farm_id INT, salinity FLOAT); INSERT INTO shrimp_farms (id, name, region) VALUES (1, 'Farm X', 'Gulf of Mexico'), (2, 'Farm Y', 'Gulf of Mexico'), (3, 'Farm Z', 'Caribbean Sea'); INSERT INTO salinity_readings (id, farm_id, salinity) VALUES (1, 1, 35.5), (2, 1, 36.0), (3, 2, 33.0), (4, 2, 33.5), (5, 3, 38.0);\n\n## Query generation task:\nWhat is the maximum water salinity in shrimp farms in the Gulf of Mexico?\n\n", "response": "SELECT MAX(salinity) FROM salinity_readings SR JOIN shrimp_farms SF ON SR.farm_id = SF.id WHERE SF.region = 'Gulf of Mexico';"}, {"query": "## sql context :\nCREATE TABLE events (id INT, community TEXT, date DATE, attendees INT); INSERT INTO events (id, community, date, attendees) VALUES (1, 'Haida', '2022-01-01', 500), (2, 'Inuit', '2022-02-01', 800), (3, 'Metis', '2022-03-01', 600), (4, 'Cree', '2022-04-01', 900), (5, 'Blackfoot', '2022-05-01', 700);\n\n## Query generation task:\nWhat was the attendance for cultural events in the Indigenous communities in Canada?\n\n", "response": "SELECT community, SUM(attendees) AS total_attendance FROM events WHERE community IN ('Haida', 'Inuit', 'Metis', 'Cree', 'Blackfoot') GROUP BY community;"}, {"query": "## sql context :\nCREATE TABLE ElectricVehicles (id INT, state VARCHAR(50), cost FLOAT, type VARCHAR(50)); INSERT INTO ElectricVehicles (id, state, cost, type) VALUES (1, 'California', 35000, 'Tesla Model 3'); INSERT INTO ElectricVehicles (id, state, cost, type) VALUES (2, 'California', 45000, 'Chevrolet Bolt');\n\n## Query generation task:\nWhat is the total number of electric vehicles in the state of California and their average cost?\n\n", "response": "SELECT SUM(cost) AS total_cost, AVG(cost) AS avg_cost FROM ElectricVehicles WHERE state = 'California' AND type LIKE '%Electric%';"}, {"query": "## sql context :\nCREATE TABLE mines (id INT, name VARCHAR(50), location VARCHAR(50), production_metric FLOAT, PRIMARY KEY(id)); INSERT INTO mines (id, name, location, production_metric) VALUES (3, 'California Gold', 'California', 55000); INSERT INTO mines (id, name, location, production_metric) VALUES (4, 'Emerald Peak', 'California', 48000);\n\n## Query generation task:\nWhat are the names and production metrics of mines located in California?\n\n", "response": "SELECT name, production_metric FROM mines WHERE location = 'California';"}, {"query": "## sql context :\nCREATE TABLE Volunteers (VolunteerID INT, VolunteerAge INT, Program VARCHAR(50));\n\n## Query generation task:\nNumber of volunteers in each program\n\n", "response": "SELECT Program, COUNT(*) as NumberOfVolunteers FROM Volunteers GROUP BY Program;"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID INT, DonorName TEXT, LastDonationDate DATE); INSERT INTO Donors (DonorID, DonorName, LastDonationDate) VALUES (1, 'John Doe', '2021-01-01'), (2, 'Jane Smith', '2019-06-15');\n\n## Query generation task:\nWho are the donors who have not donated in the last year?\n\n", "response": "SELECT DonorID, DonorName FROM Donors WHERE LastDonationDate < DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);"}, {"query": "## sql context :\nCREATE TABLE RecycledNylonGarments (id INT, co2_emission DECIMAL); INSERT INTO RecycledNylonGarments (id, co2_emission) VALUES (1, 7.2), (2, 7.8), (3, 7.6), (4, 8.1), (5, 7.4);\n\n## Query generation task:\nWhat is the standard deviation of CO2 emissions for garments made from recycled nylon?\n\n", "response": "SELECT STDDEV(co2_emission) FROM RecycledNylonGarments;"}, {"query": "## sql context :\nCREATE TABLE rural_health_centers (center_id INT, center_name VARCHAR(100), country VARCHAR(50), num_patients INT); INSERT INTO rural_health_centers (center_id, center_name, country, num_patients) VALUES (1, 'Center A', 'India', 6000), (2, 'Center B', 'India', 4000), (3, 'Center C', 'China', 8000), (4, 'Center D', 'China', 9000);\n\n## Query generation task:\nWhat is the average number of patients served per rural health center in Asia and how many of these centers serve more than 5000 patients?\n\n", "response": "SELECT AVG(num_patients) AS avg_patients_per_center, COUNT(*) FILTER (WHERE num_patients > 5000) AS centers_with_more_than_5000_patients FROM rural_health_centers WHERE country IN (SELECT name FROM countries WHERE continent = 'Asia');"}, {"query": "## sql context :\nCREATE TABLE Customers (customer_id INT, name VARCHAR(255), location VARCHAR(255));CREATE TABLE Meals (meal_id INT, name VARCHAR(255), sustainable BOOLEAN, cost DECIMAL(5,2));CREATE TABLE Deliveries (delivery_id INT, customer_id INT, meal_id INT, date DATE, cost DECIMAL(5,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id), FOREIGN KEY (meal_id) REFERENCES Meals(meal_id));\n\n## Query generation task:\nInsert a new record of a sustainable meal delivered by EcoFriendlyMeals to a customer in the city of Seattle on 2022-06-01 with a cost of $15.99 and meal ID 123456789\n\n", "response": "INSERT INTO Deliveries (delivery_id, customer_id, meal_id, date, cost) VALUES (NULL, (SELECT customer_id FROM Customers WHERE location = 'Seattle'), 123456789, '2022-06-01', 15.99);"}, {"query": "## sql context :\nCREATE TABLE City (id INT, name VARCHAR(50), state VARCHAR(50), population INT); INSERT INTO City (id, name, state, population) VALUES (1, 'Los Angeles', 'CA', 4000000); INSERT INTO City (id, name, state, population) VALUES (2, 'New York', 'NY', 8500000); INSERT INTO City (id, name, state, population) VALUES (3, 'Chicago', 'IL', 2700000); INSERT INTO City (id, name, state, population) VALUES (4, 'Houston', 'TX', 2300000); INSERT INTO City (id, name, state, population) VALUES (5, 'Phoenix', 'AZ', 1700000);\n\n## Query generation task:\nWhat is the name and state of the city with the highest population?\n\n", "response": "SELECT City.name, City.state FROM City ORDER BY City.population DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE tv_shows (id INT PRIMARY KEY, title TEXT, year INT, genre TEXT, creator TEXT, language TEXT); INSERT INTO tv_shows (id, title, year, genre, creator, language) VALUES (1, 'TVShow1', 2020, 'Comedy', 'Sofia Garcia', 'Spanish'), (2, 'TVShow2', 2019, 'Drama', 'Kevin Jones', 'English');\n\n## Query generation task:\nAdd a new TV show with diverse creators and languages.\n\n", "response": "INSERT INTO tv_shows (id, title, year, genre, creator, language) VALUES (3, 'TVShow3', 2021, 'Action', 'Fatima Ahmed', 'Arabic'), (4, 'TVShow4', 2020, 'Sci-Fi', 'Hassan Patel', 'Hindi');"}, {"query": "## sql context :\nCREATE TABLE steps (id INT, user_id INT, date DATE, steps INT); INSERT INTO steps (id, user_id, date, steps) VALUES (1, 1, '2022-01-01', 5000); INSERT INTO steps (id, user_id, date, steps) VALUES (2, 2, '2022-01-01', 6000); INSERT INTO steps (id, user_id, date, steps) VALUES (3, 3, '2022-01-02', 4000); INSERT INTO steps (id, user_id, date, steps) VALUES (4, 1, '2022-01-02', 7000); INSERT INTO steps (id, user_id, date, steps) VALUES (5, 4, '2022-01-01', 8000); INSERT INTO steps (id, user_id, date, steps) VALUES (6, 5, '2022-01-03', 9000); INSERT INTO steps (id, user_id, date, steps) VALUES (7, 6, '2022-01-01', 4000);\n\n## Query generation task:\nWhat is the minimum steps taken per day by users from Japan?\n\n", "response": "SELECT MIN(steps) as min_steps_per_day FROM steps JOIN users ON steps.user_id = users.id WHERE country = 'Japan';"}, {"query": "## sql context :\nCREATE TABLE Contractors (ContractorID INT, ContractorName TEXT); CREATE TABLE Projects (ProjectID INT, ContractorID INT, ProjectType TEXT, StartDate DATE, EndDate DATE);\n\n## Query generation task:\nList the names of contractors who have completed a project ahead of schedule in the last year.\n\n", "response": "SELECT ContractorName FROM Contractors C JOIN Projects P ON C.ContractorID = P.ContractorID WHERE P.EndDate < DATEADD(day, DateDiff(day, P.StartDate, P.EndDate) / 2, P.StartDate);"}, {"query": "## sql context :\nCREATE TABLE Collective_Bargaining (id INT, company_name VARCHAR(50), union_agreement_status VARCHAR(20)); INSERT INTO Collective_Bargaining (id, company_name, union_agreement_status) VALUES (1, 'ABC Corp', 'Active'), (2, 'XYZ Inc', 'Inactive'), (3, 'DEF Industries', 'Active');\n\n## Query generation task:\nList all unique 'Company_Names' in the 'Collective_Bargaining' table which have a 'Union_Agreement_Status' of 'Active'.\n\n", "response": "SELECT DISTINCT company_name FROM Collective_Bargaining WHERE union_agreement_status = 'Active';"}, {"query": "## sql context :\nCREATE TABLE investments(id INT, startup_id INT, round_number INT, investment_amount INT); INSERT INTO investments VALUES (1, 1, 1, 3000000); INSERT INTO investments VALUES (2, 1, 2, 7000000); INSERT INTO investments VALUES (3, 2, 1, 5000000);\n\n## Query generation task:\nWhat is the total funding amount for startups founded by women in the fintech sector?\n\n", "response": "SELECT SUM(investment_amount) FROM investments JOIN startups ON investments.startup_id = startups.id WHERE startups.founder_identity = 'Female' AND startups.industry = 'Fintech';"}, {"query": "## sql context :\nCREATE TABLE support_groups (group_id INT, group_name TEXT, location TEXT, complete_date DATE); INSERT INTO support_groups (group_id, group_name, location, complete_date) VALUES (1, 'Depression Support', 'USA', '2021-03-01'); CREATE TABLE patient_outcomes (outcome_id INT, patient_id INT, group_id INT, outcome TEXT, outcome_date DATE); INSERT INTO patient_outcomes (outcome_id, patient_id, group_id, outcome, outcome_date) VALUES (1, 1, 1, 'Improved', '2021-04-01'); INSERT INTO patient_outcomes (outcome_id, patient_id, group_id, outcome, outcome_date) VALUES (2, 2, 1, 'Unchanged', '2021-04-01');\n\n## Query generation task:\nWhat is the success rate of patients who completed a support group in the US?\n\n", "response": "SELECT AVG(CASE WHEN patient_outcomes.outcome = 'Improved' THEN 1.0 ELSE 0.0 END) FROM patient_outcomes INNER JOIN support_groups ON patient_outcomes.group_id = support_groups.group_id WHERE support_groups.location = 'USA';"}, {"query": "## sql context :\nCREATE TABLE ocean_species(id INT PRIMARY KEY, species VARCHAR(100), population INT, region VARCHAR(50));\n\n## Query generation task:\nCreate a table named 'ocean_species'\n\n", "response": "CREATE TABLE ocean_species (id INT PRIMARY KEY, species VARCHAR(100), population INT, region VARCHAR(50));"}, {"query": "## sql context :\nCREATE TABLE Satellites (Satellite_ID INT, Name VARCHAR(100), Launch_Date DATE); INSERT INTO Satellites (Satellite_ID, Name, Launch_Date) VALUES (1, 'Starlink-1', '2019-05-24'), (2, 'Starlink-2', '2019-06-11');\n\n## Query generation task:\nWhat is the earliest launch date for a satellite in the 'Satellites' table?\n\n", "response": "SELECT MIN(Launch_Date) FROM Satellites;"}, {"query": "## sql context :\nCREATE TABLE marine_species (name VARCHAR(50), common_name VARCHAR(50), location VARCHAR(50));\n\n## Query generation task:\nHow many marine species are found in the Arctic Ocean?\n\n", "response": "SELECT COUNT(*) FROM marine_species WHERE location = 'Arctic Ocean';"}, {"query": "## sql context :\nCREATE TABLE researcher (id INT, name VARCHAR, expertise VARCHAR, affiliation VARCHAR); INSERT INTO researcher (id, name, expertise, affiliation) VALUES (5, 'Eve', 'Explainable AI', 'UniversityC'); INSERT INTO researcher (id, name, expertise, affiliation) VALUES (6, 'Frank', 'Creative AI', 'CompanyD');\n\n## Query generation task:\nHow many researchers specialize in Explainable AI and Creative AI respectively?\n\n", "response": "SELECT SUM(expertise = 'Explainable AI') as explainable_ai_count, SUM(expertise = 'Creative AI') as creative_ai_count FROM researcher;"}, {"query": "## sql context :\nCREATE TABLE esports_teams (id INT PRIMARY KEY, name TEXT, organization TEXT);\n\n## Query generation task:\nInsert new eSports team records for the 'Genesis' organization\n\n", "response": "INSERT INTO esports_teams (id, name, organization) VALUES (1, 'Genesis Titans', 'Genesis'), (2, 'Genesis Dragons', 'Genesis');"}, {"query": "## sql context :\nCREATE TABLE attorneys (attorney_id INT, firm VARCHAR(20), billing_amount DECIMAL); INSERT INTO attorneys (attorney_id, firm, billing_amount) VALUES (1, 'Smith', 500.00), (2, 'Jones', 400.00), (3, 'Smith', 700.00), (4, 'Jones', 600.00);\n\n## Query generation task:\nWhat is the average billing amount per attorney for attorneys in the 'Smith' firm?\n\n", "response": "SELECT attorney_id, AVG(billing_amount) FROM attorneys WHERE firm = 'Smith' GROUP BY attorney_id;"}, {"query": "## sql context :\nCREATE TABLE inventory (id INT, material VARCHAR(255), order_quantity INT); INSERT INTO inventory (id, material, order_quantity) VALUES\n\n## Query generation task:\nWhat was the maximum order quantity for recycled polyester fabric?\n\n", "response": "SELECT MAX(order_quantity) FROM inventory WHERE material = 'Recycled Polyester';"}, {"query": "## sql context :\nCREATE TABLE biosensors (id INT, name VARCHAR(50), type VARCHAR(50), sensitivity FLOAT, specificity FLOAT, company_name VARCHAR(50)); INSERT INTO biosensors (id, name, type, sensitivity, specificity, company_name) VALUES (1, 'BioGlucose', 'Glucose', 0.95, 0.98, 'BioCorp'), (2, 'BioOxygen', 'Oxygen', 0.92, 0.96, 'BioCorp'), (3, 'BioPressure', 'Pressure', 0.98, 0.99, 'BioCorp');\n\n## Query generation task:\nDelete records of biosensors with sensitivity lower than 0.95 from the biosensors table\n\n", "response": "DELETE FROM biosensors WHERE sensitivity < 0.95;"}, {"query": "## sql context :\nCREATE TABLE Warehouse (name varchar(20), quarter int, year int, pallets_handled int); INSERT INTO Warehouse (name, quarter, year, pallets_handled) VALUES ('Warehouse A', 1, 2022, 500), ('Warehouse B', 1, 2022, 800);\n\n## Query generation task:\nWhich warehouse handled the most pallets in 'Quarter 1' of '2022'?\n\n", "response": "SELECT name, MAX(pallets_handled) FROM Warehouse WHERE quarter = 1 AND year = 2022 GROUP BY name;"}, {"query": "## sql context :\nCREATE TABLE visits (visit_id INT, visitor_id INT, visit_date DATE); INSERT INTO visits (visit_id, visitor_id, visit_date) VALUES (1, 1, '2020-01-01'), (2, 1, '2020-02-01'), (3, 2, '2020-03-01');\n\n## Query generation task:\nWhat percentage of visitors were repeat visitors in 2020?\n\n", "response": "SELECT 100.0 * COUNT(DISTINCT visitor_id) / (SELECT COUNT(DISTINCT visitor_id) FROM visitors WHERE visit_date BETWEEN '2020-01-01' AND '2020-12-31') AS percentage FROM visits WHERE visit_date BETWEEN '2020-01-01' AND '2020-12-31';"}, {"query": "## sql context :\nCREATE TABLE districts (district_id INT PRIMARY KEY, district_name VARCHAR(50)); CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(50), district_id INT, school_type VARCHAR(10), passing_rate INT); INSERT INTO districts VALUES (1, 'District A'), (2, 'District B'), (3, 'District C'); INSERT INTO schools VALUES (1, 'School 1', 1, 'Public', 80), (2, 'School 2', 1, 'Private', 90), (3, 'School 3', 2, 'Public', 70), (4, 'School 4', 2, 'Private', 85), (5, 'School 5', 3, 'Public', 95), (6, 'School 6', 3, 'Private', 75);\n\n## Query generation task:\nWhat is the number of public schools and private schools, and their respective passing rates in each district?\n\n", "response": "SELECT d.district_name, SUM(CASE WHEN s.school_type = 'Public' THEN 1 ELSE 0 END) AS public_schools, SUM(CASE WHEN s.school_type = 'Private' THEN 1 ELSE 0 END) AS private_schools, AVG(CASE WHEN s.school_type = 'Public' THEN s.passing_rate ELSE 0 END) AS public_passing_rate, AVG(CASE WHEN s.school_type = 'Private' THEN s.passing_rate ELSE 0 END) AS private_passing_rate FROM districts d JOIN schools s ON d.district_id = s.district_id GROUP BY d.district_id;"}, {"query": "## sql context :\nCREATE TABLE subjects (subject_id INT, subject_name TEXT); CREATE TABLE teachers (teacher_id INT, subject_id INT); CREATE TABLE courses (course_id INT, subject_id INT, teacher_id INT); INSERT INTO subjects VALUES (1, 'Math'), (2, 'Science'), (3, 'English'); INSERT INTO teachers VALUES (1, 1), (2, 2), (3, 3); INSERT INTO courses VALUES (1, 1, 1), (2, 1, 1), (3, 2, 2), (4, 3, 3);\n\n## Query generation task:\nHow many teachers have completed professional development courses in each subject area, and what is the total number of courses completed?\n\n", "response": "SELECT s.subject_name, COUNT(DISTINCT t.teacher_id) as num_teachers, COUNT(c.course_id) as total_courses_completed FROM subjects s LEFT JOIN teachers t ON s.subject_id = t.subject_id LEFT JOIN courses c ON t.teacher_id = c.teacher_id GROUP BY s.subject_id;"}, {"query": "## sql context :\nCREATE TABLE Players (PlayerID INT, PlayerName VARCHAR(50), GameName VARCHAR(50)); INSERT INTO Players (PlayerID, PlayerName, GameName) VALUES (1, 'John Smith', 'Galactic Conquest'); INSERT INTO Players (PlayerID, PlayerName, GameName) VALUES (2, 'Jane Doe', 'Space Crusaders'); CREATE TABLE GameDesign (GameName VARCHAR(50), GameEngine VARCHAR(50), GameGraphics VARCHAR(50)); INSERT INTO GameDesign (GameName, GameEngine, GameGraphics) VALUES ('Galactic Conquest', 'Unreal Engine', 'High'); INSERT INTO GameDesign (GameName, GameEngine, GameGraphics) VALUES ('Space Crusaders', 'Unity', 'Medium');\n\n## Query generation task:\nDisplay the PlayerName, GameName, and GameGraphics for players who play 'Galactic Conquest'\n\n", "response": "SELECT p.PlayerName, gd.GameName, gd.GameGraphics FROM Players p INNER JOIN GameDesign gd ON p.GameName = gd.GameName WHERE p.GameName = 'Galactic Conquest';"}, {"query": "## sql context :\nCREATE TABLE dissolved_oxygen_readings (location VARCHAR(255), year INT, dissolved_oxygen FLOAT); INSERT INTO dissolved_oxygen_readings (location, year, dissolved_oxygen) VALUES ('Location A', 2018, 6.2), ('Location A', 2019, 6.3), ('Location A', 2020, 6.5), ('Location B', 2018, 5.9), ('Location B', 2019, 6.0), ('Location B', 2020, 6.2);\n\n## Query generation task:\nWhat is the average dissolved oxygen level for each location in the past 3 years?\n\n", "response": "SELECT location, AVG(dissolved_oxygen) as avg_dissolved_oxygen FROM dissolved_oxygen_readings WHERE year >= (SELECT MAX(year) - 3 FROM dissolved_oxygen_readings) GROUP BY location;"}, {"query": "## sql context :\nCREATE TABLE wildlife_habitats (id INT, name VARCHAR(255)); INSERT INTO wildlife_habitats (id, name) VALUES (1, 'Forest'), (2, 'Grassland'); CREATE TABLE trees (id INT, age INT, habitat_id INT); INSERT INTO trees (id, age, habitat_id) VALUES (1, 200, 1), (2, 150, 2);\n\n## Query generation task:\nWhat is the average age of trees per wildlife habitat?\n\n", "response": "SELECT h.name habitat, AVG(t.age) avg_age FROM trees t JOIN wildlife_habitats h ON t.habitat_id = h.id GROUP BY h.name;"}, {"query": "## sql context :\nCREATE TABLE retailers (retailer_id INT, retailer_name TEXT, region TEXT);CREATE TABLE products (product_id INT, product_name TEXT, is_organic BOOLEAN);CREATE TABLE inventory (retailer_id INT, product_id INT, caloric_content INT);\n\n## Query generation task:\nWhat is the average caloric content of organic products sold by retailers in the Northeast region?\n\n", "response": "SELECT AVG(inventory.caloric_content) FROM inventory JOIN products ON inventory.product_id = products.product_id JOIN retailers ON inventory.retailer_id = retailers.retailer_id WHERE products.is_organic = TRUE AND retailers.region = 'Northeast';"}, {"query": "## sql context :\nCREATE TABLE tours (id INT, city TEXT, is_sustainable BOOLEAN); INSERT INTO tours (id, city, is_sustainable) VALUES (1, 'New York City', true), (2, 'New York City', false);\n\n## Query generation task:\nWhat is the total number of sustainable tours offered in New York City?\n\n", "response": "SELECT COUNT(*) FROM tours WHERE city = 'New York City' AND is_sustainable = true;"}, {"query": "## sql context :\nCREATE TABLE TicketSpending (FanID INT, Gender VARCHAR(255), TotalSpent DECIMAL(5,2)); INSERT INTO TicketSpending (FanID, Gender, TotalSpent) VALUES (1, 'Male', 150.00), (2, 'Female', 120.00), (3, 'Non-binary', 80.00);\n\n## Query generation task:\nWhat is the average ticket spending by fan demographic?\n\n", "response": "SELECT Gender, AVG(TotalSpent) as Avg_Ticket_Spending FROM TicketSpending GROUP BY Gender;"}, {"query": "## sql context :\nCREATE TABLE gold_mines (id INT, name VARCHAR(50), location VARCHAR(50), size INT, num_employees INT, co2_emissions INT); INSERT INTO gold_mines VALUES (1, 'Gold Mine 1', 'Canada', 450, 320, 22000); INSERT INTO gold_mines VALUES (2, 'Gold Mine 2', 'Canada', 600, 450, 28000); INSERT INTO gold_mines VALUES (3, 'Gold Mine 3', 'Mexico', 200, 180, 16000);\n\n## Query generation task:\nWhat is the average number of employees for gold mines located in Canada?\n\n", "response": "SELECT AVG(num_employees) FROM gold_mines WHERE location = 'Canada';"}, {"query": "## sql context :\nCREATE TABLE events (id INT, name VARCHAR(255), date DATE, category VARCHAR(255), price DECIMAL(5,2), attendance INT); INSERT INTO events (id, name, date, category, price, attendance) VALUES (1, 'Exhibition', '2022-06-01', 'museums', 75.00, 1000), (2, 'Tour', '2022-06-02', 'historical', 40.00, 600), (3, 'Workshop', '2022-06-03', 'museums', 30.00, 750);\n\n## Query generation task:\nWhat is the average number of attendees for events in the 'historical' category that have a price over 30?\n\n", "response": "SELECT AVG(attendance) FROM events WHERE category = 'historical' AND price > 30;"}, {"query": "## sql context :\nCREATE TABLE climate_finance_re (region VARCHAR(50), source VARCHAR(50), amount NUMERIC(12,2)); INSERT INTO climate_finance_re (region, source, amount) VALUES ('Asia', 'Wind', 1500.00), ('Asia', 'Solar', 2500.00); CREATE TABLE climate_adaptation_re (project_name VARCHAR(50), region VARCHAR(50), status VARCHAR(50)); INSERT INTO climate_adaptation_re (project_name, region, status) VALUES ('Resilient Cities', 'Asia', 'Successful'), ('Green Infrastructure', 'Asia', 'Successful'), ('Coastal Protection', 'Asia', 'Successful');\n\n## Query generation task:\nIdentify the total amount of climate finance spent on renewable energy sources in Asia and the number of adaptation projects in the region.\n\n", "response": "SELECT SUM(amount) FROM climate_finance_re WHERE region = 'Asia' AND source IN ('Wind', 'Solar'); SELECT COUNT(*) FROM climate_adaptation_re WHERE region = 'Asia';"}, {"query": "## sql context :\nCREATE TABLE Exhibitions (id INT, curator VARCHAR(50), title VARCHAR(100), location VARCHAR(100), start_date DATE, end_date DATE);\n\n## Query generation task:\nFind the total number of exhibitions by each curator in the 'Exhibitions' table.\n\n", "response": "SELECT curator, COUNT(*) as total_exhibitions FROM Exhibitions GROUP BY curator;"}, {"query": "## sql context :\nCREATE TABLE production_yearly (year INT, element VARCHAR(10), quantity INT); INSERT INTO production_yearly (year, element, quantity) VALUES (2015, 'Europium', 4000), (2016, 'Europium', 4500);\n\n## Query generation task:\nWhat is the average production of Europium per year?\n\n", "response": "SELECT year, AVG(quantity) as avg_quantity FROM production_yearly WHERE element = 'Europium' GROUP BY year"}, {"query": "## sql context :\nCREATE TABLE dispensaries (dispensary_name VARCHAR(30), state VARCHAR(20), sales_channel VARCHAR(20), sales_quantity INT); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary A', 'Colorado', 'edibles', 250); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary B', 'Colorado', 'edibles', 300); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary C', 'Washington', 'edibles', 200); INSERT INTO dispensaries (dispensary_name, state, sales_channel, sales_quantity) VALUES ('Dispensary D', 'Washington', 'edibles', 350);\n\n## Query generation task:\nFind the dispensaries with the highest sales of edibles in Colorado and Washington.\n\n", "response": "SELECT dispensary_name, sales_quantity FROM dispensaries WHERE sales_channel = 'edibles' AND state IN ('Colorado', 'Washington') ORDER BY sales_quantity DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE marine_species (name TEXT, habitat TEXT); INSERT INTO marine_species (name, habitat) VALUES ('Salmon', 'Pacific Ocean'), ('Sea Lion', 'Pacific Ocean'), ('Clownfish', 'Indian Ocean');\n\n## Query generation task:\nWhat are the names of all marine species in the Pacific Ocean?\n\n", "response": "SELECT name FROM marine_species WHERE habitat = 'Pacific Ocean';"}, {"query": "## sql context :\nCREATE TABLE treatments (patient_id INT, age INT, treatment_type VARCHAR(50)); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (1, 45, 'CBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (2, 50, 'DBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (3, 42, 'Mindfulness'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (4, 48, 'CBT'); INSERT INTO treatments (patient_id, age, treatment_type) VALUES (5, 39, 'DBT');\n\n## Query generation task:\nWhat is the most common treatment approach among patients aged 40-50?\n\n", "response": "SELECT treatment_type, COUNT(*) as count FROM treatments WHERE age BETWEEN 40 AND 50 GROUP BY treatment_type ORDER BY count DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE Academic_Publications (Publication_ID INT, Title VARCHAR(100), Publication_Type VARCHAR(50), Publication_Year INT, Author_ID INT);\n\n## Query generation task:\nUpdate the 'Academic_Publications' table to change the 'Title' to 'Machine Learning for Social Good' for publications with 'Publication_ID' in (601, 605, 612)\n\n", "response": "UPDATE Academic_Publications SET Title = 'Machine Learning for Social Good' WHERE Publication_ID IN (601, 605, 612);"}, {"query": "## sql context :\nCREATE TABLE epl_teams (team_id INT, team_name VARCHAR(100), city VARCHAR(50), league VARCHAR(50), division VARCHAR(50), games_played INT, goals INT); INSERT INTO epl_teams (team_id, team_name, city, league, division, games_played, goals) VALUES (1, 'Manchester United', 'Manchester', 'EPL', 'Premier League', 12, 35); INSERT INTO epl_teams (team_id, team_name, city, league, division, games_played, goals) VALUES (2, 'Manchester City', 'Manchester', 'EPL', 'Premier League', 13, 40);\n\n## Query generation task:\nFind the top 5 goal scorers in the English Premier League, partitioned by team and ordered by total goals in descending order.\n\n", "response": "SELECT team_name, player_name, SUM(goals) OVER (PARTITION BY team_name) as total_goals, RANK() OVER (PARTITION BY team_name ORDER BY SUM(goals) DESC) as rank  FROM epl_players  WHERE league = 'EPL'  GROUP BY team_name, player_name  ORDER BY team_name, total_goals DESC, rank;"}, {"query": "## sql context :\nCREATE TABLE dallas_fire_incidents (id INT, incident_date TIMESTAMP); INSERT INTO dallas_fire_incidents (id, incident_date) VALUES (1, '2020-12-31 23:59:59');\n\n## Query generation task:\nDelete all fire incidents in the city of Dallas that occurred before January 1st, 2021.\n\n", "response": "DELETE FROM dallas_fire_incidents WHERE incident_date < '2021-01-01 00:00:00';"}, {"query": "## sql context :\nCREATE TABLE patients (id INT, age INT, gender TEXT, state TEXT, condition TEXT); INSERT INTO patients (id, age, gender, state, condition) VALUES (1, 35, 'Female', 'California', 'Anxiety'); INSERT INTO patients (id, age, gender, state, condition) VALUES (2, 42, 'Male', 'Florida', 'Depression');\n\n## Query generation task:\nWhat percentage of patients in California have been diagnosed with anxiety disorders?\n\n", "response": "SELECT (COUNT(*)) / (SELECT COUNT(*) FROM patients WHERE patients.state = 'California') * 100.0 AS percentage FROM patients WHERE patients.state = 'California' AND patients.condition = 'Anxiety';"}, {"query": "## sql context :\nCREATE TABLE vessels (id INT, type VARCHAR(255)); CREATE TABLE inspections (id INT, vessel_id INT, inspection_date DATE); INSERT INTO vessels VALUES (1, 'Tanker'), (2, 'Cargo Ship'); INSERT INTO inspections VALUES (1, 1, '2021-01-01'), (2, 1, '2020-01-01'), (3, 2, '2021-01-03');\n\n## Query generation task:\nWhat is the earliest inspection date for each vessel type?\n\n", "response": "SELECT v.type, MIN(i.inspection_date) as earliest_date FROM vessels v JOIN inspections i ON v.id = i.vessel_id GROUP BY v.type;"}, {"query": "## sql context :\nCREATE TABLE animal_population (animal_id INT, animal_name VARCHAR(50), program VARCHAR(50), added_date DATE); INSERT INTO animal_population (animal_id, animal_name, program, added_date) VALUES (1, 'Grizzly Bear', 'habitat_preservation', '2022-01-01'), (2, 'Gray Wolf', 'community_education', '2022-02-01'), (3, 'Bald Eagle', 'habitat_preservation', '2022-03-01'), (4, 'Red Fox', 'community_education', '2022-04-01');\n\n## Query generation task:\nList all animals added in the last week\n\n", "response": "SELECT animal_name, program, added_date FROM animal_population WHERE added_date >= DATEADD(WEEK, -1, GETDATE());"}, {"query": "## sql context :\nCREATE TABLE excavation_sites (site_id INT, site_name VARCHAR(255)); CREATE TABLE artifacts (artifact_id INT, site_id INT, artifact_type VARCHAR(255)); INSERT INTO excavation_sites (site_id, site_name) VALUES (1, 'site_a'), (2, 'site_b'), (3, 'site_c'), (4, 'site_d'); INSERT INTO artifacts (artifact_id, site_id, artifact_type) VALUES (1, 1, 'Pottery'), (2, 1, 'Bone Fragments'), (3, 2, 'Pottery'), (4, 2, 'Coins'), (5, 3, 'Bone Fragments'), (6, 3, 'Bronze Tools'), (7, 4, 'Pottery'), (8, 4, 'Pottery'), (9, 4, 'Stone Tools');\n\n## Query generation task:\nWhat is the most common artifact type found at 'site_d'?\n\n", "response": "SELECT artifact_type, COUNT(*) AS count FROM artifacts WHERE site_id = (SELECT site_id FROM excavation_sites WHERE site_name = 'site_d') GROUP BY artifact_type ORDER BY count DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE well (well_id INT, well_name TEXT, shale_play TEXT, gas_production_2020 FLOAT); INSERT INTO well (well_id, well_name, shale_play, gas_production_2020) VALUES (1, 'Well A', 'Bakken', 9000), (2, 'Well B', 'Bakken', 11000), (3, 'Well C', 'Bakken', 8000);\n\n## Query generation task:\nFind the top 2 wells with the highest gas production in the Bakken formation in 2020?\n\n", "response": "SELECT well_name, gas_production_2020 as gas_production FROM well WHERE shale_play = 'Bakken' ORDER BY gas_production_2020 DESC LIMIT 2;"}, {"query": "## sql context :\nCREATE TABLE workout_records (workout_date DATE, member_id INT);\n\n## Query generation task:\nFind the total number of workout records in 2022\n\n", "response": "SELECT COUNT(*) FROM workout_records WHERE workout_date BETWEEN '2022-01-01' AND '2022-12-31';"}, {"query": "## sql context :\nCREATE TABLE public_buses( bus_id INT, route_id INT, start_time TIMESTAMP, end_time TIMESTAMP, total_distance DECIMAL(10,2), city VARCHAR(50));\n\n## Query generation task:\nWhat is the total distance traveled by public buses in London in 2021?\n\n", "response": "SELECT SUM(total_distance) FROM public_buses WHERE city = 'London' AND YEAR(start_time) = 2021;"}, {"query": "## sql context :\nCREATE TABLE machines (machine_id INT, type TEXT, schedule TEXT); CREATE TABLE factories (factory_id INT, initiative TEXT);\n\n## Query generation task:\nDisplay the machine IDs, types, and maintenance schedules for machines not in factories with industry 4.0 initiatives.\n\n", "response": "SELECT machines.machine_id, machines.type, machines.schedule FROM machines RIGHT JOIN factories ON machines.factory_id = factories.factory_id WHERE factories.initiative IS NULL;"}, {"query": "## sql context :\nCREATE TABLE Products (product_id INT, category TEXT); INSERT INTO Products (product_id, category) VALUES (1, 'Tops'), (2, 'Pants'), (3, 'Tops'), (4, 'Shoes'); CREATE TABLE FairTradeCertifications (product_id INT, certified BOOLEAN); INSERT INTO FairTradeCertifications (product_id, certified) VALUES (1, TRUE), (2, FALSE), (3, TRUE), (4, TRUE);\n\n## Query generation task:\nList the unique product categories that have been certified as fair trade.\n\n", "response": "SELECT DISTINCT category FROM Products INNER JOIN FairTradeCertifications ON Products.product_id = FairTradeCertifications.product_id WHERE FairTradeCertifications.certified = TRUE;"}, {"query": "## sql context :\nCREATE TABLE strains (strain_id INT, strain_name TEXT, strain_type TEXT, state TEXT, potency DECIMAL); INSERT INTO strains (strain_id, strain_name, strain_type, state, potency) VALUES (1, 'Purple Haze', 'Sativa', 'Washington', 18);\n\n## Query generation task:\nWhat is the average potency of sativa strains sold in Washington state?\n\n", "response": "SELECT AVG(potency) FROM strains WHERE strain_type = 'Sativa' AND state = 'Washington';"}, {"query": "## sql context :\nCREATE TABLE artist_genre (artist_id INT, genre VARCHAR(255));\n\n## Query generation task:\nWhat is the total number of streams for each artist, for artists who have performed at music festivals in the last year?\n\n", "response": "SELECT a.artist_id, SUM(s.streams) as total_streams FROM artist_streams s JOIN festival_performances f ON s.artist_id = f.artist_id JOIN artist_genre g ON s.artist_id = g.artist_id WHERE f.performance_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY a.artist_id;"}, {"query": "## sql context :\nCREATE TABLE suppliers (supplier_id INT, follows_ethical_practices BOOLEAN); INSERT INTO suppliers (supplier_id, follows_ethical_practices) VALUES (1, TRUE), (2, FALSE), (3, TRUE); CREATE TABLE sales (sale_id INT, supplier_id INT, quantity_sold INT);\n\n## Query generation task:\nWhat is the total quantity of products sold by suppliers who follow ethical labor practices?\n\n", "response": "SELECT SUM(quantity_sold) FROM sales INNER JOIN suppliers ON sales.supplier_id = suppliers.supplier_id WHERE suppliers.follows_ethical_practices = TRUE;"}, {"query": "## sql context :\nCREATE TABLE Machines (Id INT, Name VARCHAR(50), Type VARCHAR(50), Status VARCHAR(50)); INSERT INTO Machines (Id, Name, Type, Status) VALUES (1, 'Reactor 1', 'Chemical', 'Operational'), (2, 'Separator 2', 'Purification', 'Inactive');\n\n## Query generation task:\nIdentify machines not in 'Operational' status.\n\n", "response": "SELECT * FROM Machines WHERE Status != 'Operational';"}, {"query": "## sql context :\nCREATE TABLE climate_projects (id INT, region TEXT, project_type TEXT); CREATE VIEW total_projects AS SELECT COUNT(*) as total_projects FROM climate_projects;\n\n## Query generation task:\nWhat is the number of climate adaptation projects in each region, and what is the percentage of the total for each region?\n\n", "response": "SELECT region, COUNT(*) as region_projects, (COUNT(*) / (SELECT total_projects FROM total_projects)) as percentage FROM climate_projects WHERE project_type = 'adaptation' GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE factories (factory_id INT, ethical_manufacturing BOOLEAN); INSERT INTO factories VALUES (1, true), (2, false), (3, true); CREATE TABLE workforce (worker_id INT, factory_id INT); INSERT INTO workforce VALUES (1, 1), (2, 1), (3, 2), (4, 3);\n\n## Query generation task:\nDelete workforce records from factories that do not follow ethical manufacturing guidelines.\n\n", "response": "DELETE FROM workforce w WHERE NOT EXISTS (SELECT 1 FROM factories f WHERE f.factory_id = w.factory_id AND f.ethical_manufacturing = true);"}, {"query": "## sql context :\nCREATE TABLE Appointments (AppointmentID int, Date date, Location varchar(50), Type varchar(50)); INSERT INTO Appointments (AppointmentID, Date, Location, Type) VALUES (1, '2021-01-01', 'Rural Germany', 'Checkup');\n\n## Query generation task:\nWhat is the total number of medical appointments in rural areas of Germany in the past year?\n\n", "response": "SELECT SUM(COUNT(*)) FROM Appointments WHERE Location LIKE '%Rural Germany%' AND Date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY EXTRACT(YEAR FROM Date);"}, {"query": "## sql context :\nCREATE TABLE VendorFabrics (id INT, vendor VARCHAR(20), fabric VARCHAR(20), price DECIMAL(5,2)); INSERT INTO VendorFabrics (id, vendor, fabric, price) VALUES (1, 'Vendor A', 'organic cotton', 6.50), (2, 'Vendor B', 'recycled polyester', 8.00);\n\n## Query generation task:\nWhat is the maximum price of sustainable fabrics for each textile vendor?\n\n", "response": "SELECT vendor, MAX(price) FROM VendorFabrics WHERE fabric LIKE '%sustainable%' GROUP BY vendor;"}, {"query": "## sql context :\nCREATE TABLE certifications (certification_id INT, certification_name TEXT); INSERT INTO certifications (certification_id, certification_name) VALUES (1, 'Fair Trade'), (2, 'GOTS Organic'), (3, 'B Corp'); CREATE TABLE garments (garment_id INT, garment_name TEXT, production_cost FLOAT, certification_id INT); INSERT INTO garments (garment_id, garment_name, production_cost, certification_id) VALUES (1, 'Organic Cotton Tee', 15.50, 3), (2, 'Cotton Tote Bag', 8.25, NULL), (3, 'Recycled Polyester Hoodie', 28.99, NULL), (4, 'Organic Cotton Dress', 22.00, 2), (5, 'Hemp Trousers', 35.00, NULL), (6, 'Bamboo Shirt', 27.50, NULL);\n\n## Query generation task:\nWhat is the total production cost of B Corp certified garments?\n\n", "response": "SELECT SUM(g.production_cost) FROM garments g WHERE g.certification_id = 3;"}, {"query": "## sql context :\nCREATE TABLE Creative_AI_Applications (Application VARCHAR(50), Field VARCHAR(50), Citations INT); INSERT INTO Creative_AI_Applications (Application, Field, Citations) VALUES ('App1', 'Arts', 50), ('App2', 'Arts', 75), ('App3', 'Arts', 100), ('App4', 'Science', 120), ('App5', 'Science', 150);\n\n## Query generation task:\nWhat is the average number of citations for creative AI applications in the field of arts?\n\n", "response": "SELECT AVG(Citations) as Average_Citations FROM Creative_AI_Applications WHERE Field = 'Arts';"}, {"query": "## sql context :\nCREATE TABLE salmon_farms (id INT, region VARCHAR(255), biomass FLOAT, temperature FLOAT); INSERT INTO salmon_farms (id, region, biomass, temperature) VALUES (1, 'North', 15000.0, 12.5), (2, 'North', 12000.0, 17.3), (3, 'South', 20000.0, 18.0), (4, 'South', 18000.0, 16.5);\n\n## Query generation task:\nWhat is the total biomass of fish in the 'salmon_farms' table, grouped by region, having an average temperature above 15 degrees Celsius?\n\n", "response": "SELECT region, SUM(biomass) FROM salmon_farms GROUP BY region HAVING AVG(temperature) > 15;"}, {"query": "## sql context :\nCREATE TABLE australia_offset_programs (name TEXT, co2_reduction_tons INT); INSERT INTO australia_offset_programs (name, co2_reduction_tons) VALUES ('Program A', 7000), ('Program B', 4000), ('Program C', 6000);\n\n## Query generation task:\nWhat is the total CO2 emissions reduction (in metric tons) achieved by carbon offset programs in Australia, and how many of them achieved a reduction of over 5000 metric tons?\n\n", "response": "SELECT SUM(co2_reduction_tons) AS total_reduction, COUNT(*) FILTER (WHERE co2_reduction_tons > 5000) AS num_programs_over_5000 FROM australia_offset_programs;"}, {"query": "## sql context :\nCREATE TABLE transportation_fleet (region VARCHAR(20), vehicle_type VARCHAR(20), count INT); INSERT INTO transportation_fleet (region, vehicle_type, count) VALUES ('North America', 'cars', 30000), ('North America', 'buses', 5000), ('Europe', 'cars', 20000), ('Europe', 'buses', 10000);\n\n## Query generation task:\nWhat is the total number of vehicles in the transportation fleet for each region?\n\n", "response": "SELECT region, SUM(count) FROM transportation_fleet GROUP BY region;"}, {"query": "## sql context :\nCREATE TABLE city_budgets (city varchar(50), year int, service varchar(50), budget int); INSERT INTO city_budgets (city, year, service, budget) VALUES ('Miami', 2025, 'Healthcare', 12000000), ('Miami', 2025, 'Infrastructure', 8000000);\n\n## Query generation task:\nWhat is the total budget allocated for healthcare and infrastructure in Miami for 2025?\n\n", "response": "SELECT SUM(budget) FROM city_budgets WHERE city = 'Miami' AND (service = 'Healthcare' OR service = 'Infrastructure') AND year = 2025;"}, {"query": "## sql context :\nCREATE TABLE tv_shows (id INT, title TEXT, runtime INT);\n\n## Query generation task:\nWhat is the name of the TV show with the longest runtime in the tv_shows table?\n\n", "response": "SELECT title FROM tv_shows ORDER BY runtime DESC LIMIT 1;"}, {"query": "## sql context :\nCREATE TABLE Manufacturers (ManufacturerID INT, ManufacturerName VARCHAR(50), Location VARCHAR(50), Spending DECIMAL(5,2)); CREATE TABLE Materials (MaterialID INT, MaterialName VARCHAR(50), Type VARCHAR(50)); CREATE TABLE ManufacturerMaterials (ManufacturerID INT, MaterialID INT, Quantity INT); INSERT INTO ManufacturerMaterials (ManufacturerID, MaterialID, Quantity) VALUES (1, 1, 500), (2, 1, 750), (3, 1, 600), (1, 2, 200), (2, 2, 300), (3, 2, 400); INSERT INTO Manufacturers (ManufacturerID, ManufacturerName, Location, Spending) VALUES (1, 'Manufacturer A', 'China', 1250), (2, 'Manufacturer B', 'India', 1050), (3, 'Manufacturer C', 'Vietnam', 1500), (4, 'Manufacturer D', 'Brazil', 1700), (5, 'Manufacturer E', 'Indonesia', 1350); INSERT INTO Materials (MaterialID, MaterialName, Type) VALUES (1, 'Organic Cotton', 'Sustainable'), (2, 'Polyester', 'Non-Sustainable');\n\n## Query generation task:\nWhat is the total quantity of non-sustainable materials used in the production process for the lowest 2 spending manufacturers?\n\n", "response": "SELECT SUM(Quantity) FROM (SELECT * FROM ManufacturerMaterials JOIN Manufacturers ON ManufacturerMaterials.ManufacturerID = Manufacturers.ManufacturerID WHERE Spending IN (SELECT MIN(Spending) FROM Manufacturers LIMIT 2)) AS LowSpendingManufacturers JOIN Materials ON ManufacturerMaterials.MaterialID = Materials.MaterialID WHERE Materials.Type = 'Non-Sustainable';"}, {"query": "## sql context :\nCREATE SCHEMA if not exists genetics_stats;CREATE TABLE if not exists genetics_stats.research_projects (id INT, name VARCHAR(100), state VARCHAR(50));INSERT INTO genetics_stats.research_projects (id, name, state) VALUES (1, 'ProjectA', 'California'), (2, 'ProjectB', 'New York'), (3, 'ProjectC', 'California'), (4, 'ProjectD', 'Texas');\n\n## Query generation task:\nHow many genetic research projects have been conducted in each state?\n\n", "response": "SELECT state, COUNT(*) FROM genetics_stats.research_projects GROUP BY state;"}, {"query": "## sql context :\nCREATE TABLE forests (id INT, species VARCHAR(255), year INT, volume FLOAT); INSERT INTO forests (id, species, year, volume) VALUES (1, 'Pine', 2018, 1200.5), (2, 'Oak', 2019, 1500.3), (3, 'Maple', 2020, 2000.7), (4, 'Birch', 2020, 1750.6), (5, 'Pine', 2019, 1300.8), (6, 'Spruce', 2018, 1400.9), (7, 'Spruce', 2019, 1500.0);\n\n## Query generation task:\nWhat is the total volume of timber harvested in 2018 and 2019, grouped by species?\n\n", "response": "SELECT species, SUM(volume) as total_volume FROM forests WHERE year IN (2018, 2019) GROUP BY species;"}, {"query": "## sql context :\nCREATE TABLE rural_infrastructure (id INT, name TEXT, location TEXT, budget FLOAT); INSERT INTO rural_infrastructure (id, name, location, budget) VALUES (1, 'Solar Power Plant', 'India', 600000.00), (2, 'Irrigation System', 'India', 700000.00), (3, 'Healthcare Center', 'Nepal', 400000.00);\n\n## Query generation task:\nList all rural infrastructure projects in India with a budget greater than 500,000 USD.\n\n", "response": "SELECT name, location, budget FROM rural_infrastructure WHERE location = 'India' AND budget > 500000;"}, {"query": "## sql context :\nCREATE TABLE public_transportation_routes (route_id INT, route_name VARCHAR(50), start_point VARCHAR(100), end_point VARCHAR(100));\n\n## Query generation task:\nInsert a new record into the \"public_transportation_routes\" table for a route called \"Rapid 10\"\n\n", "response": "INSERT INTO public_transportation_routes (route_name) VALUES ('Rapid 10');"}, {"query": "## sql context :\nCREATE TABLE buildings (id INT, state VARCHAR(50), building_type VARCHAR(50), energy_efficiency_rating FLOAT); INSERT INTO buildings (id, state, building_type, energy_efficiency_rating) VALUES (1, 'California', 'Commercial', 90.5), (2, 'California', 'Residential', 75.3);\n\n## Query generation task:\nWhat is the average energy efficiency rating for commercial buildings in California?\n\n", "response": "SELECT AVG(energy_efficiency_rating) FROM buildings WHERE state = 'California' AND building_type = 'Commercial';"}, {"query": "## sql context :\nCREATE TABLE makeup_sales (sale_id INT, product_id INT, sale_quantity INT, is_cruelty_free BOOLEAN, sale_date DATE); INSERT INTO makeup_sales VALUES (1, 2, 3, true, '2021-04-15');\n\n## Query generation task:\nHow many cruelty-free makeup products were sold in the US in Q2 2021?\n\n", "response": "SELECT COUNT(*) FROM makeup_sales WHERE is_cruelty_free = true AND sale_date BETWEEN '2021-04-01' AND '2021-06-30';"}, {"query": "## sql context :\nCREATE TABLE TOPublicTransportation (id INT, date DATE, mode VARCHAR(20), ridership INT);\n\n## Query generation task:\nWhat is the daily ridership of public transportation in Toronto by mode?\n\n", "response": "SELECT mode, SUM(ridership) FROM TOPublicTransportation WHERE date = '2022-03-01' GROUP BY mode;"}, {"query": "## sql context :\nCREATE TABLE infrastructure_projects (id INT, name VARCHAR(255), location VARCHAR(255)); CREATE TABLE project_budgets (project_id INT, budget DECIMAL(10, 2));\n\n## Query generation task:\nWhat is the total budget for each project in the 'infrastructure_projects' table, including their respective budgets from the 'project_budgets' table?\n\n", "response": "SELECT i.name, SUM(p.budget) as total_budget FROM infrastructure_projects i INNER JOIN project_budgets p ON i.id = p.project_id GROUP BY i.id;"}, {"query": "## sql context :\nCREATE TABLE customers (customer_id INT, customer_name VARCHAR(255), diet_preference VARCHAR(255)); CREATE TABLE orders (order_id INT, customer_id INT, menu_item_name VARCHAR(255));\n\n## Query generation task:\nShow the most popular menu items for vegetarian customers and their total orders.\n\n", "response": "SELECT o.menu_item_name, COUNT(o.order_id) as total_orders FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id WHERE c.diet_preference = 'vegetarian' GROUP BY o.menu_item_name ORDER BY total_orders DESC LIMIT 10;"}, {"query": "## sql context :\nCREATE TABLE tourism (date DATE, host_country VARCHAR(50), visitor_country VARCHAR(50), number_of_tourists INT); INSERT INTO tourism (date, host_country, visitor_country, number_of_tourists) VALUES ('2022-01-01', 'Australia', 'United States', 10000), ('2022-02-01', 'Australia', 'United States', 11000);\n\n## Query generation task:\nWhat is the percentage change in the number of tourists visiting Australia from the United States between January and February?\n\n", "response": "SELECT (SUM(number_of_tourists) - LAG(SUM(number_of_tourists)) OVER (PARTITION BY visitor_country ORDER BY date)) / LAG(SUM(number_of_tourists)) OVER (PARTITION BY visitor_country ORDER BY date) * 100.0 as percentage_change FROM tourism WHERE host_country = 'Australia' AND visitor_country = 'United States';"}, {"query": "## sql context :\nCREATE TABLE Building (id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), country VARCHAR(255), certification VARCHAR(255));\n\n## Query generation task:\nUpdate the certification of a building in Chicago to LEED Gold\n\n", "response": "UPDATE Building SET certification = 'LEED Gold' WHERE city = 'Chicago';"}, {"query": "## sql context :\nCREATE TABLE animals (id INT PRIMARY KEY, name VARCHAR(50), species VARCHAR(50), population INT, status VARCHAR(50)); CREATE TABLE habitats (id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(50), size FLOAT, animal_id INT);\n\n## Query generation task:\nWhat is the average size of habitats for endangered animal species?\n\n", "response": "SELECT animals.status, AVG(habitats.size) AS avg_size FROM animals INNER JOIN habitats ON animals.id = habitats.animal_id WHERE animals.status = 'Endangered' GROUP BY animals.status;"}, {"query": "## sql context :\nCREATE TABLE indian_ocean_wells (well_id INT, well_name VARCHAR(50), drill_date DATE); INSERT INTO indian_ocean_wells (well_id, well_name, drill_date) VALUES (1, 'Indian Ocean Well A', '2016-01-01'), (2, 'Indian Ocean Well B', '2017-01-01'), (3, 'Indian Ocean Well C', '2018-01-01'), (4, 'Indian Ocean Well D', '2019-01-01');\n\n## Query generation task:\nShow the number of wells drilled in the Indian Ocean each year since 2016.\n\n", "response": "SELECT YEAR(drill_date) AS Year, COUNT(*) AS Number_of_wells FROM indian_ocean_wells GROUP BY YEAR(drill_date);"}, {"query": "## sql context :\nCREATE TABLE StrainLabResults (StrainName VARCHAR(255), Lab VARCHAR(255), THCResult DECIMAL(5,2), CBNResult DECIMAL(5,2), DateTested DATE); INSERT INTO StrainLabResults (StrainName, Lab, THCResult, CBNResult, DateTested) VALUES ('Strain A', 'Lab A', 25.0, 1.0, '2022-01-01'), ('Strain B', 'Lab B', 30.0, 1.5, '2022-01-02'), ('Strain C', 'Lab C', 22.5, 0.5, '2022-01-03'), ('Strain D', 'Lab D', 27.0, 1.2, '2022-01-04'), ('Strain E', 'Lab E', 28.5, 1.8, '2022-01-05');\n\n## Query generation task:\nGet the top 5 strains with the highest THC content from labs in Colorado and California.\n\n", "response": "SELECT StrainName, THCResult FROM (SELECT StrainName, THCResult, ROW_NUMBER() OVER(ORDER BY THCResult DESC) as rn FROM StrainLabResults WHERE Lab IN ('Colorado Lab', 'California Lab')) t WHERE rn <= 5;"}, {"query": "## sql context :\nCREATE TABLE Departments (id INT, department_name TEXT, budget_allocated FLOAT);\n\n## Query generation task:\nWhat is the total budget allocated to each department?\n\n", "response": "SELECT department_name, SUM(budget_allocated) as total_budget FROM Departments GROUP BY department_name;"}, {"query": "## sql context :\nCREATE TABLE marine_protected_areas (area_name VARCHAR(255), establishment_year INT, location VARCHAR(255)); INSERT INTO marine_protected_areas (area_name, establishment_year, location) VALUES ('Coral Pink Sand Dunes State Park', 1963, 'USA'), ('Papah\u0101naumoku\u0101kea Marine National Monument', 2006, 'USA'), ('Riserva Marina di Portofino', 1999, 'Italy');\n\n## Query generation task:\nFind the number of marine protected areas established per year worldwide.\n\n", "response": "SELECT establishment_year, COUNT(*) FROM marine_protected_areas GROUP BY establishment_year;"}, {"query": "## sql context :\nCREATE TABLE financial_crimes (customer_id INT, transaction_date DATE, transaction_value DECIMAL(10,2)); INSERT INTO financial_crimes (customer_id, transaction_date, transaction_value) VALUES (1, '2022-01-01', 5000.00), (1, '2022-01-02', 3000.00), (2, '2022-01-01', 1000.00), (2, '2022-01-02', 2000.00), (3, '2022-01-01', 3000.00), (3, '2022-01-02', 2000.00), (3, '2022-01-03', 1000.00), (3, '2022-01-04', 500.00);\n\n## Query generation task:\nWhat is the maximum transaction value for each customer in the financial crimes table?\n\n", "response": "SELECT customer_id, MAX(transaction_value) FROM financial_crimes GROUP BY customer_id;"}, {"query": "## sql context :\nCREATE TABLE military_operations (operation_id INT, operation_name VARCHAR(255), year INT, budget INT); INSERT INTO military_operations (operation_id, operation_name, year, budget) VALUES (1, 'Operation Inherent Resolve', 2014, 50000000), (2, 'Operation Freedom Sentinel', 2015, 30000000), (3, 'Operation Atlantic Resolve', 2016, 40000000);\n\n## Query generation task:\nWhich military operations have the highest average budget per year?\n\n", "response": "SELECT operation_name, AVG(budget) as avg_budget FROM military_operations GROUP BY operation_name ORDER BY avg_budget DESC;"}, {"query": "## sql context :\nCREATE TABLE Exhibition_Visitors (visitor_id INT, exhibition_id INT, visit_date DATE); INSERT INTO Exhibition_Visitors (visitor_id, exhibition_id, visit_date) VALUES (1, 1, '2023-01-01'), (2, 2, '2023-02-01'); CREATE TABLE Exhibitions (exhibition_id INT, exhibition_name VARCHAR(50), start_date DATE, end_date DATE); INSERT INTO Exhibitions (exhibition_id, exhibition_name, start_date, end_date) VALUES (1, 'Temporary Closure', '2023-01-01', '2023-01-15');\n\n## Query generation task:\nDelete all records related to the exhibition 'Temporary Closure' from the Exhibition_Visitors table.\n\n", "response": "DELETE FROM Exhibition_Visitors WHERE exhibition_id = (SELECT exhibition_id FROM Exhibitions WHERE exhibition_name = 'Temporary Closure');"}, {"query": "## sql context :\nCREATE TABLE donor (don_id INT, don_name TEXT); CREATE TABLE donation (don_id INT, org_id INT); INSERT INTO donor (don_id, don_name) VALUES (1, 'Richard Roe'), (2, 'Susan Smith'), (3, 'Mark Miller'); INSERT INTO donation (don_id, org_id) VALUES (1, 1), (1, 2), (2, 2), (3, 3), (3, 4);\n\n## Query generation task:\nList all the donors who have donated to more than one organization?\n\n", "response": "SELECT don_id, don_name FROM donor WHERE don_id IN (SELECT don_id FROM (SELECT don_id, COUNT(DISTINCT org_id) as num_orgs FROM donation GROUP BY don_id) WHERE num_orgs > 1);"}, {"query": "## sql context :\nCREATE TABLE rigs (rig_id INT, rig_name TEXT, location TEXT, status TEXT, start_date DATE, end_date DATE); INSERT INTO rigs (rig_id, rig_name, location, status, start_date, end_date) VALUES (1, 'Rig 1', 'North Sea', 'active', '2021-02-01', '2021-03-31'), (2, 'Rig 2', 'North Sea', 'idle', '2021-02-01', '2021-12-31'), (3, 'Rig 3', 'North Sea', 'active', '2021-02-01', '2022-01-01'), (4, 'Rig 4', 'Baltic Sea', 'active', '2021-02-01', '2022-01-01');\n\n## Query generation task:\nHow many offshore rigs were active in the North Sea in February 2021?\n\n", "response": "SELECT COUNT(*) FROM rigs WHERE location = 'North Sea' AND status = 'active' AND start_date <= '2021-02-01' AND end_date >= '2021-02-28';"}, {"query": "## sql context :\nCREATE TABLE MenuItems (id INT, item VARCHAR(30), sodium INT, popularity INT); INSERT INTO MenuItems (id, item, sodium, popularity) VALUES (1, 'French Fries', 500, 100), (2, 'Grilled Chicken', 300, 50);\n\n## Query generation task:\nWhich menu items have a high sodium content and are also bestsellers?\n\n", "response": "SELECT item, sodium FROM MenuItems WHERE popularity > 70 ORDER BY sodium DESC;"}, {"query": "## sql context :\nCREATE TABLE org_comms (org_size VARCHAR(20), method VARCHAR(20)); INSERT INTO org_comms (org_size, method) VALUES ('small', 'email'), ('medium', 'phone'), ('large', 'video_conference'), ('extra_large', 'virtual_reality');\n\n## Query generation task:\nWhat are the unique communication methods used by organizations with size 'medium' and 'extra_large'?\n\n", "response": "SELECT DISTINCT method FROM org_comms WHERE org_size IN ('medium', 'extra_large');"}, {"query": "## sql context :\nCREATE TABLE programs (name VARCHAR(255), budget FLOAT, state VARCHAR(255)); INSERT INTO programs (name, budget, state) VALUES ('Program A', 1.2, 'California'), ('Program B', 2.5, 'California'), ('Program C', 1.8, 'California'), ('Program D', 0.9, 'California');\n\n## Query generation task:\nList all the government programs in the state of California that have a budget over $1M and their respective budgets, ordered from highest to lowest budget.\n\n", "response": "SELECT name, budget FROM programs WHERE state = 'California' AND budget > 1000000.0 ORDER BY budget DESC;"}, {"query": "## sql context :\nCREATE TABLE hydro_plants (id INT, name VARCHAR(50), region VARCHAR(50), built_year INT, production INT); INSERT INTO hydro_plants (id, name, region, built_year, production) VALUES (1, 'HydroPlant1', 'SouthAmerica', 2005, 1500), (2, 'HydroPlant2', 'SouthAmerica', 2015, 2000);\n\n## Query generation task:\nWhat is the total energy production (in MWh) of hydroelectric power plants in 'SouthAmerica' that were built before '2010'?\n\n", "response": "SELECT SUM(production) FROM hydro_plants WHERE region = 'SouthAmerica' AND built_year < 2010;"}, {"query": "## sql context :\nCREATE TABLE Donors (DonorID INT, DonorName VARCHAR(50)); INSERT INTO Donors (DonorID, DonorName) VALUES (1001, 'John Doe'), (1002, 'Jane Doe'), (2001, 'Mike Johnson'), (3001, 'Emma Smith'); CREATE TABLE Donations (DonationID INT, DonorID INT, DonationAmount DECIMAL(10,2)); INSERT INTO Donations (DonationID, DonorID, DonationAmount) VALUES (1, 1001, 50.00), (2, 1001, 100.00), (3, 1002, 200.00), (4, 2001, 300.00), (5, 2001, 400.00), (6, 3001, 500.00), (7, 3001, 600.00), (8, 3001, 700.00);\n\n## Query generation task:\nWhat's the minimum donation amount for the top 10 donors?\n\n", "response": "SELECT d.DonationAmount AS MinimumDonationAmount FROM (SELECT DonorID, ROW_NUMBER() OVER (ORDER BY SUM(DonationAmount) DESC) AS Ranking FROM Donations GROUP BY DonorID) r JOIN Donations d ON r.DonorID = d.DonorID WHERE r.Ranking <= 10;"}, {"query": "## sql context :\nCREATE TABLE Museums (id INT, name VARCHAR(30)); CREATE TABLE Exhibitions (id INT, museum_id INT, city VARCHAR(20)); INSERT INTO Museums (id, name) VALUES (1, 'New York Museum'), (2, 'Chicago Art Gallery'), (3, 'Los Angeles Museum'); INSERT INTO Exhibitions (id, museum_id, city) VALUES (1, 1, 'New York'), (2, 1, 'Chicago'), (3, 3, 'Los Angeles');\n\n## Query generation task:\nList all museums that have hosted exhibitions in both New York and Chicago.\n\n", "response": "SELECT Museums.name FROM Museums INNER JOIN Exhibitions ON Museums.id = Exhibitions.museum_id WHERE Exhibitions.city IN ('New York', 'Chicago') GROUP BY Museums.name HAVING COUNT(DISTINCT Exhibitions.city) = 2;"}, {"query": "## sql context :\nCREATE TABLE Vehicle (id INT, make VARCHAR(255), model VARCHAR(255), manufacture_date DATE, country VARCHAR(255)); INSERT INTO Vehicle (id, make, model, manufacture_date, country) VALUES (1, 'Nissan', 'Sentra', '2022-02-15', 'Mexico');\n\n## Query generation task:\nHow many vehicles were manufactured in Mexico in the past year?\n\n", "response": "SELECT COUNT(*) FROM Vehicle WHERE country = 'Mexico' AND manufacture_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}, {"query": "## sql context :\nCREATE TABLE Events (EventID INT, Name TEXT, Attendance INT);CREATE TABLE EventLocations (EventID INT, Country TEXT);\n\n## Query generation task:\nFind the average attendance at events in each country.\n\n", "response": "SELECT EventLocations.Country, AVG(Events.Attendance) FROM Events INNER JOIN EventLocations ON Events.EventID = EventLocations.EventID GROUP BY EventLocations.Country;"}, {"query": "## sql context :\nCREATE TABLE workplaces (id INT, name VARCHAR(255), industry VARCHAR(255), union_status VARCHAR(255), num_employees INT); INSERT INTO workplaces (id, name, industry, union_status, num_employees) VALUES (1, 'ABC Company', 'Manufacturing', 'Union', 500), (2, 'XYZ Corporation', 'Manufacturing', 'Non-Union', 250), (3, 'DEF Industries', 'Retail', 'Union', 300), (4, 'GHI Company', 'Retail', 'Non-Union', 150), (5, 'JKL Industries', 'Construction', 'Union', 200);\n\n## Query generation task:\nCalculate the total number of workplaces by industry, differentiating between union and non-union workplaces\n\n", "response": "SELECT industry, union_status, COUNT(*) as 'Total Workplaces' FROM workplaces GROUP BY industry, union_status;"}, {"query": "## sql context :\nlanguage_revitalization (id, language, program_name, location, start_year, end_year)\n\n## Query generation task:\nCreate a new table language_revitalization with the following columns: id, language, program_name, location, start_year, end_year.\n\n", "response": "CREATE TABLE language_revitalization (id INT PRIMARY KEY, language VARCHAR(50), program_name VARCHAR(100), location VARCHAR(50), start_year INT, end_year INT);"}, {"query": "## sql context :\nCREATE TABLE hospital_beds (id INT, country TEXT, num_beds INT); INSERT INTO hospital_beds (id, country, num_beds) VALUES (1, 'United States', 900000), (2, 'Mexico', 250000), (3, 'Canada', 150000), (4, 'Brazil', 500000), (5, 'Australia', 100000), (6, 'Russia', 1200000), (7, 'China', 4000000), (8, 'India', 2000000), (9, 'Germany', 800000), (10, 'France', 700000);\n\n## Query generation task:\nWhat is the total number of hospital beds in each country in the world?\n\n", "response": "SELECT country, SUM(num_beds) FROM hospital_beds GROUP BY country;"}, {"query": "## sql context :\nCREATE TABLE Players (PlayerID int, Age int, Gender varchar(10), GamePreference varchar(20)); INSERT INTO Players (PlayerID, Age, Gender, GamePreference) VALUES (1, 25, 'Male', 'VR'); INSERT INTO Players (PlayerID, Age, Gender, GamePreference) VALUES (2, 30, 'Female', 'Non-VR');\n\n## Query generation task:\nWhat is the percentage of players who prefer VR games, and what is the percentage of players who prefer Non-VR games?\n\n", "response": "SELECT CASE WHEN GamePreference = 'VR' THEN 'VR' ELSE 'Non-VR' END AS GamePreference, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Players), 1) AS Percentage FROM Players GROUP BY GamePreference;"}, {"query": "## sql context :\nCREATE TABLE workers (id INT, industry VARCHAR(255), salary FLOAT, union_member BOOLEAN); INSERT INTO workers (id, industry, salary, union_member) VALUES (1, 'Manufacturing', 50000.0, true), (2, 'Education', 65000.0, true), (3, 'Retail', 30000.0, false);\n\n## Query generation task:\nWhat is the total number of workers in the 'Education' industry who are part of a union and earn more than $60,000?\n\n", "response": "SELECT COUNT(*) FROM workers WHERE industry = 'Education' AND union_member = true AND salary > 60000;"}, {"query": "## sql context :\nCREATE TABLE collections (id INT, name VARCHAR(50), artworks INT); INSERT INTO collections (id, name, artworks) VALUES (1, 'Oceania Collection 1', 50), (2, 'Oceania Collection 2', 60), (3, 'European Collection', 70);\n\n## Query generation task:\nWhat is the average number of artworks in the collections from Oceania?\n\n", "response": "SELECT AVG(artworks) FROM collections WHERE name LIKE '%Oceania%';"}, {"query": "## sql context :\nCREATE TABLE investments (investment_id INT, investment_type VARCHAR(20), investment_date DATE, amount DECIMAL(10,2)); INSERT INTO investments (investment_id, investment_type, investment_date, amount) VALUES (1, 'tower upgrades', '2021-03-15', 5000.00), (2, 'fiber optics', '2021-12-30', 7000.00);\n\n## Query generation task:\nWhat is the total number of network infrastructure investments made in 2021?\n\n", "response": "SELECT SUM(amount) FROM investments WHERE investment_date >= '2021-01-01' AND investment_date < '2022-01-01';"}, {"query": "## sql context :\nCREATE TABLE intangible_heritage (id INT, name VARCHAR(50), location VARCHAR(50), status VARCHAR(50), PRIMARY KEY(id)); INSERT INTO intangible_heritage (id, name, location, status) VALUES (1, 'Kutiyattam', 'India, Asia', 'Masterpiece'), (2, 'Noh', 'Japan, Asia', 'Masterpiece'), (3, 'Batik', 'Indonesia, Asia', 'Masterpiece');\n\n## Query generation task:\nWhich indigenous art forms from Asia have been recognized by UNESCO as Masterpieces of the Oral and Intangible Heritage of Humanity?\n\n", "response": "SELECT i.name, i.location, i.status FROM intangible_heritage i WHERE i.status = 'Masterpiece';"}, {"query": "## sql context :\nCREATE TABLE brands(brand_id INT, brand_name TEXT, products_last_year INT, products_this_year INT); INSERT INTO brands(brand_id, brand_name, products_last_year, products_this_year) VALUES (1, 'BrandA', 200, 300), (2, 'BrandB', 500, 700), (3, 'BrandC', 1000, 1200), (4, 'BrandD', 800, 700), (5, 'BrandE', 900, 1000);\n\n## Query generation task:\nIdentify brands that have increased their product count by more than 50% since last year.\n\n", "response": "SELECT brand_id, brand_name, ((products_this_year - products_last_year) * 100.0 / products_last_year) as growth_percentage FROM brands WHERE (products_this_year - products_last_year) > 0.5 * products_last_year ORDER BY growth_percentage DESC;"}, {"query": "## sql context :\nCREATE TABLE Funding (company_id INT, funding_year INT, amount INT); INSERT INTO Funding (company_id, funding_year, amount) VALUES (1, 2015, 3000000); INSERT INTO Funding (company_id, funding_year, amount) VALUES (2, 2017, 5000000); INSERT INTO Funding (company_id, funding_year, amount) VALUES (3, 2017, 7000000);\n\n## Query generation task:\nWhat is the total funding received by companies founded in 2017, ordered by the amount of funding?\n\n", "response": "SELECT company_id, SUM(amount) as total_funding FROM Funding WHERE funding_year = 2017 GROUP BY company_id ORDER BY total_funding DESC;"}, {"query": "## sql context :\nCREATE TABLE GraduateStudents (StudentID INT, Name VARCHAR(50), Department VARCHAR(50), Publications INT, PublicationYear INT);\n\n## Query generation task:\nHow many publications were made by graduate students in the Mathematics department in the year 2020?\n\n", "response": "SELECT COUNT(Publications) FROM GraduateStudents WHERE Department = 'Mathematics' AND PublicationYear = 2020;"}, {"query": "## sql context :\nCREATE TABLE spacecraft (id INT, name VARCHAR(100), agency VARCHAR(50), launch_date DATE); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (1, 'Voyager 1', 'NASA', '1977-09-05'); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (2, 'Galileo', 'NASA', '1989-10-18'); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (3, 'Cassini', 'CNES', '1997-10-15'); INSERT INTO spacecraft (id, name, agency, launch_date) VALUES (4, 'Mars Express', 'ESA', '2003-06-02');\n\n## Query generation task:\nWhich space agencies have launched spacecraft before 2000?\n\n", "response": "SELECT DISTINCT agency FROM spacecraft WHERE YEAR(launch_date) < 2000;"}, {"query": "## sql context :\nCREATE TABLE climate_finance (year INT, donor VARCHAR(20), recipient VARCHAR(20), category VARCHAR(10), amount FLOAT); INSERT INTO climate_finance (year, donor, recipient, category, amount) VALUES (2020, 'USA', 'India', 'mitigation', 10000000), (2020, 'USA', 'Brazil', 'adaptation', 15000000), (2020, 'Germany', 'Indonesia', 'mitigation', 8000000), (2020, 'France', 'South Africa', 'adaptation', 12000000);\n\n## Query generation task:\nWhat's the total amount of climate finance committed by developed countries to developing countries for mitigation and adaptation projects in 2020?\n\n", "response": "SELECT SUM(amount) FROM climate_finance WHERE year = 2020 AND (donor IN ('USA', 'Germany', 'France') AND recipient IN ('India', 'Brazil', 'Indonesia', 'South Africa') AND category IN ('mitigation', 'adaptation'));"}, {"query": "## sql context :\nCREATE TABLE ClientInvestments (ClientID INT, InvestmentType VARCHAR(20), Value FLOAT); INSERT INTO ClientInvestments (ClientID, InvestmentType, Value) VALUES (1, 'Stock', 10000), (1, 'Bond', 20000), (2, 'Stock', 30000), (2, 'Bond', 15000), (3, 'Stock', 5000), (3, 'Bond', 25000), (4, 'Stock', 40000), (4, 'Bond', 30000), (5, 'Stock', 7000), (5, 'Bond', 18000); CREATE TABLE Clients (ClientID INT, State VARCHAR(20)); INSERT INTO Clients (ClientID, State) VALUES (1, 'NY'), (2, 'TX'), (3, 'CA'), (4, 'NY'), (5, 'TX');\n\n## Query generation task:\nWhat is the total value of investments in bonds for clients residing in Texas?\n\n", "response": "SELECT SUM(Value) FROM ClientInvestments CI JOIN Clients C ON CI.ClientID = C.ClientID WHERE C.State = 'TX' AND InvestmentType = 'Bond';"}]